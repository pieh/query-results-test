{
  "path": "/docs/testing-css-in-js/",
  "result": {
    "data": {
      "mdx": {
        "body": "function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Testing CSS-in-JS\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Popular CSS-in-JS libraries like \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/styled-components/styled-components\"\n  }), \"styled-components\"), \" or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/emotion-js/emotion\"\n  }), \"emotion\"), \" can also be tested with the help of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/styled-components/jest-styled-components\"\n  }), \"jest-styled-components\"), \" or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/emotion-js/emotion/tree/master/packages/jest-emotion\"\n  }), \"jest-emotion\"), \" respectively. These packages improve Jest\\u2019s built-in snapshot testing experience and are a great way to help avoid unintended changes to your website\\u2019s UI. Please refer to your package\\u2019s documentation to see if it also offers testing capabilities.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Snapshot serializers\"), \" like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest-styled-components\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest-emotion\"), \" modify the standard output to a more meaningful and readable snapshot, e.g. by removing unnecessary information or displaying data in another format. Which ultimately leads to more comparable and effective snapshot tests.\"), mdx(\"p\", null, \"By default snapshots of your styled components show the generated class names (which you didn\\u2019t set) and no styling information. When changing the styles you\\u2019ll only see the diff of some cryptic class names (hashes). That\\u2019s why you should use the above mentioned \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"snapshot serializers\"), \". They remove the hashes and format the CSS in style elements.\"), mdx(\"p\", null, \"For this example we\\u2019ll use emotion. The testing utilities of emotion and glamor are largely based on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/styled-components/jest-styled-components\"\n  }), \"jest-styled-components\"), \" so they have a similar usage. Please have a look at the testing section of your library to follow along.\"), mdx(\"h2\", {\n    \"id\": \"installation\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#installation\",\n    \"aria-label\": \"installation permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Installation\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"npm install --save-dev jest-emotion babel-plugin-emotion\\n\")), mdx(\"p\", null, \"As \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/packages/gatsby-plugin-emotion/\"\n  }), \"Gatsby\\u2019s emotion plugin\"), \" is using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"babel-plugin-emotion\"), \" under the hood you\\u2019ll also need to install it so that Jest can use it.\"), mdx(\"p\", null, \"If you followed along with the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/unit-testing\"\n  }), \"Unit testing guide\"), \" you\\u2019ll have the file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest-preprocess.js\"), \" at the root of your project. Open that file and add the plugin:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff:title=jest-preprocess.js\"\n  }), \"const babelOptions = {\\n  presets: [\\\"babel-preset-gatsby\\\"],\\n+  plugins: [\\n+    \\\"emotion\\\",\\n+  ],\\n}\\n\\nmodule.exports = require(\\\"babel-jest\\\").createTransformer(babelOptions)\\n\")), mdx(\"p\", null, \"In order to tell Jest to use the serializer you\\u2019ll need to create the file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setup-test-env.js\"), \" which will be run automatically before every test. Create the file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setup-test-env.js\"), \" at the root of your project. Insert this code into it:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js:title=setup-test-env.js\"\n  }), \"import { createSerializer } from \\\"jest-emotion\\\"\\nimport * as emotion from \\\"@emotion/core\\\"\\n\\nexpect.addSnapshotSerializer(createSerializer(emotion))\\n\")), mdx(\"p\", null, \"Lastly you need to tell Jest where to find this file. Open your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" and add this entry to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"jest\\\"\"), \" section:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json:title=package.json\"\n  }), \"\\\"jest\\\": {\\n  \\\"setupTestFrameworkScriptFile\\\": \\\"<rootDir>/setup-test-env.js\\\"\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#usage\",\n    \"aria-label\": \"usage permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Usage\"), mdx(\"p\", null, \"In this example you\\u2019ll use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-test-renderer\"), \" but you can also use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/testing-react-components\"\n  }), \"@testing-library/react\"), \" or any other appropriate library. Because you created the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setup-test-env.js\"), \" file you can write your unit tests like you used to do. But now you\\u2019ll also get the styling information!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js:title=src/components/Button.test.js\"\n  }), \"import React from \\\"react\\\"\\nimport styled from \\\"react-emotion\\\"\\nimport renderer from \\\"react-test-renderer\\\"\\n\\nconst Button = styled.div`\\n  color: hotpink;\\n`\\n\\ntest(\\\"Button renders correctly\\\", () => {\\n  expect(\\n    renderer.create(<Button>This is hotpink.</Button>).toJSON()\\n  ).toMatchSnapshot()\\n})\\n\")), mdx(\"p\", null, \"The resulting snapshot will look like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Jest Snapshot v1, https://goo.gl/fbAQLP\\n\\nexports[`Button renders correctly 1`] = `\\n.emotion-0 {\\n  color: hotpink;\\n}\\n\\n<div\\n  className=\\\"emotion-0 emotion-1\\\"\\n>\\n  This is hotpink.\\n</div>\\n`\\n\")), mdx(\"p\", null, \"If your styled component depends on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theme\"), \" via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ThemeProvider\"), \" you\\u2019ll have two options:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Wrap all your components with the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ThemeProvider\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use API helpers (have a look at the library\\u2019s documentation, e.g. \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/styled-components/jest-styled-components#theming\"\n  }), \"styled-components\"), \" or \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/emotion-js/emotion/tree/master/packages/emotion-theming#createbroadcast-function\"\n  }), \"emotion\"), \")\")), mdx(\"p\", null, \"And this is where snapshots tests really shine. If you change, e.g. the primary color in your theme file you\\u2019ll see which components get affected by this change. This way you can catch unintended changes to the style of your components.\"), mdx(\"p\", null, \"This example uses the first option:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js:title=src/components/Wrapper.test.js\"\n  }), \"import React from \\\"react\\\"\\nimport { ThemeProvider } from \\\"emotion-theming\\\"\\nimport renderer from \\\"react-test-renderer\\\"\\n\\nconst theme = {\\n  maxWidth: \\\"1450px\\\",\\n}\\n\\nconst Wrapper = styled.section`\\n  max-width: ${props => props.theme.maxWidth};\\n`\\n\\ntest(\\\"Wrapper renders correctly\\\", () => {\\n  expect(\\n    renderer\\n      .create(\\n        <ThemeProvider theme={theme}>\\n          <Wrapper>Content.</Wrapper>\\n        </ThemeProvider>\\n      )\\n      .toJSON()\\n  ).toMatchSnapshot()\\n})\\n\")), mdx(\"p\", null, \"The resulting snapshot will look like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Jest Snapshot v1, https://goo.gl/fbAQLP\\n\\nexports[`Wrapper renders correctly 1`] = `\\n.emotion-0 {\\n  max-width: 1450px;\\n}\\n\\n<section\\n  className=\\\"emotion-0 emotion-1\\\"\\n>\\n  Content\\n</div>\\n`\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "excerpt": "Popular CSS-in-JS libraries like  styled-components  or  emotion  can also be tested with the help of  jest-styled-components  or  jest…",
        "timeToRead": 2,
        "tableOfContents": {
          "items": [
            {
              "url": "#installation",
              "title": "Installation"
            },
            {
              "url": "#usage",
              "title": "Usage"
            }
          ]
        },
        "fields": {
          "slug": "/docs/testing-css-in-js/",
          "anchor": "testing-css-in-js"
        },
        "frontmatter": {
          "title": "Testing CSS-in-JS",
          "overview": null,
          "issue": null,
          "disableTableOfContents": null,
          "tableOfContentsDepth": null
        },
        "parent": {
          "__typename": "File",
          "relativePath": "docs/testing-css-in-js.md"
        }
      }
    },
    "pageContext": {
      "isCreatedByStatefulCreatePages": false,
      "slug": "/docs/testing-css-in-js/",
      "prev": {
        "title": "End-to-end Testing",
        "link": "/docs/end-to-end-testing/"
      },
      "next": {
        "title": "Testing React Components",
        "link": "/docs/testing-react-components/"
      }
    }
  },
  "query": "query usersMisiekDevGatsbyWwwSrcTemplatesTemplateDocsMarkdownJs2546709735(\n  $path: String!\n) {\n  mdx(fields: {slug: {eq: $path}}) {\n    body\n    excerpt\n    timeToRead\n    tableOfContents\n    fields {\n      slug\n      anchor\n    }\n    frontmatter {\n      title\n      overview\n      issue\n      disableTableOfContents\n      tableOfContentsDepth\n    }\n    ...MarkdownPageFooterMdx\n  }\n}\n\nfragment MarkdownPageFooterMdx on Mdx {\n  parent {\n    __typename\n    ... on File {\n      relativePath\n    }\n  }\n}\n"
}