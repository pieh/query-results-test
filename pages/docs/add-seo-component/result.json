{
  "path": "/docs/add-seo-component/",
  "result": {
    "data": {
      "mdx": {
        "body": "function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Adding an SEO component\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Every site on the web has basic \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"meta-tags\"), \" like the title, favicon or description of the page in their \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<head>\"), \" element. This information gets displayed in the browser and is used when someone, e.g. shares your website on Twitter. You can give your users and these websites additional data to embed your website with more data \\u2014 and that\\u2019s where this guide for a SEO component comes in. At the end you\\u2019ll have a component you can place in your layout file and have rich previews for other clients, smartphone users, and search engines.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: This component will use StaticQuery. If you\\u2019re unfamiliar with that, have a look at the \", mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"/docs/static-query/\"\n  }), \"StaticQuery documentation\"), \". You also have to have \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"react-helmet\"), \" installed for which you can have a look at \", mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"/docs/add-page-metadata\"\n  }), \"this document\"), \".\")), mdx(\"h2\", {\n    \"id\": \"gatsby-configjs\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#gatsby-configjs\",\n    \"aria-label\": \"gatsby configjs permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"gatsby-config.js\"), mdx(\"p\", null, \"Gatsby makes all data put into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"siteMetadata\"), \" section of your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-config\"), \" file automatically available in GraphQL and therefore it\\u2019s a good idea to place your information for the component there.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js:title=gatsby-config.js\"\n  }), \"module.exports = {\\n  siteMetadata: {\\n    title: \\\"Severus Snape\\\",\\n    titleTemplate: \\\"%s \\xB7 The Real Hero\\\",\\n    description:\\n      \\\"Hogwarts Potions master, Head of Slytherin house and former Death Eater.\\\",\\n    url: \\\"https://www.doe.com\\\", // No trailing slash allowed!\\n    image: \\\"/images/snape.jpg\\\", // Path to your image you placed in the 'static' folder\\n    twitterUsername: \\\"@occlumency\\\",\\n  },\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"seo-component\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#seo-component\",\n    \"aria-label\": \"seo component permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"SEO component\"), mdx(\"p\", null, \"Create a new component with this initial boilerplate:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/components/SEO.js\"\n  }), \"import React from \\\"react\\\"\\nimport { Helmet } from \\\"react-helmet\\\"\\nimport PropTypes from \\\"prop-types\\\"\\nimport { StaticQuery, graphql } from \\\"gatsby\\\"\\n\\nconst SEO = ({ title, description, image, pathname, article }) => ()\\n\\nexport default SEO\\n\\nSEO.propTypes = {\\n  title: PropTypes.string,\\n  description: PropTypes.string,\\n  image: PropTypes.string,\\n  pathname: PropTypes.string,\\n  article: PropTypes.bool,\\n}\\n\\nSEO.defaultProps = {\\n  title: null,\\n  description: null,\\n  image: null,\\n  pathname: null,\\n  article: false,\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"propTypes\"), \" are included in this example to help you ensure you\\u2019re getting all the data you need in the component, and to help serve as a guide while destructuring / using those props.\"), mdx(\"p\", null, \"As the SEO component should also be usable in other files, e.g. a template file, the component also accepts properties for which you set sensible defaults in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SEO.defaultProps\"), \" section. This way the information you put into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"siteMetadata\"), \" gets used every time unless you define the property explicitly.\"), mdx(\"p\", null, \"Now define the query and place it in the StaticQuery (you can also save the query in a constant). You can also alias query items, so \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"title\"), \" gets renamed to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultTitle\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/components/SEO.js\"\n  }), \"const SEO = ({ title, description, image, pathname, article }) => (\\n  <StaticQuery\\n    query={query}\\n    render={}\\n  />\\n)\\n\\nexport default SEO\\n\\nconst query = graphql`\\n  query SEO {\\n    site {\\n      siteMetadata {\\n        defaultTitle: title\\n        titleTemplate\\n        defaultDescription: description\\n        siteUrl: url\\n        defaultImage: image\\n        twitterUsername\\n      }\\n    }\\n  }\\n`;\\n\")), mdx(\"p\", null, \"The next step is to destructure the data from the query and to create an object that checks if the props were used \\u2014 if not the default values are utilized. The name aliasing comes in handy here: It avoids name collisions.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/components/SEO.js\"\n  }), \"const SEO = ({ title, description, image, pathname, article }) => (\\n  <StaticQuery\\n    query={query}\\n    render={({\\n      site: {\\n        siteMetadata: {\\n          defaultTitle,\\n          titleTemplate,\\n          defaultDescription,\\n          siteUrl,\\n          defaultImage,\\n          twitterUsername,\\n        }\\n      }\\n    }) => {\\n      const seo = {\\n        title: title || defaultTitle,\\n        description: description || defaultDescription,\\n        image: `${siteUrl}${image || defaultImage}`,\\n        url: `${siteUrl}${pathname || '/'}`,\\n      }\\n\\n      return ()\\n    }}\\n  />\\n)\\n\\nexport default SEO\\n\")), mdx(\"p\", null, \"The last step is to return this data with the help of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Helmet\"), \". Your complete SEO component should look like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/components/SEO.js\"\n  }), \"import React from \\\"react\\\"\\nimport { Helmet } from \\\"react-helmet\\\"\\nimport PropTypes from \\\"prop-types\\\"\\nimport { StaticQuery, graphql } from \\\"gatsby\\\"\\n\\nconst SEO = ({ title, description, image, pathname, article }) => (\\n  <StaticQuery\\n    query={query}\\n    render={({\\n      site: {\\n        siteMetadata: {\\n          defaultTitle,\\n          titleTemplate,\\n          defaultDescription,\\n          siteUrl,\\n          defaultImage,\\n          twitterUsername,\\n        },\\n      },\\n    }) => {\\n      const seo = {\\n        title: title || defaultTitle,\\n        description: description || defaultDescription,\\n        image: `${siteUrl}${image || defaultImage}`,\\n        url: `${siteUrl}${pathname || \\\"/\\\"}`,\\n      }\\n\\n      return (\\n        <>\\n          <Helmet title={seo.title} titleTemplate={titleTemplate}>\\n            <meta name=\\\"description\\\" content={seo.description} />\\n            <meta name=\\\"image\\\" content={seo.image} />\\n            {seo.url && <meta property=\\\"og:url\\\" content={seo.url} />}\\n            {(article ? true : null) && (\\n              <meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n            )}\\n            {seo.title && <meta property=\\\"og:title\\\" content={seo.title} />}\\n            {seo.description && (\\n              <meta property=\\\"og:description\\\" content={seo.description} />\\n            )}\\n            {seo.image && <meta property=\\\"og:image\\\" content={seo.image} />}\\n            <meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n            {twitterUsername && (\\n              <meta name=\\\"twitter:creator\\\" content={twitterUsername} />\\n            )}\\n            {seo.title && <meta name=\\\"twitter:title\\\" content={seo.title} />}\\n            {seo.description && (\\n              <meta name=\\\"twitter:description\\\" content={seo.description} />\\n            )}\\n            {seo.image && <meta name=\\\"twitter:image\\\" content={seo.image} />}\\n          </Helmet>\\n        </>\\n      )\\n    }}\\n  />\\n)\\n\\nexport default SEO\\n\\nSEO.propTypes = {\\n  title: PropTypes.string,\\n  description: PropTypes.string,\\n  image: PropTypes.string,\\n  pathname: PropTypes.string,\\n  article: PropTypes.bool,\\n}\\n\\nSEO.defaultProps = {\\n  title: null,\\n  description: null,\\n  image: null,\\n  pathname: null,\\n  article: false,\\n}\\n\\nconst query = graphql`\\n  query SEO {\\n    site {\\n      siteMetadata {\\n        defaultTitle: title\\n        titleTemplate\\n        defaultDescription: description\\n        siteUrl: url\\n        defaultImage: image\\n        twitterUsername\\n      }\\n    }\\n  }\\n`\\n\")), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#examples\",\n    \"aria-label\": \"examples permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Examples\"), mdx(\"p\", null, \"You could also put the Facebook and Twitter meta-tags into their own components, add custom favicons you placed in your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"static\"), \" folder, and add \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://schema.org/\"\n  }), \"schema.org\"), \" data (Google will use that for their \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developers.google.com/search/docs/guides/intro-structured-data\"\n  }), \"Structured Data\"), \"). To see how that works you can have a look at these two examples:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/marisamorby/marisamorby.com/blob/master/packages/gatsby-theme-blog-sanity/src/components/seo.js\"\n  }), \"marisamorby.com\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/LeKoArts/gatsby-starter-prismic/blob/master/src/components/SEO/SEO.jsx\"\n  }), \"gatsby-starter-prismic\"))), mdx(\"p\", null, \"As mentioned at the beginning you are also able to use the component in templates, like in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/jlengstorf/marisamorby.com/blob/master/src/templates/post.js#L12-L18\"\n  }), \"this example\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "excerpt": "Every site on the web has basic  meta-tags  like the title, favicon or description of the page in their  <head>  element. This information…",
        "timeToRead": 2,
        "tableOfContents": {
          "items": [
            {
              "url": "#gatsby-configjs",
              "title": "gatsby-config.js"
            },
            {
              "url": "#seo-component",
              "title": "SEO component"
            },
            {
              "url": "#examples",
              "title": "Examples"
            }
          ]
        },
        "fields": {
          "slug": "/docs/add-seo-component/",
          "anchor": "add-seo-component"
        },
        "frontmatter": {
          "title": "Adding an SEO component",
          "overview": null,
          "issue": null,
          "disableTableOfContents": null,
          "tableOfContentsDepth": null
        },
        "parent": {
          "__typename": "File",
          "relativePath": "docs/add-seo-component.md"
        }
      }
    },
    "pageContext": {
      "isCreatedByStatefulCreatePages": false,
      "slug": "/docs/add-seo-component/",
      "prev": {
        "title": "Adding a 404 Page",
        "link": "/docs/add-404-page/",
        "breadcrumbTitle": "404 Page"
      },
      "next": {
        "title": "Adding Tags and Categories to Blog Posts",
        "link": "/docs/adding-tags-and-categories-to-blog-posts/",
        "breadcrumbTitle": "Blog Tags and Categories"
      }
    }
  },
  "query": "query usersMisiekDevGatsbyWwwSrcTemplatesTemplateDocsMarkdownJs2546709735(\n  $path: String!\n) {\n  mdx(fields: {slug: {eq: $path}}) {\n    body\n    excerpt\n    timeToRead\n    tableOfContents\n    fields {\n      slug\n      anchor\n    }\n    frontmatter {\n      title\n      overview\n      issue\n      disableTableOfContents\n      tableOfContentsDepth\n    }\n    ...MarkdownPageFooterMdx\n  }\n}\n\nfragment MarkdownPageFooterMdx on Mdx {\n  parent {\n    __typename\n    ... on File {\n      relativePath\n    }\n  }\n}\n"
}