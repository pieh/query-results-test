{
  "path": "/blog/2018-10-26-export-a-drupal-site-to-gatsby/",
  "result": {
    "data": {
      "mdx": {
        "body": "function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to export a Drupal site to Gatsby\",\n  \"date\": \"2018-12-18T00:00:00.000Z\",\n  \"author\": \"JoaquÃ­n Bravo Contreras\",\n  \"tags\": [\"drupal\", \"getting-started\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This blogpost explains how I learned to reduce the cost of maintaining a simple brochure or blog site. When using Drupal, you need at least a shared hosting platform (there is no Wordpress.com for Drupal sites). So, migrating to a static site generator, like Jekyll or Gatsby, seemed like a good idea. Gatsby is also a great opportunity to learn React and then get hosting for free using something like GitHub Pages. This post is going to describe how to migrate a simple blog\\u2014that has featured images on the posts, comments and tags\\u2014from Drupal to Gatsby.\"), mdx(\"p\", null, \"To facilitate exporting the site, the first thing I did was export the database from the mysql database server to an sqlite file that I could use locally. To do this I used the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/dumblob/mysql2sqlite\"\n  }), \"mysql2sqlite\"), \" project, which, as described on the project page, can be done with two commands like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"mysqldump --skip-extended-insert --compact DB_name > dump_mysql.sql\\n./mysql2sqlite dump_mysql.sql | sqlite3 mysqlite.db\\n\")), mdx(\"h2\", {\n    \"id\": \"how-to-export-a-drupal-site-to-gatsby-yourself\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#how-to-export-a-drupal-site-to-gatsby-yourself\",\n    \"aria-label\": \"how to export a drupal site to gatsby yourself permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"How to export a Drupal site to Gatsby yourself\"), mdx(\"p\", null, \"To do this yourself, you\\u2019ll build a simple blog using the excellent \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/gatsbyjs/gatsby-starter-blog\"\n  }), \"gatsby-starter-blog\"), \" project. Create a new project and then add a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/JoshuaWise/better-sqlite3\"\n  }), \"sqlite library\"), \" as a dev dependency:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"gatsby new gatsby-blog https://github.com/gatsbyjs/gatsby-starter-blog\\ngit init # so you can keep track of the changes\\nnpm i --save-dev better-sqlite3\\n\")), mdx(\"p\", null, \"The useful commands on an sqlite3 command line to explore are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".tables\"), \" to see all tables :) and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".schema table_name\"), \" to see information about a specific table. Oh! and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".help\"), \" to know more.\"), mdx(\"p\", null, \"Next, you will be creating a new file on your project at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/scripts/migrate.js\"), \". Initially, what you want is to iterate through all your posts and export basic data like title, created date, body and status (published or draft). All of that data is in two tables, the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"node\"), \" table and the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"field_data_body\"), \". Initially, your script will look like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const Database = require('better-sqlite3');\\nconst fs = require('fs');\\nconst http = require('http');\\n\\n// argv[2] would be the first argument passed to > node src/scripts/import.js [database.db]\\nconst db = new Database(process.argv[2], {readonly: true});\\n\\nconst rows = db.prepare(`SELECT n.nid, n.title, n.created, b.body_value, n.status FROM node n\\n  INNER JOIN field_data_body b ON b.entity_id = n.nid`).all();\\nrows.forEach(row => {\\n  // taken from: https://gist.github.com/matthagemann/382adfc57adbd5af078dc93feef01fe1\\n  const slug = slugify(row.title);\\n  const folder = row.status ? '/../pages/' : '/../../drafts/';\\n  const path = __dirname + folder + slug;\\n  // timestamp in Drupal is in seconds, Date() expects microseconds\\n  const date = new Date(row.created * 1000);\\n\")), mdx(\"p\", null, \"The interesting thing here is the initial query, and this is based on a Drupal 7 database. A Drupal 8 or Drupal 6 database could be different, so check your schema. Next, load the tags on a simple JavaScript array. Each post can have more than one tag, so you can take advantage of better-sqlite\\u2019s \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \".pluck()\"), \" function, which retrieves only the first column of a database query, and the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \".all()\"), \" function, which retrieves all rows in a single array:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const tags = db\\n  .prepare(\\n    `SELECT td.name FROM taxonomy_index ti\\n    INNER JOIN taxonomy_term_data td ON td.tid = ti.tid AND ti.nid = ?\\n    WHERE ti.tid NOT IN (SELECT tid FROM taxonomy_index GROUP BY tid HAVING count(nid) = 1)`\\n  )\\n  .pluck()\\n  .all(row.nid)\\n\")), mdx(\"p\", null, \"For the image, you will retrieve only the URL of the image, so you can download it and store it locally. And you will replace \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public://\"), \" for the URL path of the images folder on your old site:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"let image = db\\n  .prepare(\\n    `SELECT filename, uri FROM field_data_field_image i\\n    INNER JOIN file_managed f ON f.fid = i.field_image_fid\\n    WHERE i.entity_id = ?`\\n  )\\n  .get(row.nid)\\nif (image) {\\n  image.uri = image.uri.replace(\\\"public://\\\", \\\"http://myblog.com/files/\\\")\\n}\\n\")), mdx(\"p\", null, \"And now that you have all the data you need, it is just a matter of creating a file with the metadata in yaml format and the body of the text in Markdown format. Luckily, a Drupal blog can also use Markdown or you can also look for an HTML to Markdown JavaScript library like \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/domchristie/turndown\"\n  }), \"turndown\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"  fs.mkdir(path, (err) => { });\\n  const file = fs.createWriteStream(path + '/index.md', { flags: 'w' });\\n  // This is here incase any errors occur\\n  file.on('open', function () {\\n    file.write('---\\\\n');\\n    file.write('title: \\\"' + row.title + '\\\"\\\\n');\\n    file.write('date: ' + date.toISOString() + '\\\\n');\\n    file.write('aliases: ' + JSON.stringify(aliases) + '\\\\n');\\n    file.write('tags: ' + JSON.stringify(tags) + '\\\\n');\\n    file.write('---\\\\n\\\\n');\\n    if (image) {\\n      // taken from: https://stackoverflow.com/a/22907134/9055\\n      download(image.uri, path + '/' + image.filename);\\n      file.write(`![${image.filename}](./${image.filename})\\\\n\\\\n`);\\n    }\\n    file.write(row.body_value);\\n    file.end();\\n  });\\n  console.log(date, slug, JSON.stringify(aliases));\\n});\\n\\ndb.close();\\n\")), mdx(\"p\", null, \"This script is now finished and you can execute it in your shell with this command:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"> node src/scripts/import.js mysqlite.db\\n\")), mdx(\"p\", null, \"To have comments on your site you can use a service like \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://disqus.com/\"\n  }), \"Disqus\"), \". Disqus has an import process that uses a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://help.disqus.com/developer/custom-xml-import-format\"\n  }), \"custom XML import format\"), \" based on the WXR (WordPress eXtended RSS) schema. So the process would be the same. Create a script named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/scripts/export_comments.js\"), \" to query the database and, in this case, write a single file containing all the comments of your old site:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const Database = require(\\\"better-sqlite3\\\")\\nconst fs = require(\\\"fs\\\")\\nconst yourSite = \\\"http://username.github.io/yoursite/\\\"\\n\\nif (process.argv.length < 3) {\\n  usage()\\n  process.exit()\\n}\\n\\nconst db = new Database(process.argv[2], { readonly: true })\\n\\nconst rows = db\\n  .prepare(\\n    `SELECT n.nid, n.title, n.created, b.body_value, n.status,\\n  c.cid, c.pid, c.name, c.mail, c.created created_comment, c.homepage, c.hostname, c.subject, cb.comment_body_value\\n  FROM node n\\n  INNER JOIN field_data_body b ON b.entity_id = n.nid\\n  INNER JOIN comment c ON c.nid = n.nid AND c.status = 1\\n  INNER JOIN field_data_comment_body cb ON cb.entity_id = c.cid\\n  ORDER BY n.nid, c.cid`\\n  )\\n  .all()\\n\\nconsole.log(`<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<rss version=\\\"2.0\\\"\\n  xmlns:content=\\\"http://purl.org/rss/1.0/modules/content/\\\"\\n  xmlns:dsq=\\\"http://www.disqus.com/\\\"\\n  xmlns:dc=\\\"http://purl.org/dc/elements/1.1/\\\"\\n  xmlns:wp=\\\"http://wordpress.org/export/1.0/\\\"\\n>\\n  <channel>`)\\nlet previous_slug = \\\"\\\"\\nrows.forEach(row => {\\n  const slug = slugify(row.title)\\n  const date = new Date(row.created * 1000)\\n  const date_comment = new Date(row.created_comment * 1000)\\n  if (slug != previous_slug) {\\n    if (previous_slug != \\\"\\\") {\\n      console.log(`</item>`)\\n    }\\n    console.log(`<item>\\n      <title>${row.title}</title>\\n      <link>${yourSite}${slug}</link>\\n      <content:encoded><![CDATA[${row.body_value}]]></content:encoded>\\n      <dsq:thread_identifier>${row.nid}</dsq:thread_identifier>\\n      <wp:post_date_gmt>${getDisqusDate(date)}</wp:post_date_gmt>\\n      <wp:comment_status>open</wp:comment_status>`)\\n    previous_slug = slug\\n  }\\n\\n  console.log(`\\n    <wp:comment>\\n      <wp:comment_id>${row.cid}</wp:comment_id>\\n      <wp:comment_author>${row.name}</wp:comment_author>\\n      <wp:comment_author_email>${row.mail}</wp:comment_author_email>\\n      <wp:comment_author_url>${row.homepage}</wp:comment_author_url>\\n      <wp:comment_author_IP>${row.hostname}</wp:comment_author_IP>\\n      <wp:comment_date_gmt>${getDisqusDate(date_comment)}</wp:comment_date_gmt>\\n      <wp:comment_content><![CDATA[${\\n        row.comment_body_value\\n      }]]></wp:comment_content>\\n      <wp:comment_approved>1</wp:comment_approved>\\n      <wp:comment_parent>${row.pid}</wp:comment_parent>\\n    </wp:comment>\\n  `)\\n})\\nconsole.log(`</item></channel></rss>`)\\n\\ndb.close()\\n\\nfunction usage() {\\n  const path = require(\\\"path\\\")\\n  const scriptName = path.basename(__filename)\\n  console.log(\\\"node \\\" + scriptName + \\\" <database.sqlite>\\\")\\n}\\n\\nfunction getDisqusDate(date) {\\n  return (\\n    date.toISOString().slice(0, 10) + \\\" \\\" + date.toISOString().slice(11, 19)\\n  )\\n}\\n\\nfunction slugify(string) {\\n  const a = \\\"\\xE0\\xE1\\xE4\\xE2\\xE3\\xE5\\xE8\\xE9\\xEB\\xEA\\xEC\\xED\\xEF\\xEE\\xF2\\xF3\\xF6\\xF4\\xF9\\xFA\\xFC\\xFB\\xF1\\xE7\\xDF\\xFF\\u0153\\xE6\\u0155\\u015B\\u0144\\u1E55\\u1E83\\u01F5\\u01F9\\u1E3F\\u01D8\\u1E8D\\u017A\\u1E27\\xB7/_,:;\\\"\\n  const b = \\\"aaaaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh------\\\"\\n  const p = new RegExp(a.split(\\\"\\\").join(\\\"|\\\"), \\\"g\\\")\\n\\n  return string\\n    .toString()\\n    .toLowerCase()\\n    .replace(/\\\\s+/g, \\\"-\\\") // Replace spaces with\\n    .replace(p, c => b.charAt(a.indexOf(c))) // Replace special characters\\n    .replace(/&/g, \\\"-and-\\\") // Replace & with \\u2018and\\u2019\\n    .replace(/[^\\\\w\\\\-]+/g, \\\"\\\") // Remove all non-word characters\\n    .replace(/\\\\-\\\\-+/g, \\\"-\\\") // Replace multiple \\u2014 with single -\\n    .replace(/^-+/, \\\"\\\") // Trim \\u2014 from start of text .replace(/-+$/, '') // Trim \\u2014 from end of text\\n}\\n\")), mdx(\"p\", null, \"Run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node src/scripts/export_comments.js ../mysqlite.db > comments.xml\"), \" and that\\u2019s it. This will generate a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"comments.xml\"), \" file that you can \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://import.disqus.com/\"\n  }), \"import into disqus\"), \". Just remember to change the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"yourSite\"), \" variable in the script, and it will link each comment to the correct post in your new blog using the slug used in the posts import.\"), mdx(\"p\", null, \"You now have all the posts and all comments ready to be used on your Gatsby blog. You can see a working example here: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/jackbravo/joaquin.axai.mx\"\n  }), \"https://github.com/jackbravo/joaquin.axai.mx\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "excerpt": "This blogpost explains how I learned to reduce the cost of maintaining a simple brochure or blog site. When using Drupal, you need at leastâ¦",
        "timeToRead": 2,
        "fields": {
          "slug": "/blog/2018-10-26-export-a-drupal-site-to-gatsby/",
          "publishedAt": null
        },
        "frontmatter": {
          "title": "How to export a Drupal site to Gatsby",
          "excerpt": null,
          "date": "December 18th 2018",
          "rawDate": "2018-12-18T00:00:00.000Z",
          "canonicalLink": null,
          "tags": [
            "drupal",
            "getting-started"
          ],
          "image": null,
          "imageAuthor": null,
          "imageAuthorLink": null,
          "imageTitle": null,
          "showImageInArticle": null,
          "author": {
            "id": "JoaquÃ­n Bravo Contreras",
            "bio": "Developer based in Guadalajara, Mexico. Fond of Drupal, Python, Elixir and GatsbyJS",
            "twitter": "@jackbravo",
            "avatar": {
              "childImageSharp": {
                "fixed": {
                  "tracedSVG": "data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='32'%20height='32'%3e%3crect%20width='100%25'%20height='100%25'%20fill='%23f6f2f8'/%3e%3cpath%20d='M0%207c0%207%200%208%202%208h4c3%201%203%201%203-3%200-5%202-6%205-3l3%202-2%201-4%202%201%202c2%201%203%202%203%204-1%202-1%202%201%201%202%200%203%200%203%202%201%202%200%202-2%203-3%200-5%202-3%202l1%201-5%201c-7-1-7-1-4-2%202-1%203-4%201-5H5l-2%201-1%203-2%203c0%202%201%202%2016%202%209%200%2016%200%2015-1v-3l1%202%201-14V0H0v7m0%201l1%204V4L0%208m17%209c-1%203-1%203%201%202%202%200%203-4%201-4l-2%202'%20fill='%23e0d6eb'%20fill-rule='evenodd'/%3e%3c/svg%3e",
                  "width": 64,
                  "height": 64,
                  "src": "/static/b1d88a22a01aa529ea8d653ee96bde1b/88ae8/joaquin-bravo.jpg",
                  "srcSet": "/static/b1d88a22a01aa529ea8d653ee96bde1b/88ae8/joaquin-bravo.jpg 1x,\n/static/b1d88a22a01aa529ea8d653ee96bde1b/0740f/joaquin-bravo.jpg 1.5x,\n/static/b1d88a22a01aa529ea8d653ee96bde1b/c9264/joaquin-bravo.jpg 2x"
                }
              }
            },
            "fields": {
              "slug": "/contributors/joaquin-bravo-contreras/"
            }
          }
        }
      }
    },
    "pageContext": {
      "isCreatedByStatefulCreatePages": false,
      "slug": "/blog/2018-10-26-export-a-drupal-site-to-gatsby/",
      "prev": {
        "fields": {
          "slug": "/blog/2018-12-17-ibm-case-study/",
          "package": null,
          "released": true
        },
        "frontmatter": {
          "title": "IBM Uses Gatsby to Manage Enterprise-Level Content",
          "draft": null,
          "canonicalLink": null,
          "publishedAt": null,
          "issue": null,
          "tags": [
            "case-studies"
          ]
        }
      },
      "next": {
        "fields": {
          "slug": "/blog/2018-11-03-building-an-accessible-lightbox/",
          "package": null,
          "released": true
        },
        "frontmatter": {
          "title": "Building a custom, accessible image lightbox",
          "draft": null,
          "canonicalLink": "https://416serg.me/building-a-custom-accessible-image-lightbox-in-gatsbyjs",
          "publishedAt": null,
          "issue": null,
          "tags": [
            "cutting-edge-experiences",
            "gatsby-image",
            "accessibility"
          ]
        }
      }
    }
  },
  "query": "query usersMisiekDevGatsbyWwwSrcTemplatesTemplateBlogPostJs2991924798(\n  $slug: String!\n) {\n  mdx(fields: {slug: {eq: $slug}}) {\n    body\n    excerpt\n    timeToRead\n    fields {\n      slug\n      publishedAt\n    }\n    frontmatter {\n      title\n      excerpt\n      date(formatString: \"MMMM Do YYYY\")\n      rawDate: date\n      canonicalLink\n      tags\n      image {\n        childImageSharp {\n          resize(width: 1500, height: 1500) {\n            src\n          }\n          fluid(maxWidth: 786) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      imageAuthor\n      imageAuthorLink\n      imageTitle\n      showImageInArticle\n      author {\n        id\n        bio\n        twitter\n        avatar {\n          childImageSharp {\n            fixed(width: 64, height: 64, quality: 75, traceSVG: {turdSize: 10, background: \"#f6f2f8\", color: \"#e0d6eb\"}) {\n              ...GatsbyImageSharpFixed_tracedSVG\n            }\n          }\n        }\n        fields {\n          slug\n        }\n      }\n    }\n  }\n}\n\nfragment GatsbyImageSharpFluid on ImageSharpFluid {\n  base64\n  aspectRatio\n  src\n  srcSet\n  sizes\n}\n\nfragment GatsbyImageSharpFixed_tracedSVG on ImageSharpFixed {\n  tracedSVG\n  width\n  height\n  src\n  srcSet\n}\n"
}