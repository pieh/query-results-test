{
  "path": "/docs/sourcing-from-sanity/",
  "result": {
    "data": {
      "mdx": {
        "body": "function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Sourcing from Sanity\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"what-is-sanityio\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#what-is-sanityio\",\n    \"aria-label\": \"what is sanityio permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"What is Sanity.io?\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https:///www.sanity.io\"\n  }), \"Sanity\"), \" is a hosted backend for structured content that comes with an open source editor built in React. It has powerful real-time APIs for both reading and writing data.\"), mdx(\"p\", null, \"You can use Sanity as a headless CMS that lets your authors work in a user friendly environment, or as a pure data backend for your apps. We make it easier for you to reuse content across multiple websites, apps, print, voice assistants, and other channels.\"), mdx(\"h2\", {\n    \"id\": \"getting-started\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#getting-started\",\n    \"aria-label\": \"getting started permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Getting started\"), mdx(\"p\", null, \"Begin with setting up a Gatsby project. If you want to start from scrach, the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/quick-start\"\n  }), \"Quick Start guide\"), \" is a good place to begin. Come back to this guide when you\\u2019re set up.\"), mdx(\"p\", null, \"You can also check out \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/sanity-io/example-company-website-gatsby-sanity-combo\"\n  }), \"the company website example\"), \" we have set up. It contains both a configured Sanity Studio and a Gatsby frontend, which you can get up and running within minutes. It can be an useful reference for how to build a website using structured content. Follow the instructions in its README.md to get up and running.\"), mdx(\"p\", null, \"This guide will cover how configure and use the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/gatsby-source-sanity\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"gatsby-source-sanity\")), \" plugin.\"), mdx(\"h2\", {\n    \"id\": \"basic-usage\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#basic-usage\",\n    \"aria-label\": \"basic usage permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Basic usage\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"npm install --save gatsby-source-sanity\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js:title=gatsby-config.js\"\n  }), \"module.exports = {\\n  plugins: [\\n    {\\n      resolve: \\\"gatsby-source-sanity\\\",\\n      options: {\\n        projectId: \\\"abc123\\\",\\n        dataset: \\\"blog\\\",\\n      },\\n    },\\n  ],\\n}\\n\")), mdx(\"p\", null, \"At this point you can choose to (and probably should) \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.sanity.io/help/graphql-beta\"\n  }), \"set up a GraphQL API\"), \" for your Sanity dataset, if you have not done so already. This will help the plugin in knowing which types and fields exists, so you can query for them even without them being present in any current documents.\"), mdx(\"p\", null, \"Go through \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:8000/___graphql\"), \" after running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby develop\"), \" to understand the created data. Create a new query and check available collections and fields by using the autocomplete (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CTRL + SPACE\"), \").\"), mdx(\"h2\", {\n    \"id\": \"options\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#options\",\n    \"aria-label\": \"options permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Options\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Options\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Default\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"projectId\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"string\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"[required]\"), \" Your Sanity project\\u2019s ID\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"dataset\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"string\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"[required]\"), \" The dataset to fetch from\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"token\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"string\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Authentication token for fetching data from private datasets, or when using \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"overlayDrafts\"), \" \", mdx(\"a\", _extends({\n    parentName: \"td\"\n  }, {\n    \"href\": \"https://www.sanity.io/docs/http-auth\"\n  }), \"Learn more\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"overlayDrafts\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"boolean\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \" in order for drafts to replace their published version. By default, drafts will be skipped.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"watchMode\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"boolean\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \" to keep a listener open and update with the latest changes in realtime.\")))), mdx(\"h2\", {\n    \"id\": \"missing-fields\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#missing-fields\",\n    \"aria-label\": \"missing fields permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Missing fields\"), mdx(\"p\", null, \"Getting errors such as these?\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Cannot query field \\u201CallSanityBlogPost\\u201D\\nUnknown field \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"preamble\"), \" on type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BlogPost\"))), mdx(\"p\", null, \"By \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.sanity.io/help/graphql-beta\"\n  }), \"deploying a GraphQL API\"), \" for your dataset, we are able to introspect and figure out which schema types and fields are available and make them available to prevent this problem. Once the API is deployed it will be transparently be applied. If you have deployed your API and are still seeing similar issues, remember that you have to redeploy the API if your schema changes.\"), mdx(\"p\", null, \"Some background for this problem:\"), mdx(\"p\", null, \"Gatsby cannot know about the types and fields without having documents of the given types that contain the fields you want to query. This is a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/gatsbyjs/gatsby/issues/3344\"\n  }), \"known problem\"), \" with Gatsby - luckily there is ongoing work to solve this issue, which will lead to much clearer schemas and less boilerplate.\"), mdx(\"h2\", {\n    \"id\": \"using-images\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#using-images\",\n    \"aria-label\": \"using images permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Using images\"), mdx(\"p\", null, \"Image fields will have the image URL available under the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"field.asset.url\"), \" key, but you can also use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-image\"\n  }), \"gatsby-image\"), \" for a smooth experience. It\\u2019s a React component that enables responsive images and advanced image loading techniques. It works great with this source plugin, without requiring any additional build steps.\"), mdx(\"p\", null, \"There are two types of responsive images supported; \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fixed\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fluid\"), \". To decide between the two, ask yourself: \\u201Cdo I know the exact size this image will be?\\u201D If yes, you\\u2019ll want to use \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fixed\"), \". If no and its width and/or height need to vary depending on the size of the screen, then you\\u2019ll want to use \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fluid\"), \".\"), mdx(\"h3\", {\n    \"id\": \"fluid\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#fluid\",\n    \"aria-label\": \"fluid permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Fluid\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React from \\\"react\\\"\\nimport Img from \\\"gatsby-image\\\"\\n\\nconst Person = ({ data }) => (\\n  <article>\\n    <h2>{data.sanityPerson.name}</h2>\\n    <Img fluid={data.sanityPerson.profileImage.asset.fluid} />\\n  </article>\\n)\\n\\nexport default Person\\n\\nexport const query = graphql`\\n  query PersonQuery {\\n    sanityPerson {\\n      name\\n      profileImage {\\n        asset {\\n          fluid(maxWidth: 700) {\\n            ...GatsbySanityImageFluid\\n          }\\n        }\\n      }\\n    }\\n  }\\n`\\n\")), mdx(\"h3\", {\n    \"id\": \"fixed\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#fixed\",\n    \"aria-label\": \"fixed permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Fixed\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React from \\\"react\\\"\\nimport Img from \\\"gatsby-image\\\"\\n\\nconst Person = ({ data }) => (\\n  <article>\\n    <h2>{data.sanityPerson.name}</h2>\\n    <Img fixed={data.sanityPerson.profileImage.asset.fixed} />\\n  </article>\\n)\\n\\nexport default Person\\n\\nexport const query = graphql`\\n  query PersonQuery {\\n    sanityPerson {\\n      name\\n      profileImage {\\n        asset {\\n          fixed(width: 400) {\\n            ...GatsbySanityImageFixed\\n          }\\n        }\\n      }\\n    }\\n  }\\n`\\n\")), mdx(\"h3\", {\n    \"id\": \"available-fragments\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#available-fragments\",\n    \"aria-label\": \"available fragments permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Available fragments\"), mdx(\"p\", null, \"These are the fragments available on image assets, which allows easy lookup of the fields required by gatsby-image in various modes:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"GatsbySanityImageFixed\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"GatsbySanityImageFixed_noBase64\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"GatsbySanityImageFixed_withWebp\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"GatsbySanityImageFixed_withWebp_noBase64\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"GatsbySanityImageFluid\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"GatsbySanityImageFluid_noBase64\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"GatsbySanityImageFluid_withWebp\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"GatsbySanityImageFluid_withWebp_noBase64\"))), mdx(\"h2\", {\n    \"id\": \"overlaying-drafts\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#overlaying-drafts\",\n    \"aria-label\": \"overlaying drafts permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Overlaying drafts\"), mdx(\"p\", null, \"Sometimes you might be working on some new content that is not yet published, which you want to make sure looks alright within your Gatsby site. By setting the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"overlayDrafts\"), \" setting to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \", the draft versions will as the option says \\u201Coverlay\\u201D the regular document. In terms of Gatsby nodes, it will \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"replace\"), \" the published document with the draft.\"), mdx(\"p\", null, \"Keep in mind that drafts do not have to conform to any validation rules, so your frontend will usually want to double-check all nested properties before attempting to use them.\"), mdx(\"h2\", {\n    \"id\": \"watch-mode\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#watch-mode\",\n    \"aria-label\": \"watch mode permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Watch mode\"), mdx(\"p\", null, \"While developing, it can often be beneficial to get updates without having to manually restart the build process. By setting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"watchMode\"), \" to true, this plugin will set up a listener which watches for changes. When it detects a change, the document in question is updated in real-time and will be reflected immediately.\"), mdx(\"p\", null, \"If you add an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#using-env-variables\"\n  }), \"environment token\"), \" and set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"overlayDrafts\"), \" to true, each small change to the draft will immediately be applied.\"), mdx(\"h2\", {\n    \"id\": \"generating-pages\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#generating-pages\",\n    \"aria-label\": \"generating pages permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Generating pages\"), mdx(\"p\", null, \"Sanity does not have any concept of a \\u201Cpage\\u201D, since it\\u2019s built to be totally agnostic to how you want to present your content and in which medium, but since you\\u2019re using Gatsby, you\\u2019ll probably want some pages!\"), mdx(\"p\", null, \"As with any Gatsby site, you\\u2019ll want to create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-node.js\"), \" in the root of your Gatsby site repository (if it doesn\\u2019t already exist), and declare a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createPages\"), \" function. Within it, you\\u2019ll use GraphQL to query for the data you need to build the pages.\"), mdx(\"p\", null, \"For instance, if you have a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"project\"), \" document type in Sanity that you want to generate pages for, you could do something along the lines of this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js:title=gatsby-node.js\"\n  }), \"exports.createPages = async ({ graphql, actions }) => {\\n  const { createPage } = actions\\n\\n  const result = await graphql(`\\n    {\\n      allSanityProject(filter: { slug: { current: { ne: null } } }) {\\n        edges {\\n          node {\\n            title\\n            description\\n            tags\\n            launchDate(format: \\\"DD.MM.YYYY\\\")\\n            slug {\\n              current\\n            }\\n            image {\\n              asset {\\n                url\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  `)\\n\\n  if (result.errors) {\\n    throw result.errors\\n  }\\n\\n  const projects = result.data.allSanityProject.edges || []\\n  projects.forEach((edge, index) => {\\n    const path = `/project/${edge.node.slug.current}`\\n\\n    createPage({\\n      path,\\n      component: require.resolve(\\\"./src/templates/project.js\\\"),\\n      context: { slug: edge.node.slug.current },\\n    })\\n  })\\n}\\n\")), mdx(\"p\", null, \"The above query will fetch all projects that have a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"slug.current\"), \" field set, and generate pages for them, available as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/project/<project-slug>\"), \". It will use the template defined in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/templates/project.js\"), \" as the basis for these pages.\"), mdx(\"p\", null, \"Most \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/starters/?v=2\"\n  }), \"Gatsby starters\"), \" have some example of building pages, which you should be able to modify to your needs.\"), mdx(\"p\", null, \"Remember to use the GraphiQL interface to help write the queries you need - it\\u2019s usually running at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:8000/___graphql\"), \" while running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby develop\"), \".\"), mdx(\"h2\", {\n    \"id\": \"raw-fields\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#raw-fields\",\n    \"aria-label\": \"raw fields permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"\\u201CRaw\\u201D fields\"), mdx(\"p\", null, \"Arrays and object types at the root of documents will get an additional \\u201Craw JSON\\u201D representation in a field called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_raw<FieldName>\"), \". For instance, a field named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"body\"), \" will be mapped to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_rawBody\"), \". It\\u2019s important to note that this is only done for top-level nodes (documents).\"), mdx(\"h2\", {\n    \"id\": \"portable-text--block-content\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#portable-text--block-content\",\n    \"aria-label\": \"portable text  block content permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Portable Text / Block Content\"), mdx(\"p\", null, \"Rich text in Sanity is usually represented as \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.portabletext.org/\"\n  }), \"Portable Text\"), \" (previously known as \\u201CBlock Content\\u201D).\"), mdx(\"p\", null, \"These data structures can be deep and a chore to query (specifying all the possible fields). As \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#raw-fields\"\n  }), \"noted above\"), \", there is a \\u201Craw\\u201D alternative available for these fields which is usually what you\\u2019ll want to use.\"), mdx(\"p\", null, \"You can install \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/@sanity/block-content-to-react\"\n  }), \"block-content-to-react\"), \" from npm and use it in your Gatsby project to serialize Portable Text. It lets you use your own React components to override defaults and render custom content types. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.sanity.io/docs/content-studio/what-you-need-to-know-about-block-text\"\n  }), \"Learn more about Portable Text in our documentation\"), \".\"), mdx(\"h2\", {\n    \"id\": \"using-env-variables\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#using-env-variables\",\n    \"aria-label\": \"using env variables permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Using .env variables\"), mdx(\"p\", null, \"If you don\\u2019t want to attach your Sanity project\\u2019s ID to the repo, you can easily store it in .env files by doing the following:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// In your .env file\\nSANITY_PROJECT_ID = abc123\\nSANITY_DATASET = production\\nSANITY_TOKEN = my-super-secret-token\\n\\n// In your gatsby-config.js file\\nrequire('dotenv').config({\\n  path: `.env.${process.env.NODE_ENV}`\\n})\\n\\nmodule.exports = {\\n  plugins: [\\n    {\\n      resolve: 'gatsby-source-sanity',\\n      options: {\\n        projectId: process.env.SANITY_PROJECT_ID,\\n        dataset: process.env.SANITY_DATASET\\n        token: process.env.SANITY_TOKEN\\n      }\\n    }\\n  ]\\n}\\n\")), mdx(\"p\", null, \"This example is based off \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/environment-variables/\"\n  }), \"Gatsby Docs\\u2019 implementation\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "excerpt": "What is Sanity.io? Sanity  is a hosted backend for structured content that comes with an open source editor built in React. It has powerful…",
        "timeToRead": 4,
        "tableOfContents": {
          "items": [
            {
              "url": "#what-is-sanityio",
              "title": "What is Sanity.io?"
            },
            {
              "url": "#getting-started",
              "title": "Getting started"
            },
            {
              "url": "#basic-usage",
              "title": "Basic usage"
            },
            {
              "url": "#options",
              "title": "Options"
            },
            {
              "url": "#missing-fields",
              "title": "Missing fields"
            },
            {
              "url": "#using-images",
              "title": "Using images",
              "items": [
                {
                  "url": "#fluid",
                  "title": "Fluid"
                },
                {
                  "url": "#fixed",
                  "title": "Fixed"
                },
                {
                  "url": "#available-fragments",
                  "title": "Available fragments"
                }
              ]
            },
            {
              "url": "#overlaying-drafts",
              "title": "Overlaying drafts"
            },
            {
              "url": "#watch-mode",
              "title": "Watch mode"
            },
            {
              "url": "#generating-pages",
              "title": "Generating pages"
            },
            {
              "url": "#raw-fields",
              "title": "\"Raw\" fields"
            },
            {
              "url": "#portable-text--block-content",
              "title": "Portable Text / Block Content"
            },
            {
              "url": "#using-env-variables",
              "title": "Using .env variables"
            }
          ]
        },
        "fields": {
          "slug": "/docs/sourcing-from-sanity/",
          "anchor": "sourcing-from-sanity"
        },
        "frontmatter": {
          "title": "Sourcing from Sanity",
          "overview": null,
          "issue": null,
          "disableTableOfContents": null,
          "tableOfContentsDepth": null
        },
        "parent": {
          "__typename": "File",
          "relativePath": "docs/sourcing-from-sanity.md"
        }
      }
    },
    "pageContext": {
      "isCreatedByStatefulCreatePages": false,
      "slug": "/docs/sourcing-from-sanity/"
    }
  },
  "query": "query usersMisiekDevGatsbyWwwSrcTemplatesTemplateDocsMarkdownJs2546709735(\n  $path: String!\n) {\n  mdx(fields: {slug: {eq: $path}}) {\n    body\n    excerpt\n    timeToRead\n    tableOfContents\n    fields {\n      slug\n      anchor\n    }\n    frontmatter {\n      title\n      overview\n      issue\n      disableTableOfContents\n      tableOfContentsDepth\n    }\n    ...MarkdownPageFooterMdx\n  }\n}\n\nfragment MarkdownPageFooterMdx on Mdx {\n  parent {\n    __typename\n    ... on File {\n      relativePath\n    }\n  }\n}\n"
}