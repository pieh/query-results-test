{
  "path": "/docs/unit-testing/",
  "result": {
    "data": {
      "mdx": {
        "body": "function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Unit testing\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Unit testing is a great way to protect against errors in your code before you\\ndeploy it. While Gatsby does not include support for unit testing out of the\\nbox, it only takes a few steps to get up and running. However there are a few\\nfeatures of the Gatsby build process that mean the standard Jest setup doesn\\u2019t\\nquite work. This guide shows you how to set it up.\"), mdx(\"h2\", {\n    \"id\": \"setting-up-your-environment\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#setting-up-your-environment\",\n    \"aria-label\": \"setting up your environment permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Setting up your environment\"), mdx(\"p\", null, \"The most popular testing framework for React is \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://jestjs.io/\"\n  }), \"Jest\"), \",\\nwhich was created by Facebook. While Jest is a general purpose JavaScript unit\\ntesting framework, it has lots of features that make it work particularly well\\nwith React.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: For this guide, you will be starting with \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"gatsby-starter-default\"), \", but the\\nconcepts should be the same or very similar for your site.\")), mdx(\"h3\", {\n    \"id\": \"1-installing-dependencies\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#1-installing-dependencies\",\n    \"aria-label\": \"1 installing dependencies permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"1. Installing dependencies\"), mdx(\"p\", null, \"First you need to install Jest and some more required packages. We install babel-jest and babel-preset-gatsby to ensure that the babel preset(s) that are used match what are used internally for your Gatsby site.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"npm install --save-dev jest babel-jest react-test-renderer babel-preset-gatsby identity-obj-proxy\\n\")), mdx(\"h3\", {\n    \"id\": \"2-creating-a-configuration-file-for-jest\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#2-creating-a-configuration-file-for-jest\",\n    \"aria-label\": \"2 creating a configuration file for jest permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"2. Creating a configuration file for Jest\"), mdx(\"p\", null, \"Because Gatsby handles its own Babel configuration, you will need to manually\\ntell Jest to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"babel-jest\"), \". The easiest way to do this is to add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest.config.js\"), \". You can set up some useful defaults at the same time:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js:title=jest.config.js\"\n  }), \"module.exports = {\\n  transform: {\\n    \\\"^.+\\\\\\\\.jsx?$\\\": `<rootDir>/jest-preprocess.js`,\\n  },\\n  moduleNameMapper: {\\n    \\\".+\\\\\\\\.(css|styl|less|sass|scss)$\\\": `identity-obj-proxy`,\\n    \\\".+\\\\\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$\\\": `<rootDir>/__mocks__/file-mock.js`,\\n  },\\n  testPathIgnorePatterns: [`node_modules`, `.cache`, `public`],\\n  transformIgnorePatterns: [`node_modules/(?!(gatsby)/)`],\\n  globals: {\\n    __PATH_PREFIX__: ``,\\n  },\\n  testURL: `http://localhost`,\\n  setupFiles: [`<rootDir>/loadershim.js`],\\n}\\n\")), mdx(\"p\", null, \"Let\\u2019s go over the content of this configuration file:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"transform\"), \" section tells Jest that all \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"js\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jsx\"), \" files need to be\\ntransformed using a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jest-preprocess.js\"), \" file in the project root. Go ahead and\\ncreate this file now. This is where you set up your Babel config. You can start\\nwith the following minimal config:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js:title=jest-preprocess.js\"\n  }), \"const babelOptions = {\\n  presets: [\\\"babel-preset-gatsby\\\"],\\n}\\n\\nmodule.exports = require(\\\"babel-jest\\\").createTransformer(babelOptions)\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The next option is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"moduleNameMapper\"), \". This\\nsection works a bit like webpack rules, and tells Jest how to handle imports.\\nYou are mainly concerned here with mocking static file imports, which Jest can\\u2019t\\nhandle. A mock is a dummy module that is used instead of the real module inside\\ntests. It is good when you have something that you can\\u2019t or don\\u2019t want to test.\\nYou can mock anything, and here you are mocking assets rather than code. For\\nstylesheets you need to use the package \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"identity-obj-proxy\"), \". For all other assets\\nyou need to use a manual mock called \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"file-mock.js\"), \". You need to create this yourself.\\nThe convention is to create a directory called \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"__mocks__\"), \" in the root directory\\nfor this. Note the pair of double underscores in the name.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js:title=__mocks__/file-mock.js\"\n  }), \"module.exports = \\\"test-file-stub\\\"\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The next config setting is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"testPathIgnorePatterns\"), \". You are telling Jest to ignore\\nany tests in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node_modules\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".cache\"), \" directories.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The next option is very important, and is different from what you\\u2019ll find in other\\nJest guides. The reason that you need \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transformIgnorePatterns\"), \" is because Gatsby\\nincludes un-transpiled ES6 code. By default Jest doesn\\u2019t try to transform code\\ninside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node_modules\"), \", so you will get an error like this:\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"/my-app/node_modules/gatsby/cache-dir/gatsby-browser-entry.js:1\\n({\\\"Object.<anonymous>\\\":function(module,exports,require,__dirname,__filename,global,jest){import React from \\\"react\\\"\\n                                                                                            ^^^^^^\\nSyntaxError: Unexpected token import\\n\")), mdx(\"p\", null, \"This is because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-browser-entry.js\"), \" isn\\u2019t being transpiled before running\\nin Jest. You can fix this by changing the default \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transformIgnorePatterns\"), \" to\\nexclude the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby\"), \" module.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"globals\"), \" section sets \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__PATH_PREFIX__\"), \", which is usually set by Gatsby,\\nand which some components need.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"You need to set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"testURL\"), \" to a valid URL, because some DOM APIs such as\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localStorage\"), \" are unhappy with the default (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"about:blank\"), \").\"))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note: if you\\u2019re using Jest 23.5.0 or later, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"testURL\"), \" will default to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost\"), \" so you can skip this setting.\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There\\u2019s one more global that you need to set, but as it\\u2019s a function you can\\u2019t\\nset it here in the JSON. The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setupFiles\"), \" array lets you list files that will be\\nincluded before all tests are run, so it\\u2019s perfect for this.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js:title=loadershim.js\"\n  }), \"global.___loader = {\\n  enqueue: jest.fn(),\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"3-useful-mocks-to-complete-your-testing-environment\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#3-useful-mocks-to-complete-your-testing-environment\",\n    \"aria-label\": \"3 useful mocks to complete your testing environment permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"3. Useful mocks to complete your testing environment\"), mdx(\"h4\", {\n    \"id\": \"mocking-gatsby\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#mocking-gatsby\",\n    \"aria-label\": \"mocking gatsby permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Mocking \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"gatsby\")), mdx(\"p\", null, \"Finally it\\u2019s a good idea to mock the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby\"), \" module itself. This may not be\\nneeded at first, but will make things a lot easier if you want to test\\ncomponents that use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Link\"), \" or GraphQL.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js:title=__mocks__/gatsby.js\"\n  }), \"const React = require(\\\"react\\\")\\nconst gatsby = jest.requireActual(\\\"gatsby\\\")\\n\\nmodule.exports = {\\n  ...gatsby,\\n  graphql: jest.fn(),\\n  Link: jest.fn().mockImplementation(\\n    // these props are invalid for an `a` tag\\n    ({\\n      activeClassName,\\n      activeStyle,\\n      getProps,\\n      innerRef,\\n      partiallyActive,\\n      ref,\\n      replace,\\n      to,\\n      ...rest\\n    }) =>\\n      React.createElement(\\\"a\\\", {\\n        ...rest,\\n        href: to,\\n      })\\n  ),\\n  StaticQuery: jest.fn(),\\n  useStaticQuery: jest.fn(),\\n}\\n\")), mdx(\"p\", null, \"This mocks the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"graphql()\"), \" function, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Link\"), \" component, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StaticQuery\"), \" component.\"), mdx(\"h2\", {\n    \"id\": \"writing-tests\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#writing-tests\",\n    \"aria-label\": \"writing tests permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Writing tests\"), mdx(\"p\", null, \"A full guide to unit testing is beyond the scope of this guide, but you can\\nstart with a simple snapshot test to check that everything is working.\"), mdx(\"p\", null, \"First, create the test file. You can either put these in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__tests__\"), \"\\ndirectory, or put them elsewhere (usually next to the component itself), with\\nthe extension \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".spec.js\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".test.js\"), \". The decision comes down to your own\\npreference. In this guide, we will use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__tests__\"), \" folder convention. Let\\u2019s create a test for our header component, so create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"header.js\"), \" file in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/components/__tests__/\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js:title=src/components/__tests__/header.js\"\n  }), \"import React from \\\"react\\\"\\nimport renderer from \\\"react-test-renderer\\\"\\n\\nimport Header from \\\"../header\\\"\\n\\ndescribe(\\\"Header\\\", () => {\\n  it(\\\"renders correctly\\\", () => {\\n    const tree = renderer\\n      .create(<Header siteTitle=\\\"Default Starter\\\" />)\\n      .toJSON()\\n    expect(tree).toMatchSnapshot()\\n  })\\n})\\n\")), mdx(\"p\", null, \"This is a very simple snapshot test, which uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-test-renderer\"), \" to render\\nthe component, and then generates a snapshot of it on first run. It then\\ncompares future snapshots against this, which means you can quickly check for\\nregressions. Visit \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://jestjs.io/docs/en/getting-started\"\n  }), \"the Jest docs\"), \" to\\nlearn more about other tests that you can write.\"), mdx(\"h2\", {\n    \"id\": \"running-tests\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#running-tests\",\n    \"aria-label\": \"running tests permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Running tests\"), mdx(\"p\", null, \"If you look inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" you will probably find that there is already a\\nscript for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"test\"), \", which just outputs an error message. Change this to use the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest\"), \" executable that we now have available, like so:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json:title=package.json\"\n  }), \"  \\\"scripts\\\": {\\n    \\\"test\\\": \\\"jest\\\"\\n  }\\n\")), mdx(\"p\", null, \"This means you can now run tests by typing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm test\"), \". If you want you could\\nalso run with a flag that triggers watch mode to watch files and run tests when they are changed: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm test -- --watch\"), \".\"), mdx(\"p\", null, \"Run the tests again now and it should all work! You may get a message about\\nthe snapshot being written. This is created in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__snapshots__\"), \" directory next\\nto your tests. If you take a look at it, you will see that it is a JSON\\nrepresentation of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Header />\"), \" component. You should check your snapshot files\\ninto a source control system (for example, a GitHub repo) so that any changes are tracked in history.\\nThis is particularly important to remember if you are using a continuous\\nintegration system such as Travis or CircleCI to run tests, as these will fail if the snapshot is not checked into source control.\"), mdx(\"p\", null, \"If you make changes that mean you need to update the snapshot, you can do this\\nby running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm test -- -u\"), \".\"), mdx(\"h2\", {\n    \"id\": \"using-typescript\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#using-typescript\",\n    \"aria-label\": \"using typescript permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Using TypeScript\"), mdx(\"p\", null, \"If you are using TypeScript, you need to make a couple of small changes to your\\nconfig. First install \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ts-jest\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"npm install --save-dev ts-jest\\n\")), mdx(\"p\", null, \"Then update the configuration in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest.config.js\"), \", like so:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js:title=jest.config.js\"\n  }), \"module.exports = {\\n  transform: {\\n    \\\"^.+\\\\\\\\.tsx?$\\\": \\\"ts-jest\\\",\\n    \\\"^.+\\\\\\\\.jsx?$\\\": \\\"<rootDir>/jest-preprocess.js\\\",\\n  },\\n  testRegex: \\\"(/__tests__/.*|(\\\\\\\\.|/)(test|spec))\\\\\\\\.([tj]sx?)$\\\",\\n  moduleNameMapper: {\\n    \\\".+\\\\\\\\.(css|styl|less|sass|scss)$\\\": \\\"identity-obj-proxy\\\",\\n    \\\".+\\\\\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$\\\":\\n      \\\"<rootDir>/__mocks__/file-mock.js\\\",\\n  },\\n  moduleFileExtensions: [\\\"ts\\\", \\\"tsx\\\", \\\"js\\\", \\\"jsx\\\", \\\"json\\\", \\\"node\\\"],\\n  testPathIgnorePatterns: [\\\"node_modules\\\", \\\".cache\\\", \\\"public\\\"],\\n  transformIgnorePatterns: [\\\"node_modules/(?!(gatsby)/)\\\"],\\n  globals: {\\n    __PATH_PREFIX__: \\\"\\\",\\n  },\\n  testURL: \\\"http://localhost\\\",\\n  setupFiles: [\\\"<rootDir>/loadershim.js\\\"],\\n}\\n\")), mdx(\"p\", null, \"You may notice that two other options, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"testRegex\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"moduleFileExtensions\"), \",\\nhave been added. Option \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"testRegex\"), \" is the pattern telling Jest which files\\ncontain tests. The pattern above matches any \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".js\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".jsx\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".ts\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".tsx\"), \"\\nfile inside a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__tests__\"), \" directory, or any file elsewhere with the extension\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".test.js\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".test.jsx\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".test.ts\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".test.tsx\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".spec.js\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".spec.jsx\"), \",\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".spec.ts\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".spec.tsx\"), \".\"), mdx(\"p\", null, \"Option \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"moduleFileExtensions\"), \" is needed when working with TypeScript.\\nThe only thing it is doing is telling Jest which file extensions you can\\nimport in your files without making precise the file extension. By default,\\nit works with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"js\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"json\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jsx\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node\"), \" file extensions so we just need\\nto add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ts\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tsx\"), \". You can read more about it in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://jestjs.io/docs/en/configuration.html#modulefileextensions-array-string\"\n  }), \"Jest\\u2019s documentation\"), \".\"), mdx(\"h2\", {\n    \"id\": \"other-resources\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#other-resources\",\n    \"aria-label\": \"other resources permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Other resources\"), mdx(\"p\", null, \"If you need to make changes to your Babel config, you can edit the config in\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest-preprocess.js\"), \". You may need to enable some of the plugins used by Gatsby,\\nthough remember you may need to install the Babel 7 versions. See\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/babel\"\n  }), \"the Gatsby Babel config guide\"), \" for some examples.\"), mdx(\"p\", null, \"For more information on Jest testing, visit\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://jestjs.io/docs/en/getting-started\"\n  }), \"the Jest site\"), \".\"), mdx(\"p\", null, \"For an example encapsulating all of these techniques\\u2014and a full unit test suite with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/testing-library/react-testing-library\"\n  }), \"@testing-library/react\"), \", check out the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/gatsbyjs/gatsby/tree/master/examples/using-jest\"\n  }), \"using-jest\"), \" example.\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "excerpt": "Unit testing is a great way to protect against errors in your code before you\ndeploy it. While Gatsby does not include support for unit…",
        "timeToRead": 4,
        "tableOfContents": {
          "items": [
            {
              "url": "#setting-up-your-environment",
              "title": "Setting up your environment",
              "items": [
                {
                  "url": "#1-installing-dependencies",
                  "title": "1. Installing dependencies"
                },
                {
                  "url": "#2-creating-a-configuration-file-for-jest",
                  "title": "2. Creating a configuration file for Jest"
                },
                {
                  "url": "#3-useful-mocks-to-complete-your-testing-environment",
                  "title": "3. Useful mocks to complete your testing environment",
                  "items": [
                    {
                      "url": "#mocking-gatsby",
                      "title": "Mocking gatsby"
                    }
                  ]
                }
              ]
            },
            {
              "url": "#writing-tests",
              "title": "Writing tests"
            },
            {
              "url": "#running-tests",
              "title": "Running tests"
            },
            {
              "url": "#using-typescript",
              "title": "Using TypeScript"
            },
            {
              "url": "#other-resources",
              "title": "Other resources"
            }
          ]
        },
        "fields": {
          "slug": "/docs/unit-testing/",
          "anchor": "unit-testing"
        },
        "frontmatter": {
          "title": "Unit testing",
          "overview": null,
          "issue": null,
          "disableTableOfContents": null,
          "tableOfContentsDepth": null
        },
        "parent": {
          "__typename": "File",
          "relativePath": "docs/unit-testing.md"
        }
      }
    },
    "pageContext": {
      "isCreatedByStatefulCreatePages": false,
      "slug": "/docs/unit-testing/",
      "prev": {
        "title": "Adding Testing",
        "link": "/docs/testing/"
      },
      "next": {
        "title": "Testing Components with GraphQL",
        "link": "/docs/testing-components-with-graphql/"
      }
    }
  },
  "query": "query usersMisiekDevGatsbyWwwSrcTemplatesTemplateDocsMarkdownJs2546709735(\n  $path: String!\n) {\n  mdx(fields: {slug: {eq: $path}}) {\n    body\n    excerpt\n    timeToRead\n    tableOfContents\n    fields {\n      slug\n      anchor\n    }\n    frontmatter {\n      title\n      overview\n      issue\n      disableTableOfContents\n      tableOfContentsDepth\n    }\n    ...MarkdownPageFooterMdx\n  }\n}\n\nfragment MarkdownPageFooterMdx on Mdx {\n  parent {\n    __typename\n    ... on File {\n      relativePath\n    }\n  }\n}\n"
}