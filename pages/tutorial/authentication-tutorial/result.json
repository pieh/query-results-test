{
  "path": "/tutorial/authentication-tutorial/",
  "result": {
    "data": {
      "mdx": {
        "body": "function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Making a site with user authentication\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Sometimes, you need to create a site with gated content, available only to authenticated users. Using Gatsby, you may achieve this using the concept of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/building-apps-with-gatsby/#client-only-routes\"\n  }), \"client-only routes\"), \", to define which pages a user can view only after logging in.\"), mdx(\"h2\", {\n    \"id\": \"prerequisites\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#prerequisites\",\n    \"aria-label\": \"prerequisites permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Prerequisites\"), mdx(\"p\", null, \"You should have already configured your environment to be able to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-cli\"), \". A good starting point is the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/tutorial\"\n  }), \"main tutorial\"), \".\"), mdx(\"h2\", {\n    \"id\": \"security-notice\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#security-notice\",\n    \"aria-label\": \"security notice permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Security notice\"), mdx(\"p\", null, \"In production, you should use a tested and robust solution to handle the authentication. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.auth0.com\"\n  }), \"Auth0\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://firebase.google.com\"\n  }), \"Firebase\"), \", and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://passportjs.org\"\n  }), \"Passport.js\"), \" are good examples. This tutorial will only cover the authentication workflow, but you should take the security of your app as seriously as possible.\"), mdx(\"h2\", {\n    \"id\": \"building-your-gatsby-app\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#building-your-gatsby-app\",\n    \"aria-label\": \"building your gatsby app permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Building your Gatsby app\"), mdx(\"p\", null, \"Start by creating a new Gatsby project using the barebones \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hello-world\"), \" starter:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"gatsby new gatsby-auth gatsbyjs/gatsby-starter-hello-world\\ncd gatsby-auth\\n\")), mdx(\"p\", null, \"Create a new component to hold the links. For now, it will act as a placeholder:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/components/nav-bar.js\"\n  }), \"import React from \\\"react\\\"\\nimport { Link } from \\\"gatsby\\\"\\n\\nexport default () => (\\n  <div\\n    style={{\\n      display: \\\"flex\\\",\\n      flex: \\\"1\\\",\\n      justifyContent: \\\"space-between\\\",\\n      borderBottom: \\\"1px solid #d1c1e0\\\",\\n    }}\\n  >\\n    <span>You are not logged in</span>\\n\\n    <nav>\\n      <Link to=\\\"/\\\">Home</Link>\\n      {` `}\\n      <Link to=\\\"/\\\">Profile</Link>\\n      {` `}\\n      <Link to=\\\"/\\\">Logout</Link>\\n    </nav>\\n  </div>\\n)\\n\")), mdx(\"p\", null, \"And create the layout component that will wrap all pages and display navigation bar:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/components/layout.js\"\n  }), \"import React from \\\"react\\\"\\n\\nimport NavBar from \\\"./nav-bar\\\"\\n\\nconst Layout = ({ children }) => (\\n  <>\\n    <NavBar />\\n    {children}\\n  </>\\n)\\n\\nexport default Layout\\n\")), mdx(\"p\", null, \"Lastly, change the index page to use layout component:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/pages/index.js\"\n  }), \"import React from \\\"react\\\"\\n\\nimport Layout from \\\"../components/layout\\\" // highlight-line\\n\\n// highlight-start\\nexport default () => (\\n  <Layout>\\n    <h1>Hello world!</h1>\\n  </Layout>\\n)\\n// highlight-end\\n\")), mdx(\"h2\", {\n    \"id\": \"authentication-service\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#authentication-service\",\n    \"aria-label\": \"authentication service permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Authentication service\"), mdx(\"p\", null, \"For this tutorial you will use a hardcoded user/password. Create the folder \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/services\"), \" and add the following content to the file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"auth.js\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript:title=src/services/auth.js\"\n  }), \"export const isBrowser = () => typeof window !== \\\"undefined\\\"\\n\\nexport const getUser = () =>\\n  isBrowser() && window.localStorage.getItem(\\\"gatsbyUser\\\")\\n    ? JSON.parse(window.localStorage.getItem(\\\"gatsbyUser\\\"))\\n    : {}\\n\\nconst setUser = user =>\\n  window.localStorage.setItem(\\\"gatsbyUser\\\", JSON.stringify(user))\\n\\nexport const handleLogin = ({ username, password }) => {\\n  if (username === `john` && password === `pass`) {\\n    return setUser({\\n      username: `john`,\\n      name: `Johnny`,\\n      email: `johnny@example.org`,\\n    })\\n  }\\n\\n  return false\\n}\\n\\nexport const isLoggedIn = () => {\\n  const user = getUser()\\n\\n  return !!user.username\\n}\\n\\nexport const logout = callback => {\\n  setUser({})\\n  callback()\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"creating-client-only-routes\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#creating-client-only-routes\",\n    \"aria-label\": \"creating client only routes permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Creating client-only routes\"), mdx(\"p\", null, \"At the beginning of this tutorial, you created a \\u201Chello world\\u201D Gatsby site, which includes the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@reach/router\"), \" library. Now, using the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reach.tech/router/\"\n  }), \"@reach/router\"), \" library, you can create routes available only to logged-in users. This library is used by Gatsby under the hood, so you don\\u2019t even have to install it.\"), mdx(\"p\", null, \"First, create \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-node.js\"), \" in root directory of your project. You will define that any route that starts with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/app/\"), \" is part of your restricted content and the page will be created on demand:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript:title=gatsby-node.js\"\n  }), \"// Implement the Gatsby API \\u201ConCreatePage\\u201D. This is\\n// called after every page is created.\\nexports.onCreatePage = async ({ page, actions }) => {\\n  const { createPage } = actions\\n\\n  // page.matchPath is a special key that's used for matching pages\\n  // only on the client.\\n  if (page.path.match(/^\\\\/app/)) {\\n    page.matchPath = \\\"/app/*\\\"\\n\\n    // Update the page.\\n    createPage(page)\\n  }\\n}\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note: There is a convenient plugin that already does this work for you: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/packages/gatsby-plugin-create-client-paths\"\n  }), \"gatsby-plugin-create-client-paths\"))), mdx(\"p\", null, \"Now, you must create a generic page that will have the task to generate the restricted content:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/pages/app.js\"\n  }), \"import React from \\\"react\\\"\\nimport { Router } from \\\"@reach/router\\\"\\nimport Layout from \\\"../components/layout\\\"\\nimport Profile from \\\"../components/profile\\\"\\nimport Login from \\\"../components/login\\\"\\n\\nconst App = () => (\\n  <Layout>\\n    <Router>\\n      <Profile path=\\\"/app/profile\\\" />\\n      <Login path=\\\"/app/login\\\" />\\n    </Router>\\n  </Layout>\\n)\\n\\nexport default App\\n\")), mdx(\"p\", null, \"Next, add the components regarding those new routes. The profile component to show the user data:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/components/profile.js\"\n  }), \"import React from \\\"react\\\"\\n\\nconst Profile = () => (\\n  <>\\n    <h1>Your profile</h1>\\n    <ul>\\n      <li>Name: Your name will appear here</li>\\n      <li>E-mail: And here goes the mail</li>\\n    </ul>\\n  </>\\n)\\n\\nexport default Profile\\n\")), mdx(\"p\", null, \"The login component will handle - as you may have guessed - the login process:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/components/login.js\"\n  }), \"import React from \\\"react\\\"\\nimport { navigate } from \\\"gatsby\\\"\\nimport { handleLogin, isLoggedIn } from \\\"../services/auth\\\"\\n\\nclass Login extends React.Component {\\n  state = {\\n    username: ``,\\n    password: ``,\\n  }\\n\\n  handleUpdate = event => {\\n    this.setState({\\n      [event.target.name]: event.target.value,\\n    })\\n  }\\n\\n  handleSubmit = event => {\\n    event.preventDefault()\\n    handleLogin(this.state)\\n  }\\n\\n  render() {\\n    if (isLoggedIn()) {\\n      navigate(`/app/profile`)\\n    }\\n\\n    return (\\n      <>\\n        <h1>Log in</h1>\\n        <form\\n          method=\\\"post\\\"\\n          onSubmit={event => {\\n            this.handleSubmit(event)\\n            navigate(`/app/profile`)\\n          }}\\n        >\\n          <label>\\n            Username\\n            <input type=\\\"text\\\" name=\\\"username\\\" onChange={this.handleUpdate} />\\n          </label>\\n          <label>\\n            Password\\n            <input\\n              type=\\\"password\\\"\\n              name=\\\"password\\\"\\n              onChange={this.handleUpdate}\\n            />\\n          </label>\\n          <input type=\\\"submit\\\" value=\\\"Log In\\\" />\\n        </form>\\n      </>\\n    )\\n  }\\n}\\n\\nexport default Login\\n\")), mdx(\"p\", null, \"Though the routing is working now, you still can access all routes without restriction.\"), mdx(\"h2\", {\n    \"id\": \"controlling-private-routes\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#controlling-private-routes\",\n    \"aria-label\": \"controlling private routes permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Controlling private routes\"), mdx(\"p\", null, \"To check if a user can access the content, you can wrap the restricted content inside a PrivateRoute component:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/components/privateRoute.js\"\n  }), \"import React, { Component } from \\\"react\\\"\\nimport { navigate } from \\\"gatsby\\\"\\nimport { isLoggedIn } from \\\"../services/auth\\\"\\nclass PrivateRoute extends Component {\\n  componentDidMount() {\\n    const { location } = this.props\\n    let noOnLoginPage = location.pathname !== `/app/login`\\n    if (!isLoggedIn() && noOnLoginPage) {\\n      navigate(\\\"/app/login\\\")\\n      return null\\n    }\\n  }\\n  render() {\\n    const { component: Component, ...rest } = this.props\\n    return <Component {...rest} />\\n  }\\n}\\n\\nexport default PrivateRoute\\n\")), mdx(\"p\", null, \"And now you can edit your Router to use the PrivateRoute component:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/pages/app.js\"\n  }), \"import React from \\\"react\\\"\\nimport { Router } from \\\"@reach/router\\\"\\nimport Layout from \\\"../components/layout\\\"\\nimport PrivateRoute from \\\"../components/privateRoute\\\" // highlight-line\\nimport Profile from \\\"../components/profile\\\"\\nimport Login from \\\"../components/login\\\"\\n\\nconst App = () => (\\n  <Layout>\\n    <Router>\\n      {/* highlight-next-line */}\\n      <PrivateRoute path=\\\"/app/profile\\\" component={Profile} />\\n      <Login path=\\\"/app/login\\\" />\\n    </Router>\\n  </Layout>\\n)\\n\\nexport default App\\n\")), mdx(\"h2\", {\n    \"id\": \"refactoring-to-use-new-routes-and-user-data\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#refactoring-to-use-new-routes-and-user-data\",\n    \"aria-label\": \"refactoring to use new routes and user data permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Refactoring to use new routes and user data\"), mdx(\"p\", null, \"With the client-only routes in place, you must now refactor some files to account for the user data available.\"), mdx(\"p\", null, \"The navigation bar will show the user name and logout option to registered users:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/components/nav-bar.js\"\n  }), \"import React from \\\"react\\\"\\nimport { Link, navigate } from \\\"gatsby\\\" // highlight-line\\nimport { getUser, isLoggedIn, logout } from \\\"../services/auth\\\" // highlight-line\\n\\n// highlight-start\\nexport default () => {\\n  const content = { message: \\\"\\\", login: true }\\n  if (isLoggedIn()) {\\n    content.message = `Hello, ${getUser().name}`\\n  } else {\\n    content.message = \\\"You are not logged in\\\"\\n  }\\n  return (\\n    // highlight-end\\n    <div\\n      style={{\\n        display: \\\"flex\\\",\\n        flex: \\\"1\\\",\\n        justifyContent: \\\"space-between\\\",\\n        borderBottom: \\\"1px solid #d1c1e0\\\",\\n      }}\\n    >\\n      <span>{content.message}</span> {/* highlight-line */}\\n      <nav>\\n        <Link to=\\\"/\\\">Home</Link>\\n        {` `}\\n        <Link to=\\\"/app/profile\\\">Profile</Link> {/* highlight-line */}\\n        {` `}\\n        {/* highlight-start */}\\n        {isLoggedIn() ? (\\n          <a\\n            href=\\\"/\\\"\\n            onClick={event => {\\n              event.preventDefault()\\n              logout(() => navigate(`/app/login`))\\n            }}\\n          >\\n            Logout\\n          </a>\\n        ) : null}\\n        {/* highlight-end */}\\n      </nav>\\n    </div>\\n  )\\n} // highlight-line\\n\")), mdx(\"p\", null, \"The index page will suggest to login or check the profile accordingly:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/pages/index.js\"\n  }), \"import React from \\\"react\\\"\\nimport { Link } from \\\"gatsby\\\" // highlight-line\\nimport { getUser, isLoggedIn } from \\\"../services/auth\\\" // highlight-line\\n\\nimport Layout from \\\"../components/layout\\\"\\n\\nexport default () => (\\n  <Layout>\\n    {/* highlight-start */}\\n    <h1>Hello {isLoggedIn() ? getUser().name : \\\"world\\\"}!</h1>\\n    <p>\\n      {isLoggedIn() ? (\\n        <>\\n          You are logged in, so check your{\\\" \\\"}\\n          <Link to=\\\"/app/profile\\\">profile</Link>\\n        </>\\n      ) : (\\n        <>\\n          You should <Link to=\\\"/app/login\\\">log in</Link> to see restricted\\n          content\\n        </>\\n      )}\\n    </p>\\n    {/* highlight-end */}\\n  </Layout>\\n)\\n\")), mdx(\"p\", null, \"And the profile will show the user data:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/components/profile.js\"\n  }), \"import React from \\\"react\\\"\\nimport { getUser } from \\\"../services/auth\\\" // highlight-line\\n\\nconst Profile = () => (\\n  <>\\n    <h1>Your profile</h1>\\n    <ul>\\n      {/* highlight-start */}\\n      <li>Name: {getUser().name}</li>\\n      <li>E-mail: {getUser().email}</li>\\n      {/* highlight-end */}\\n    </ul>\\n  </>\\n)\\n\\nexport default Profile\\n\")), mdx(\"p\", null, \"You should now have a complete authentication workflow, functioning with both login and a user-restricted area!\"), mdx(\"h2\", {\n    \"id\": \"further-reading\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#further-reading\",\n    \"aria-label\": \"further reading permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Further reading\"), mdx(\"p\", null, \"If you want to learn more about using production-ready auth solutions, these links may help:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/gatsbyjs/gatsby/tree/master/examples/simple-auth\"\n  }), \"Gatsby repo simple auth example\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/DSchau/gatsby-mail\"\n  }), \"A Gatsby email \", mdx(\"em\", {\n    parentName: \"a\"\n  }, \"application\")), \", using React Context API to handle authentication\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/gatsbyjs/store.gatsbyjs.org\"\n  }), \"The Gatsby store for swag and other Gatsby goodies\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://auth0.com/blog/building-a-blog-with-gatsby-react-and-webtask/\"\n  }), \"Building a blog with Gatsby, React and Webtask.io!\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://medium.com/@UnicornAgency/jamstack-pwa-lets-build-a-polling-app-with-gatsby-js-firebase-and-styled-components-pt-2-9044534ea6bc\"\n  }), \"JAMstack PWA\\u200A\\u2014\\u200ALet\\u2019s Build a Polling App. with Gatsby.js, Firebase, and Styled-components Pt. 2\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/starters/sw-yx/jamstack-hackathon-starter\"\n  }), \"JAMstack Hackathon Starter - Authenticated Gatsby app starter with Netlify Identity\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.youtube.com/watch?v=vrSoLMmQ46k&feature=youtu.be\"\n  }), \"Learn With Jason Livestream: How to use Netlify Identity and Netlify Functions (with Shawn Wang)\"))));\n}\n;\nMDXContent.isMDXComponent = true;",
        "excerpt": "Sometimes, you need to create a site with gated content, available only to authenticated users. Using Gatsby, you may achieve this using the…",
        "timeToRead": 2,
        "tableOfContents": {
          "items": [
            {
              "url": "#prerequisites",
              "title": "Prerequisites"
            },
            {
              "url": "#security-notice",
              "title": "Security notice"
            },
            {
              "url": "#building-your-gatsby-app",
              "title": "Building your Gatsby app"
            },
            {
              "url": "#authentication-service",
              "title": "Authentication service"
            },
            {
              "url": "#creating-client-only-routes",
              "title": "Creating client-only routes"
            },
            {
              "url": "#controlling-private-routes",
              "title": "Controlling private routes"
            },
            {
              "url": "#refactoring-to-use-new-routes-and-user-data",
              "title": "Refactoring to use new routes and user data"
            },
            {
              "url": "#further-reading",
              "title": "Further reading"
            }
          ]
        },
        "fields": {
          "slug": "/tutorial/authentication-tutorial/",
          "anchor": "authentication-tutorial"
        },
        "frontmatter": {
          "title": "Making a site with user authentication",
          "overview": null,
          "issue": null,
          "disableTableOfContents": null,
          "tableOfContentsDepth": null
        },
        "parent": {
          "__typename": "File",
          "relativePath": "tutorial/authentication-tutorial.md"
        }
      }
    },
    "pageContext": {
      "isCreatedByStatefulCreatePages": false,
      "slug": "/tutorial/authentication-tutorial/",
      "prev": {
        "title": "Using Gatsby Image with Your Site",
        "link": "/tutorial/gatsby-image-tutorial/"
      },
      "next": {
        "title": "Making an e-commerce Gatsby Site with Stripe",
        "link": "/tutorial/ecommerce-tutorial/"
      }
    }
  },
  "query": "query usersMisiekDevGatsbyWwwSrcTemplatesTemplateDocsMarkdownJs2546709735(\n  $path: String!\n) {\n  mdx(fields: {slug: {eq: $path}}) {\n    body\n    excerpt\n    timeToRead\n    tableOfContents\n    fields {\n      slug\n      anchor\n    }\n    frontmatter {\n      title\n      overview\n      issue\n      disableTableOfContents\n      tableOfContentsDepth\n    }\n    ...MarkdownPageFooterMdx\n  }\n}\n\nfragment MarkdownPageFooterMdx on Mdx {\n  parent {\n    __typename\n    ... on File {\n      relativePath\n    }\n  }\n}\n"
}