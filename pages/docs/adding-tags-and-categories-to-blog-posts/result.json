{
  "path": "/docs/adding-tags-and-categories-to-blog-posts/",
  "result": {
    "data": {
      "mdx": {
        "body": "function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Creating Tags Pages for Blog Posts\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Creating tag pages for your blog post is a way to let visitors browse related content.\"), mdx(\"p\", null, \"To add tags to your blog posts, you will first want to have your site set up to turn your markdown pages into blog posts. To get your blog pages set up, see the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/tutorial/part-four/\"\n  }), \"tutorial on Gatsby\\u2019s data layer\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/adding-markdown-pages/\"\n  }), \"Adding Markdown Pages\"), \".\"), mdx(\"p\", null, \"The process will essentially look like this:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Add tags to your \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"markdown\"), \" files\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Write a query to get all tags for your posts\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Make a tags page template (for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/tags/{tag}\"), \")\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Modify \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"gatsby-node.js\"), \" to render pages using that template\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Make a tags index page (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/tags\"), \") that renders a list of all tags\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"(optional)\"), \" Render tags inline with your blog posts\")), mdx(\"h2\", {\n    \"id\": \"add-tags-to-your-markdown-files\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#add-tags-to-your-markdown-files\",\n    \"aria-label\": \"add tags to your markdown files permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Add tags to your \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"markdown\"), \" files\"), mdx(\"p\", null, \"You add tags by defining them in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frontmatter\"), \" of your Markdown file. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frontmatter\"), \" is the area at the top surrounded by dashes that includes post data like the title and date.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-md\"\n  }), \"---\\ntitle: \\\"A Trip To the Zoo\\\"\\n---\\n\\nI went to the zoo today. It was terrible.\\n\")), mdx(\"p\", null, \"Fields can be strings, numbers, or arrays. Since a post can usually have many tags, it makes sense to define it as an array. Here we add our new tags field:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-md\"\n  }), \"---\\ntitle: \\\"A Trip To the Zoo\\\"\\ntags: [\\\"animals\\\", \\\"Chicago\\\", \\\"zoos\\\"]\\n---\\n\\nI went to the zoo today. It was terrible.\\n\")), mdx(\"p\", null, \"If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby develop\"), \" is running, restart it so Gatsby can pick up the new fields.\"), mdx(\"h2\", {\n    \"id\": \"write-a-query-to-get-all-tags-for-your-posts\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#write-a-query-to-get-all-tags-for-your-posts\",\n    \"aria-label\": \"write a query to get all tags for your posts permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Write a query to get all tags for your posts\"), mdx(\"p\", null, \"Now, these fields are available in the data layer. To use field data, query it using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"graphql\"), \". All fields are available to query inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frontmatter\")), mdx(\"p\", null, \"Try running the following query in Graph\", mdx(\"em\", null, \"i\"), \"QL (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost:8000/___graphql\"), \"):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"{\\n  allMarkdownRemark {\\n    group(field: frontmatter___tags) {\\n      tag: fieldValue\\n      totalCount\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"The above query groups posts by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tags\"), \", and returns each \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tag\"), \" with the number of posts as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"totalCount\"), \". As an addition, we could extract some post data in each group if we need to. To keep this tutorial small, we\\u2019re only using the tag name in our tag pages. Let\\u2019s make the tag page template now:\"), mdx(\"h2\", {\n    \"id\": \"make-a-tags-page-template-for-tagstag\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#make-a-tags-page-template-for-tagstag\",\n    \"aria-label\": \"make a tags page template for tagstag permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Make a tags page template (for \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"/tags/{tag}\"), \")\"), mdx(\"p\", null, \"If you followed the tutorial for \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/adding-markdown-pages/\"\n  }), \"Adding Markdown Pages\"), \", then this process should sound familiar: we\\u2019ll make a tag page template, then use it in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createPages\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-node.js\"), \" to generate individual pages for the tags in our posts.\"), mdx(\"p\", null, \"First, we\\u2019ll add a tags template at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/templates/tags.js\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/templates/tags.js\"\n  }), \"import React from \\\"react\\\"\\nimport PropTypes from \\\"prop-types\\\"\\n\\n// Components\\nimport { Link, graphql } from \\\"gatsby\\\"\\n\\nconst Tags = ({ pageContext, data }) => {\\n  const { tag } = pageContext\\n  const { edges, totalCount } = data.allMarkdownRemark\\n  const tagHeader = `${totalCount} post${\\n    totalCount === 1 ? \\\"\\\" : \\\"s\\\"\\n  } tagged with \\\"${tag}\\\"`\\n\\n  return (\\n    <div>\\n      <h1>{tagHeader}</h1>\\n      <ul>\\n        {edges.map(({ node }) => {\\n          const { slug } = node.fields\\n          const { title } = node.frontmatter\\n          return (\\n            <li key={slug}>\\n              <Link to={slug}>{title}</Link>\\n            </li>\\n          )\\n        })}\\n      </ul>\\n      {/*\\n              This links to a page that does not yet exist.\\n              We'll come back to it!\\n            */}\\n      <Link to=\\\"/tags\\\">All tags</Link>\\n    </div>\\n  )\\n}\\n\\nTags.propTypes = {\\n  pageContext: PropTypes.shape({\\n    tag: PropTypes.string.isRequired,\\n  }),\\n  data: PropTypes.shape({\\n    allMarkdownRemark: PropTypes.shape({\\n      totalCount: PropTypes.number.isRequired,\\n      edges: PropTypes.arrayOf(\\n        PropTypes.shape({\\n          node: PropTypes.shape({\\n            frontmatter: PropTypes.shape({\\n              title: PropTypes.string.isRequired,\\n            }),\\n            fields: PropTypes.shape({\\n              slug: PropTypes.string.isRequired,\\n            }),\\n          }),\\n        }).isRequired\\n      ),\\n    }),\\n  }),\\n}\\n\\nexport default Tags\\n\\nexport const pageQuery = graphql`\\n  query($tag: String) {\\n    allMarkdownRemark(\\n      limit: 2000\\n      sort: { fields: [frontmatter___date], order: DESC }\\n      filter: { frontmatter: { tags: { in: [$tag] } } }\\n    ) {\\n      totalCount\\n      edges {\\n        node {\\n          fields {\\n            slug\\n          }\\n          frontmatter {\\n            title\\n          }\\n        }\\n      }\\n    }\\n  }\\n`\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"propTypes\"), \" are included in this example to help you ensure you\\u2019re getting all the data you need in the component, and to help serve as a guide while destructuring / using those props.\"), mdx(\"h2\", {\n    \"id\": \"modify-gatsby-nodejs-to-render-pages-using-that-template\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#modify-gatsby-nodejs-to-render-pages-using-that-template\",\n    \"aria-label\": \"modify gatsby nodejs to render pages using that template permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Modify \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"gatsby-node.js\"), \" to render pages using that template\"), mdx(\"p\", null, \"Now we\\u2019ve got a template. Great! I\\u2019ll assume you followed the tutorial for \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/adding-markdown-pages/\"\n  }), \"Adding Markdown Pages\"), \" and provide a sample \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createPages\"), \" that generates post pages as well as tag pages. In the site\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-node.js\"), \" file, include \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lodash\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"const _ = require('lodash')\"), \") and then make sure your \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/node-apis/#createPages\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"createPages\")), \" looks something like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js:title=gatsby-node.js\"\n  }), \"const path = require(\\\"path\\\")\\nconst _ = require(\\\"lodash\\\")\\n\\nexports.createPages = async ({ actions, graphql, reporter }) => {\\n  const { createPage } = actions\\n\\n  const blogPostTemplate = path.resolve(\\\"src/templates/blog.js\\\")\\n  const tagTemplate = path.resolve(\\\"src/templates/tags.js\\\")\\n\\n  const result = await graphql(`\\n    {\\n      postsRemark: allMarkdownRemark(\\n        sort: { order: DESC, fields: [frontmatter___date] }\\n        limit: 2000\\n      ) {\\n        edges {\\n          node {\\n            fields {\\n              slug\\n            }\\n            frontmatter {\\n              tags\\n            }\\n          }\\n        }\\n      }\\n      tagsGroup: allMarkdownRemark(limit: 2000) {\\n        group(field: frontmatter___tags) {\\n          fieldValue\\n        }\\n      }\\n    }\\n  `)\\n\\n  // handle errors\\n  if (result.errors) {\\n    reporter.panicOnBuild(`Error while running GraphQL query.`)\\n    return\\n  }\\n\\n  const posts = result.data.postsRemark.edges\\n\\n  // Create post detail pages\\n  posts.forEach(({ node }) => {\\n    createPage({\\n      path: node.fields.slug,\\n      component: blogPostTemplate,\\n    })\\n  })\\n\\n  // Extract tag data from query\\n  const tags = result.data.tagsGroup.group\\n\\n  // Make tag pages\\n  tags.forEach(tag => {\\n    createPage({\\n      path: `/tags/${_.kebabCase(tag.fieldValue)}/`,\\n      component: tagTemplate,\\n      context: {\\n        tag: tag.fieldValue,\\n      },\\n    })\\n  })\\n}\\n\")), mdx(\"p\", null, \"Some notes:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Our GraphQL query only looks for data we need to generate these pages. Anything else can be queried again later (and, if you notice, we do this above in the tags template for the post title).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We have referenced two \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"allMarkdownRemark\"), \" fields in our query. To avoid naming collisions we must \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/docs/graphql-reference/#aliasing\"\n  }), \"alias\"), \" one of them. We alias both to make our code more human-readable.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"While making the tag pages, note that we pass \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"tag.name\"), \" through in the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"context\"), \". This is the value that gets used in the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TagPage\"), \" query to limit our search to only posts tagged with the tag in the URL.\")), mdx(\"h2\", {\n    \"id\": \"make-a-tags-index-page-tags-that-renders-a-list-of-all-tags\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#make-a-tags-index-page-tags-that-renders-a-list-of-all-tags\",\n    \"aria-label\": \"make a tags index page tags that renders a list of all tags permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Make a tags index page (\", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"/tags\"), \") that renders a list of all tags\"), mdx(\"p\", null, \"Our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/tags\"), \" page will simply list out all tags, followed by the number of posts with that tag. We can get the data with the first query we wrote earlier, that groups posts by tags:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/pages/tags.js\"\n  }), \"import React from \\\"react\\\"\\nimport PropTypes from \\\"prop-types\\\"\\n\\n// Utilities\\nimport kebabCase from \\\"lodash/kebabCase\\\"\\n\\n// Components\\nimport { Helmet } from \\\"react-helmet\\\"\\nimport { Link, graphql } from \\\"gatsby\\\"\\n\\nconst TagsPage = ({\\n  data: {\\n    allMarkdownRemark: { group },\\n    site: {\\n      siteMetadata: { title },\\n    },\\n  },\\n}) => (\\n  <div>\\n    <Helmet title={title} />\\n    <div>\\n      <h1>Tags</h1>\\n      <ul>\\n        {group.map(tag => (\\n          <li key={tag.fieldValue}>\\n            <Link to={`/tags/${kebabCase(tag.fieldValue)}/`}>\\n              {tag.fieldValue} ({tag.totalCount})\\n            </Link>\\n          </li>\\n        ))}\\n      </ul>\\n    </div>\\n  </div>\\n)\\n\\nTagsPage.propTypes = {\\n  data: PropTypes.shape({\\n    allMarkdownRemark: PropTypes.shape({\\n      group: PropTypes.arrayOf(\\n        PropTypes.shape({\\n          fieldValue: PropTypes.string.isRequired,\\n          totalCount: PropTypes.number.isRequired,\\n        }).isRequired\\n      ),\\n    }),\\n    site: PropTypes.shape({\\n      siteMetadata: PropTypes.shape({\\n        title: PropTypes.string.isRequired,\\n      }),\\n    }),\\n  }),\\n}\\n\\nexport default TagsPage\\n\\nexport const pageQuery = graphql`\\n  query {\\n    site {\\n      siteMetadata {\\n        title\\n      }\\n    }\\n    allMarkdownRemark(limit: 2000) {\\n      group(field: frontmatter___tags) {\\n        fieldValue\\n        totalCount\\n      }\\n    }\\n  }\\n`\\n\")), mdx(\"h2\", {\n    \"id\": \"optional-render-tags-inline-with-your-blog-posts\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#optional-render-tags-inline-with-your-blog-posts\",\n    \"aria-label\": \"optional render tags inline with your blog posts permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), mdx(\"em\", {\n    parentName: \"h2\"\n  }, \"(optional)\"), \" Render tags inline with your blog posts\"), mdx(\"p\", null, \"The home stretch! Anywhere else you\\u2019d like to render your tags, simply add them to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frontmatter\"), \" section of your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"graphql\"), \" query and access them in your component like any other prop.\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "excerpt": "Creating tag pages for your blog post is a way to let visitors browse related content. To add tags to your blog posts, you will first want…",
        "timeToRead": 2,
        "tableOfContents": {
          "items": [
            {
              "url": "#add-tags-to-your-markdown-files",
              "title": "Add tags to your markdown files"
            },
            {
              "url": "#write-a-query-to-get-all-tags-for-your-posts",
              "title": "Write a query to get all tags for your posts"
            },
            {
              "url": "#make-a-tags-page-template-for-tagstag",
              "title": "Make a tags page template (for /tags/{tag})"
            },
            {
              "url": "#modify-gatsby-nodejs-to-render-pages-using-that-template",
              "title": "Modify gatsby-node.js to render pages using that template"
            },
            {
              "url": "#make-a-tags-index-page-tags-that-renders-a-list-of-all-tags",
              "title": "Make a tags index page (/tags) that renders a list of all tags"
            },
            {
              "url": "#optional-render-tags-inline-with-your-blog-posts",
              "title": "(optional) Render tags inline with your blog posts"
            }
          ]
        },
        "fields": {
          "slug": "/docs/adding-tags-and-categories-to-blog-posts/",
          "anchor": "adding-tags-and-categories-to-blog-posts"
        },
        "frontmatter": {
          "title": "Creating Tags Pages for Blog Posts",
          "overview": null,
          "issue": null,
          "disableTableOfContents": null,
          "tableOfContentsDepth": null
        },
        "parent": {
          "__typename": "File",
          "relativePath": "docs/adding-tags-and-categories-to-blog-posts.md"
        }
      }
    },
    "pageContext": {
      "isCreatedByStatefulCreatePages": false,
      "slug": "/docs/adding-tags-and-categories-to-blog-posts/",
      "prev": {
        "title": "Adding an SEO Component",
        "link": "/docs/add-seo-component/",
        "breadcrumbTitle": "SEO Component"
      },
      "next": {
        "title": "Adding Pagination",
        "link": "/docs/adding-pagination/",
        "breadcrumbTitle": "Pagination"
      }
    }
  },
  "query": "query usersMisiekDevGatsbyWwwSrcTemplatesTemplateDocsMarkdownJs2546709735(\n  $path: String!\n) {\n  mdx(fields: {slug: {eq: $path}}) {\n    body\n    excerpt\n    timeToRead\n    tableOfContents\n    fields {\n      slug\n      anchor\n    }\n    frontmatter {\n      title\n      overview\n      issue\n      disableTableOfContents\n      tableOfContentsDepth\n    }\n    ...MarkdownPageFooterMdx\n  }\n}\n\nfragment MarkdownPageFooterMdx on Mdx {\n  parent {\n    __typename\n    ... on File {\n      relativePath\n    }\n  }\n}\n"
}