{
  "path": "/docs/node-tracking/",
  "result": {
    "data": {
      "mdx": {
        "body": "function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Node Tracking\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"track-nodes\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#track-nodes\",\n    \"aria-label\": \"track nodes permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Track Nodes\"), mdx(\"p\", null, \"You may see calls to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"trackInlineObjectsInRootNode()\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"findRootNodeAncestor()\"), \" in some parts of the code. These are both defined in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/db/node-tracking.js\"\n  }), \"schema/node-tracking.js\"), \". Node tracking is the tracking of relationships between a node\\u2019s object values (not children), and the node\\u2019s ID. E.g Take, the following node:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"let nodeA = {\\n  id: `id2`,\\n  internal: {\\n    type: `footype`,\\n  },\\n  foo: {\\n    myfile: \\\"blog/my-blog.md\\\",\\n    b: 2,\\n  },\\n  bar: 7,\\n  parent: `id1`,\\n  baz: [{ x: 8 }, 9],\\n}\\n\")), mdx(\"p\", null, \"Its sub objects are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foo\"), \" (value = \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{ myfile: \\\"blog/my-blog.md\\\", b: 2}\"), \"), and those in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"baz\"), \" array (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{ x: 8 }\"), \"). Node tracking will track those back to the top level node\\u2019s ID (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id2\"), \" in this case). The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/db/node-tracking.js#L32\"\n  }), \"trackInlineObjectsinRootNode()\"), \" function takes care of this and records those relationships in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/db/node-tracking.js#L9\"\n  }), \"rootNodeMap\"), \" WeakMap. E.g after calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"trackInlineObjectsInRootNode(nodeA)\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rootNodeMap\"), \" would contain the following records:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// rootNodeMap:\\n{\\n  { blog: \\\"blog/my-blog.md\\\", b: 2 } => \\\"id2\\\", // from `foo` field\\n  { x: 8 } => \\\"id2\\\",       // from `baz` array\\n  {                        // top level object is tracked too\\n    id: `id2`,\\n    internal: {            // internal is not mapped\\n      type: `footype`\\n    },\\n    foo: {\\n      blog: \\\"blog/my-blog.md\\\",\\n      b: 2\\n    },\\n    bar: 7,\\n    parent: `id1`,\\n    baz: [ { x: 8 }, 9 ]\\n  } => \\\"id2\\\"\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"find-root-nodes\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#find-root-nodes\",\n    \"aria-label\": \"find root nodes permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Find Root Nodes\"), mdx(\"p\", null, \"To access this information, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node-tracking.js\"), \" provides the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/schema/node-tracking.js#L52\"\n  }), \"findRootNodeAncestor()\"), \" function. It takes an object, and looks up its parent\\u2019s nodeID in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rootNodeMap\"), \". It then finds the actual node in redux. It then gets that node\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"parent\"), \" ID, and gets the parent node from redux. And continues in this way until the root node is found.\"), mdx(\"p\", null, \"In the above example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nodeA\"), \" has parent \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id1\"), \". So \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"findRootNodeAncestor({ blog: \\\"blog/my-blog.md\\\", b: 2 })\"), \" would return the node for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id1\"), \" (the parent).\"), mdx(\"h2\", {\n    \"id\": \"whywhere\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#whywhere\",\n    \"aria-label\": \"whywhere permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Why/Where?\"), mdx(\"p\", null, \"Where is node-tracking used? First up, nodes are tracked in 2 places. Firstly, in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/redux/actions.js#L539\"\n  }), \"createNode\"), \", every time a node is created, we link all its sub objects to the new NodeID. Nodes are also tracked whenever they are resolved in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/schema-sift/#3-resolve-inner-query-fields-on-all-nodes\"\n  }), \"run-sift\"), \". This is necessary because \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/schema-input-gql/#inferring-input-filters-from-plugin-fields/\"\n  }), \"custom plugin fields\"), \" might return new objects that weren\\u2019t created when the node was initially made.\"), mdx(\"p\", null, \"Now, where do we use this information? In 2 places.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"In the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"File\"), \" type resolver. It is used to lookup the node\\u2019s root, which should be of type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"File\"), \". We can then use that root node\\u2019s base directory attribute to create the full path of the resolved field\\u2019s value, and therefore find the actual \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"File\"), \" node that the string value is describing. See \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/docs/schema-gql-type/#file-types\"\n  }), \"File GqlType inference\"), \" for more info.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"To recursively look up node descriptions in \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/schema/type-conflict-reporter.js\"\n  }), \"type-conflict-reporter.js\"))));\n}\n;\nMDXContent.isMDXComponent = true;",
        "excerpt": "Track Nodes You may see calls to  trackInlineObjectsInRootNode()  and  findRootNodeAncestor()  in some parts of the code. These are both…",
        "timeToRead": 1,
        "tableOfContents": {
          "items": [
            {
              "url": "#track-nodes",
              "title": "Track Nodes"
            },
            {
              "url": "#find-root-nodes",
              "title": "Find Root Nodes"
            },
            {
              "url": "#whywhere",
              "title": "Why/Where?"
            }
          ]
        },
        "fields": {
          "slug": "/docs/node-tracking/",
          "anchor": "node-tracking"
        },
        "frontmatter": {
          "title": "Node Tracking",
          "overview": null,
          "issue": null,
          "disableTableOfContents": null,
          "tableOfContentsDepth": null
        },
        "parent": {
          "__typename": "File",
          "relativePath": "docs/node-tracking.md"
        }
      }
    },
    "pageContext": {
      "isCreatedByStatefulCreatePages": false,
      "slug": "/docs/node-tracking/",
      "prev": {
        "title": "Page -> Node Dependencies",
        "link": "/docs/page-node-dependencies/"
      },
      "next": {
        "title": "Internal Data Bridge",
        "link": "/docs/internal-data-bridge/"
      }
    }
  },
  "query": "query usersMisiekDevGatsbyWwwSrcTemplatesTemplateDocsMarkdownJs2546709735(\n  $path: String!\n) {\n  mdx(fields: {slug: {eq: $path}}) {\n    body\n    excerpt\n    timeToRead\n    tableOfContents\n    fields {\n      slug\n      anchor\n    }\n    frontmatter {\n      title\n      overview\n      issue\n      disableTableOfContents\n      tableOfContentsDepth\n    }\n    ...MarkdownPageFooterMdx\n  }\n}\n\nfragment MarkdownPageFooterMdx on Mdx {\n  parent {\n    __typename\n    ... on File {\n      relativePath\n    }\n  }\n}\n"
}