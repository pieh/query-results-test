{
  "path": "/blog/2019-01-31-using-react-context-api-with-gatsby/",
  "result": {
    "data": {
      "mdx": {
        "body": "function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Using React Context API with Gatsby\",\n  \"author\": \"Muhammad Muhsin\",\n  \"date\": \"2019-01-31T00:00:00.000Z\",\n  \"tags\": [\"react\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Pullquote = makeShortcode(\"Pullquote\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"You often feel the unsettling flash of a bright phone screen while relaxing in a dimly lit room. This is alleviated by introducing a \\u201Cdark mode\\u201D which switches background and foreground colors to reduce eye strain. I decided to add this to my boutique web agency \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://laccadive.io/\"\n  }), \"Laccadive IO\\u2019s\"), \" new Gatsby-based site.\"), mdx(Pullquote, {\n    citation: \"Heydon Pickering\",\n    mdxType: \"Pullquote\"\n  }, \"One of the few types of alternative theme that adds real value to users is a low light intensity \\u201Cnight mode\\u201D theme. Not only is it easier on the eyes when reading in the dark, but it also reduces the likelihood of migraine and the irritation of other light sensitivity disorders. As a migraine sufferer, I\\u2019m interested!\"), mdx(\"p\", null, \"In considering the different ways to implement this a natural fit become apparent: React\\u2019s new Context API. Having worked with Context API before, this seemed like a particularly well suited use for this API. However, I soon realized I would need to do a little set-up work to get this up and running.\"), mdx(\"p\", null, \"After a brief search, I came across just what I was looking for, the Gatsby Browser APIs. Specifically, the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/browser-apis/#wrapRootElement\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"wrapRootElement\")), \" API was a perfect fit for this use case. This API allows you to wrap your root element with a wrapping component, e.g. a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Provider\"), \" from Redux or\\u2026 a ThemeProvider from React Context. Using this, I managed to achieve dark mode for my use case.\"), mdx(\"p\", null, \"Let\\u2019s do a deep dive into how this feature was actually implemented step by step using React Context, Gatsby, and a Theme Provider to implement a dark mode UI!\"), mdx(\"h2\", {\n    \"id\": \"creating-the-context-file-in-a-new-gatsby-project\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#creating-the-context-file-in-a-new-gatsby-project\",\n    \"aria-label\": \"creating the context file in a new gatsby project permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Creating the Context file in a new Gatsby project\"), mdx(\"p\", null, \"First of all, you have to initialize a Gatsby project and start it in develop mode.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"gatsby new gatsby-dark-mode\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"cd gatsby-dark-mode\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"npm start\")), mdx(\"p\", null, \"Then, create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"context\"), \" folder within src and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ThemeContext.js\"), \" file within it.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/context/ThemeContext.js\"\n  }), \"import React from \\\"react\\\"\\n\\nconst defaultState = {\\n  dark: false,\\n  toggleDark: () => {},\\n}\\n\\nconst ThemeContext = React.createContext(defaultState)\\n\\n// Getting dark mode information from OS!\\n// You need macOS Mojave + Safari Technology Preview Release 68 to test this currently.\\nconst supportsDarkMode = () =>\\n  window.matchMedia(\\\"(prefers-color-scheme: dark)\\\").matches === true\\n\\nclass ThemeProvider extends React.Component {\\n  state = {\\n    dark: false,\\n  }\\n\\n  toggleDark = () => {\\n    let dark = !this.state.dark\\n    localStorage.setItem(\\\"dark\\\", JSON.stringify(dark))\\n    this.setState({ dark })\\n  }\\n\\n  componentDidMount() {\\n    // Getting dark mode value from localStorage!\\n    const lsDark = JSON.parse(localStorage.getItem(\\\"dark\\\"))\\n    if (lsDark) {\\n      this.setState({ dark: lsDark })\\n    } else if (supportsDarkMode()) {\\n      this.setState({ dark: true })\\n    }\\n  }\\n\\n  render() {\\n    const { children } = this.props\\n    const { dark } = this.state\\n    return (\\n      <ThemeContext.Provider\\n        value={{\\n          dark,\\n          toggleDark: this.toggleDark,\\n        }}\\n      >\\n        {children}\\n      </ThemeContext.Provider>\\n    )\\n  }\\n}\\n\\nexport default ThemeContext\\n\\nexport { ThemeProvider }\\n\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org/docs/context.html#reactcreatecontext\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"React.createContext\")), \" is a new function in React 16.3 and allows you to create a Context object. It accepts a default state, the value which will be used when a component does not have a matching Provider above it in the tree.\\xA0 The function returns an object with Provider and Consumer properties which we will be using later.\"), mdx(\"p\", null, \"Create the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ThemeProvider\"), \" component which wraps its children with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ThemeContext.Provider\"), \". This component is exported as a named export from the file.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toggleDark\"), \"\\xA0function gets the current \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"state.dark\"), \" value and switches the value to the opposite. It then stores the new value in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localStorage\"), \" before setting it back to state using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setState\"), \" function, so that it persists over page refreshes. The dark value from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"state\"), \" and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toggleDark\"), \" function are passed to the Provider.\"), mdx(\"h2\", {\n    \"id\": \"modifying-the-gatsby-browser-file\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#modifying-the-gatsby-browser-file\",\n    \"aria-label\": \"modifying the gatsby browser file permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Modifying the\\xA0Gatsby Browser file\"), mdx(\"p\", null, \"Next, write the following code within the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-browser.js\"), \" file, which is in the root folder in a Gatsby project:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=gatsby-browser.js\"\n  }), \"import React from \\\"react\\\"\\n\\nimport { ThemeProvider } from \\\"./src/context/ThemeContext\\\"\\n\\n// highlight-start\\nexport const wrapRootElement = ({ element }) => (\\n  <ThemeProvider>{element}</ThemeProvider>\\n)\\n// highlight-end\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ThemeProvider\"), \" component exported from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ThemeContext.js\"), \" file wraps the root element and is exported as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"wrapRootElement\"), \". This API is then invoked appropriately by the Gatsby API runner.\"), mdx(\"h2\", {\n    \"id\": \"editing-the-layout-file\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#editing-the-layout-file\",\n    \"aria-label\": \"editing the layout file permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Editing the Layout file\"), mdx(\"p\", null, \"The default \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"layout.js\"), \" uses a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<staticQuery>\"), \" and renderProp to render the layout, which is wrapped by a Fragment \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<>\"), \". Modify it to look like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/components/layout.js\"\n  }), \"import React from 'react'\\nimport PropTypes from 'prop-types'\\nimport { StaticQuery, graphql } from 'gatsby'\\n\\nimport ThemeContext from '../context/ThemeContext'\\nimport Header from './header'\\nimport './layout.css'\\n\\nconst Layout = ({ children }) => (\\n  <StaticQuery\\n    query={graphql`\\n      query SiteTitleQuery {\\n        site {\\n          siteMetadata {\\n            title\\n          }\\n        }\\n      }\\n    `}\\n    render={data => (\\n      {/* highlight-start */}\\n      <ThemeContext.Consumer>\\n        {theme => (\\n          <div className={theme.dark ? 'dark' : 'light'}>\\n      {/* highlight-end */}\\n            <Header siteTitle={data.site.siteMetadata.title} />\\n            <div\\n              style={{\\n                margin: `0 auto`,\\n                maxWidth: 960,\\n                padding: `0px 1.0875rem 1.45rem`,\\n                paddingTop: 0,\\n              }}\\n            >\\n              {children}\\n              <footer>\\n                \\xA9 {new Date().getFullYear()}, Built with\\n                {` `}\\n                <a href=\\\"https://www.gatsbyjs.org\\\">Gatsby</a>\\n              </footer>\\n            </div>\\n          </div>\\n        )}\\n      </ThemeContext.Consumer>\\n    )}\\n  />\\n)\\n\\nLayout.propTypes = {\\n  children: PropTypes.node.isRequired,\\n}\\n\\nexport default Layout\\n\")), mdx(\"p\", null, \"The class of the wrapper div will change based on the context value of the dark variable, which we set as state in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ThemeContext.js\"), \" file.\"), mdx(\"h2\", {\n    \"id\": \"adding-the-switch-in-the-header\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#adding-the-switch-in-the-header\",\n    \"aria-label\": \"adding the switch in the header permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Adding the switch in the Header\"), mdx(\"p\", null, \"With this configuration completed, we can now add the actual switch to toggle dark mode. Modify the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"header.js\"), \" component, like so:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/components/header.js\"\n  }), \"import { Link } from \\\"gatsby\\\"\\nimport PropTypes from \\\"prop-types\\\"\\nimport React from \\\"react\\\"\\n\\nimport ThemeContext from \\\"../context/ThemeContext\\\"\\n\\nconst Header = ({ siteTitle }) => (\\n  <ThemeContext.Consumer>\\n    {theme => (\\n      <div\\n        style={{\\n          background: `rebeccapurple`,\\n          marginBottom: `1.45rem`,\\n        }}\\n      >\\n        <div\\n          style={{\\n            margin: `0 auto`,\\n            maxWidth: 960,\\n            padding: `1.45rem 1.0875rem`,\\n          }}\\n        >\\n          <h1 style={{ margin: 0 }}>\\n            <Link\\n              to=\\\"/\\\"\\n              style={{\\n                color: `white`,\\n                textDecoration: `none`,\\n              }}\\n            >\\n              {siteTitle}\\n            </Link>\\n          </h1>\\n          <button className=\\\"dark-switcher\\\" onClick={theme.toggleDark}>\\n            {theme.dark ? <span>Light mode \\u2600</span> : <span>Dark mode \\u263E</span>}\\n          </button>\\n        </div>\\n      </div>\\n    )}\\n  </ThemeContext.Consumer>\\n)\\n\\nHeader.propTypes = {\\n  siteTitle: PropTypes.string,\\n}\\n\\nHeader.defaultProps = {\\n  siteTitle: ``,\\n}\\n\\nexport default Header\\n\")), mdx(\"h2\", {\n    \"id\": \"adding-styles\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#adding-styles\",\n    \"aria-label\": \"adding styles permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Adding styles\"), mdx(\"p\", null, \"At this point, we\\u2019ve set up a dark mode toggle and conditionally render a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"className\"), \" if dark mode is enabled. However, we still need to actually \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"style\"), \" based upon this conditional \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"className\"), \". As such, we need to add the following styles in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"layout.css\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css:title=src/components/layout.css\"\n  }), \"/* Dark mode styles */\\n.dark-switcher {\\n  color: #fff;\\n  margin-top: 5px;\\n  background: transparent;\\n  border: none;\\n  cursor: pointer;\\n}\\n\\n@media (min-width: 992px) {\\n  .dark-switcher {\\n    position: absolute;\\n    right: 15px;\\n    top: 10px;\\n  }\\n}\\n\\n.dark {\\n  background-color: #2a2b2d;\\n  color: #fff;\\n  transition: all 0.6s ease;\\n}\\n\\n.light {\\n  transition: all 0.6s ease;\\n  background-color: #fefefe;\\n}\\n\\n.dark a,\\n.dark a:visited {\\n  color: #fff;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"conclusion\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#conclusion\",\n    \"aria-label\": \"conclusion permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Conclusion\"), mdx(\"p\", null, \"In just a few, simple steps we\\u2019ve enabled a conditional dark mode that our users will certainly appreciate. We\\u2019ve leveraged APIs like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Context\"), \" in React, as well as internal Gatsby APIs to wrap our code with a provider. Now if you visit \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:8000/\"), \"\\xA0you can see all of our work pay off!\"), mdx(\"p\", null, \"We covered the following in today\\u2019s article:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Introduction to dark mode in web development\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Initializing a Gatsby project\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Initializing the context object with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"createContext\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Using the Gatsby Browser API and returning\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"wrapRootElement\"), \" from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"gatsby-browser.js\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Wrapping the JSX within \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"layout.js\"), \" with a Context Consumer and a div with class referring to the dark mode state\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Adding the switch inside the header\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Adding the styles relevant to the Dark mode\")), mdx(\"p\", null, \"Interested in seeing this in action? Head over to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/m-muhsin/gatsby-dark-mode\"\n  }), \"https://github.com/m-muhsin/gatsby-dark-mode\"), \" and clone or fork my project.\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "excerpt": "You often feel the unsettling flash of a bright phone screen while relaxing in a dimly lit room. This is alleviated by introducing a \"dark…",
        "timeToRead": 3,
        "fields": {
          "slug": "/blog/2019-01-31-using-react-context-api-with-gatsby/",
          "publishedAt": null
        },
        "frontmatter": {
          "title": "Using React Context API with Gatsby",
          "excerpt": null,
          "date": "January 31st 2019",
          "rawDate": "2019-01-31T00:00:00.000Z",
          "canonicalLink": null,
          "tags": [
            "react"
          ],
          "image": null,
          "imageAuthor": null,
          "imageAuthorLink": null,
          "imageTitle": null,
          "showImageInArticle": null,
          "author": {
            "id": "Muhammad Muhsin",
            "bio": "Co-founder & Lead Developer at Laccadive IO. Author at Smashing Magazine.",
            "twitter": "@muhsinlk",
            "avatar": {
              "childImageSharp": {
                "fixed": {
                  "tracedSVG": "data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='32'%20height='32'%3e%3crect%20width='100%25'%20height='100%25'%20fill='%23f6f2f8'/%3e%3cpath%20d='M10%204l-2%206c0%206%200%208-2%2010-3%202-3%203%200%202s4-1%204%201c0%201%201%202%205%202s5%200%205-2v-2c1%200%209%203%2010%205%201%201%202%200%202-8l-1-8-1%202-1%201-1-1-1-2-2-2-2-3-4-1c-3-3-6-2-9%200m1%204c-1%202-1%202%204%201%203%200%204%200%203%201l-4%201c-3%200-4%201-4%202%200%202%204%207%204%205l2-1v-1c-1-2%200-3%202-1s3%200%202-4c-1-5-7-7-9-3'%20fill='%23e0d6eb'%20fill-rule='evenodd'/%3e%3c/svg%3e",
                  "width": 64,
                  "height": 64,
                  "src": "/static/8050ce83693cce942270523530f3d505/88ae8/muhammad-muhsin.jpg",
                  "srcSet": "/static/8050ce83693cce942270523530f3d505/88ae8/muhammad-muhsin.jpg 1x,\n/static/8050ce83693cce942270523530f3d505/0740f/muhammad-muhsin.jpg 1.5x,\n/static/8050ce83693cce942270523530f3d505/c9264/muhammad-muhsin.jpg 2x"
                }
              }
            },
            "fields": {
              "slug": "/contributors/muhammad-muhsin/"
            }
          }
        }
      }
    },
    "pageContext": {
      "isCreatedByStatefulCreatePages": false,
      "slug": "/blog/2019-01-31-using-react-context-api-with-gatsby/",
      "prev": {
        "fields": {
          "slug": "/blog/2019-01-31-why-themes/",
          "package": null,
          "released": true
        },
        "frontmatter": {
          "title": "Why Themes?",
          "draft": null,
          "canonicalLink": null,
          "publishedAt": null,
          "issue": null,
          "tags": [
            "themes"
          ]
        }
      },
      "next": {
        "fields": {
          "slug": "/blog/2019-02-05-hapticmedia-case-study/",
          "package": null,
          "released": true
        },
        "frontmatter": {
          "title": "Beyond Static: Hapticmedia Uses Gatsby to Build a Dynamic Web App",
          "draft": null,
          "canonicalLink": null,
          "publishedAt": null,
          "issue": null,
          "tags": [
            "case-studies",
            "apps",
            "ecommerce"
          ]
        }
      }
    }
  },
  "query": "query usersMisiekDevGatsbyWwwSrcTemplatesTemplateBlogPostJs2991924798(\n  $slug: String!\n) {\n  mdx(fields: {slug: {eq: $slug}}) {\n    body\n    excerpt\n    timeToRead\n    fields {\n      slug\n      publishedAt\n    }\n    frontmatter {\n      title\n      excerpt\n      date(formatString: \"MMMM Do YYYY\")\n      rawDate: date\n      canonicalLink\n      tags\n      image {\n        childImageSharp {\n          resize(width: 1500, height: 1500) {\n            src\n          }\n          fluid(maxWidth: 786) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      imageAuthor\n      imageAuthorLink\n      imageTitle\n      showImageInArticle\n      author {\n        id\n        bio\n        twitter\n        avatar {\n          childImageSharp {\n            fixed(width: 64, height: 64, quality: 75, traceSVG: {turdSize: 10, background: \"#f6f2f8\", color: \"#e0d6eb\"}) {\n              ...GatsbyImageSharpFixed_tracedSVG\n            }\n          }\n        }\n        fields {\n          slug\n        }\n      }\n    }\n  }\n}\n\nfragment GatsbyImageSharpFluid on ImageSharpFluid {\n  base64\n  aspectRatio\n  src\n  srcSet\n  sizes\n}\n\nfragment GatsbyImageSharpFixed_tracedSVG on ImageSharpFixed {\n  tracedSVG\n  width\n  height\n  src\n  srcSet\n}\n"
}