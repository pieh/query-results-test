{
  "path": "/docs/client-data-fetching/",
  "result": {
    "data": {
      "mdx": {
        "body": "function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Client Data Fetching\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"context\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#context\",\n    \"aria-label\": \"context permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Context\"), mdx(\"p\", null, \"This article touches on how to fetch data at both \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"build time\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"run time\"), \". It uses the plugin \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/packages/gatsby-source-graphql/\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"gatsby-source-graphql\")), \" to fetch data at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/glossary#build\"\n  }), \"build time\"), \" on the server, while it uses the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/axios/axios\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"axios\")), \" package to fetch different data on the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/glossary#client-side\"\n  }), \"client-side\"), \" when the page loads.\"), mdx(\"p\", null, \"When this article mentions \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/glossary#hydration\"\n  }), \"hydration\"), \", it means that Gatsby (through React.js) builds static files to render server-side. When Gatsby\\u2019s script bundle downloads and executes in the browser, it preserves the HTML markup built by Gatsby and turns the site into a full React web application that can manipulate the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/glossary#dom\"\n  }), \"DOM\"), \". The result of this process creates fast loading pages and a nice user experience.\"), mdx(\"p\", null, \"Compiling pages at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/glossary#build\"\n  }), \"build-time\"), \" is useful when your website content won\\u2019t change often, or when triggering a build process to recompile works fine. However, some websites with more dynamic needs require a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/glossary#client-side\"\n  }), \"client-side\"), \" \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/glossary#runtime\"\n  }), \"runtime\"), \" to handle constantly changing content after the page loads, like a chat widget or an email client web application.\"), mdx(\"h2\", {\n    \"id\": \"combining-build-time-and-client-run-time-data\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#combining-build-time-and-client-run-time-data\",\n    \"aria-label\": \"combining build time and client run time data permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Combining build-time and client run-time data\"), mdx(\"p\", null, \"Because a Gatsby site \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/glossary#hydration\"\n  }), \"hydrates\"), \" into a React app after loading statically, Gatsby is not just for static sites. You can also fetch data dynamically on the client-side as needed, like you would with any other React app.\"), mdx(\"p\", null, \"To illustrate this, we\\u2019ll walk through a small example site that uses both Gatsby\\u2019s data layer at build-time and data on the client at run-time. This example is based loosely on Jason Lengstorf\\u2019s \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/jlengstorf/gatsby-with-apollo\"\n  }), \"Gatsby with Apollo\"), \" example. We\\u2019ll be fetching character data for Rick (of Rick and Morty) and a random pupper image.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note: Check out the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/amberleyromo/gatsby-client-data-fetching\"\n  }), \"full example here\"), \", if helpful.\")), mdx(\"h3\", {\n    \"id\": \"1-create-a-gatsby-page-component\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#1-create-a-gatsby-page-component\",\n    \"aria-label\": \"1 create a gatsby page component permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"1. Create a Gatsby page component\"), mdx(\"p\", null, \"No data yet. Just the basic React page that we\\u2019ll be populating.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=index.js\"\n  }), \"import React, { Component } from \\\"react\\\"\\nimport { graphql } from \\\"gatsby\\\"\\n\\nclass ClientFetchingExample extends Component {\\n  render() {\\n    return (\\n      <div style={{ textAlign: \\\"center\\\", width: \\\"600px\\\", margin: \\\"50px auto\\\" }}>\\n        <h1>Image of Rick</h1>\\n        <p>This will come from a build time query</p>\\n\\n        <h2>Image of Rick's pupper</h2>\\n        <p>This will come from a request on the client</p>\\n      </div>\\n    )\\n  }\\n}\\n\\nexport default ClientFetchingExample\\n\")), mdx(\"h3\", {\n    \"id\": \"2-query-for-character-info-at-build-time\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#2-query-for-character-info-at-build-time\",\n    \"aria-label\": \"2 query for character info at build time permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"2. Query for character info at build time\"), mdx(\"p\", null, \"To query for Rick\\u2019s character info and image, we\\u2019ll use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-source-graphql\"), \" plugin. This will allow us to query the Rick and Morty API using Gatsby queries.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note: To learn more about using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/packages/gatsby-source-graphql/\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"gatsby-source-graphql\")), \", or about \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/graphql/\"\n  }), \"Gatsby\\u2019s GraphQL data layer\"), \", check out their respective docs. The purpose of including it here is only for comparison.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript:title=gatsby-config.js\"\n  }), \"module.exports = {\\n  plugins: [\\n    {\\n      resolve: \\\"gatsby-source-graphql\\\",\\n      options: {\\n        typeName: \\\"RMAPI\\\",\\n        fieldName: \\\"rickAndMorty\\\",\\n        url: \\\"https://rickandmortyapi-gql.now.sh/\\\",\\n      },\\n    },\\n  ],\\n}\\n\")), mdx(\"p\", null, \"Now we can add the query to our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.js\"), \" page:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=index.js\"\n  }), \"import React, { Component } from \\\"react\\\"\\nimport { graphql } from \\\"gatsby\\\"\\n\\n// highlight-start\\n// This query is executed at build time by Gatsby.\\nexport const GatsbyQuery = graphql`\\n  {\\n    rickAndMorty {\\n      character(id: 1) {\\n        name\\n        image\\n      }\\n    }\\n  }\\n`\\n// highlight-end\\n\\nclass ClientFetchingExample extends Component {\\n  render() {\\n    // highlight-start\\n    const {\\n      rickAndMorty: { character },\\n    } = this.props.data\\n    // highlight-end\\n\\n    return (\\n      <div style={{ textAlign: \\\"center\\\", width: \\\"600px\\\", margin: \\\"50px auto\\\" }}>\\n        // highlight-start\\n        <h1>{character.name} With His Pupper</h1>\\n        <p>Rick & Morty API data loads at build time.</p>\\n        <div>\\n          <img\\n            src={character.image}\\n            alt={character.name}\\n            style={{ width: 300 }}\\n          />\\n        </div>\\n        // highlight-end\\n        <h2>Image of Rick's pupper</h2>\\n        <p>This will come from a request on the client</p>\\n      </div>\\n    )\\n  }\\n}\\n\\nexport default ClientFetchingExample\\n\")), mdx(\"h3\", {\n    \"id\": \"3-fetch-pupper-info-and-image-data-on-the-client\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#3-fetch-pupper-info-and-image-data-on-the-client\",\n    \"aria-label\": \"3 fetch pupper info and image data on the client permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"3. Fetch pupper info and image data on the client\"), mdx(\"p\", null, \"Now we\\u2019ll finish out by fetching pupper info from the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://dog.ceo/dog-api/\"\n  }), \"Dog CEO Dog API\"), \". (We\\u2019ll fetch a random pupper. Rick isn\\u2019t picky.)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=index.js\"\n  }), \"import React, { Component } from \\\"react\\\"\\nimport { graphql } from \\\"gatsby\\\"\\nimport axios from \\\"axios\\\" // highlight-line\\n\\n// This query is executed at build time by Gatsby.\\nexport const GatsbyQuery = graphql`\\n  {\\n    rickAndMorty {\\n      character(id: 1) {\\n        name\\n        image\\n      }\\n    }\\n  }\\n`\\n\\nclass ClientFetchingExample extends Component {\\n  // highlight-start\\n  state = {\\n    loading: false,\\n    error: false,\\n    pupper: {\\n      img: \\\"\\\",\\n      breed: \\\"\\\",\\n    },\\n  }\\n  // highlight-end\\n\\n  // highlight-start\\n  componentDidMount() {\\n    this.fetchRicksPupper()\\n  }\\n  // highlight-end\\n\\n  render() {\\n    const {\\n      rickAndMorty: { character },\\n    } = this.props.data\\n\\n    const { img, breed } = this.state.pupper // highlight-line\\n\\n    return (\\n      <div style={{ textAlign: \\\"center\\\", width: \\\"600px\\\", margin: \\\"50px auto\\\" }}>\\n        <h1>{character.name} With His Pupper</h1>\\n        <p>Rick & Morty API data loads at build time.</p>\\n        <p>Dog API data loads at run time.</p> // highlight-line\\n        <div>\\n          <img\\n            src={character.image}\\n            alt={character.name}\\n            style={{ width: 300 }}\\n          />\\n        </div>\\n         {/* highlight-start */}\\n        <div>\\n          {this.state.loading ? (\\n            <p>Please hold, pupper incoming!</p>\\n          ) : img && breed ? (\\n            <>\\n              <h2>{`${breed} pupper!`}</h2>\\n              <img src={img} alt={`cute random `} style={{ maxWidth: 300 }} />\\n            </>\\n          ) : (\\n            <p>Oh noes, error fetching pupper :(</p>\\n          )}\\n        </div>\\n       </div> {/* highlight-end */}\\n    )\\n  }\\n\\n  // This data is fetched at run time on the client. // highlight-start\\n  fetchRicksPupper = () => {\\n    this.setState({ loading: true })\\n\\n    axios\\n      .get(`https://dog.ceo/api/breeds/image/random`)\\n      .then(pupper => {\\n        const {\\n          data: { message: img },\\n        } = pupper\\n        const breed = img.split(\\\"/\\\")[4]\\n\\n        this.setState({\\n          loading: false,\\n          pupper: {\\n            ...this.state.pupper,\\n            img,\\n            breed,\\n          },\\n        })\\n      })\\n      .catch(error => {\\n        this.setState({ loading: false, error })\\n      })\\n  }\\n} // highlight-end\\n\\nexport default ClientFetchingExample\\n\")), mdx(\"p\", null, \"That\\u2019s it \\u2014 an example of querying for data at build time using the Gatsby GraphQL data layer and dynamically requesting data on the client at run time.\"), mdx(\"h2\", {\n    \"id\": \"other-resources\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#other-resources\",\n    \"aria-label\": \"other resources permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Other resources\"), mdx(\"p\", null, \"You may be interested to check out other projects (both used in production and proof of concepts) that illustrate this usage:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/gatsbyjs/store.gatsbyjs.org\"\n  }), \"Gatsby store\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/DSchau/gatsby-mail\"\n  }), \"Gatsby mail\"))));\n}\n;\nMDXContent.isMDXComponent = true;",
        "excerpt": "Context This article touches on how to fetch data at both  build time  and  run time . It uses the plugin  gatsby-source-graphql  to fetch…",
        "timeToRead": 2,
        "tableOfContents": {
          "items": [
            {
              "url": "#context",
              "title": "Context"
            },
            {
              "url": "#combining-build-time-and-client-run-time-data",
              "title": "Combining build-time and client run-time data",
              "items": [
                {
                  "url": "#1-create-a-gatsby-page-component",
                  "title": "1. Create a Gatsby page component"
                },
                {
                  "url": "#2-query-for-character-info-at-build-time",
                  "title": "2. Query for character info at build time"
                },
                {
                  "url": "#3-fetch-pupper-info-and-image-data-on-the-client",
                  "title": "3. Fetch pupper info and image data on the client"
                }
              ]
            },
            {
              "url": "#other-resources",
              "title": "Other resources"
            }
          ]
        },
        "fields": {
          "slug": "/docs/client-data-fetching/",
          "anchor": "client-data-fetching"
        },
        "frontmatter": {
          "title": "Client Data Fetching",
          "overview": null,
          "issue": null,
          "disableTableOfContents": null,
          "tableOfContentsDepth": null
        },
        "parent": {
          "__typename": "File",
          "relativePath": "docs/client-data-fetching.md"
        }
      }
    },
    "pageContext": {
      "isCreatedByStatefulCreatePages": false,
      "slug": "/docs/client-data-fetching/",
      "prev": {
        "title": "Client-only Routes & User Authentication",
        "link": "/docs/client-only-routes-and-user-authentication/",
        "breadcrumbTitle": "Client Routes & User Auth"
      },
      "next": {
        "title": "Using Client-Side Only Packages",
        "link": "/docs/using-client-side-only-packages/"
      }
    }
  },
  "query": "query usersMisiekDevGatsbyWwwSrcTemplatesTemplateDocsMarkdownJs2546709735(\n  $path: String!\n) {\n  mdx(fields: {slug: {eq: $path}}) {\n    body\n    excerpt\n    timeToRead\n    tableOfContents\n    fields {\n      slug\n      anchor\n    }\n    frontmatter {\n      title\n      overview\n      issue\n      disableTableOfContents\n      tableOfContentsDepth\n    }\n    ...MarkdownPageFooterMdx\n  }\n}\n\nfragment MarkdownPageFooterMdx on Mdx {\n  parent {\n    __typename\n    ... on File {\n      relativePath\n    }\n  }\n}\n"
}