{
  "path": "/docs/querying-with-graphql/",
  "result": {
    "data": {
      "mdx": {
        "body": "function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Querying Data with GraphQL\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"There are many options for loading data into React components. One of the most\\npopular and powerful of these is a technology called\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://graphql.org/\"\n  }), \"GraphQL\"), \".\"), mdx(\"p\", null, \"GraphQL was invented at Facebook to help product engineers \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"pull\"), \" needed data into\\nReact components.\"), mdx(\"p\", null, \"GraphQL is a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"q\"), \"uery \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"l\"), \"anguage (the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"QL\"), \" part of its name). If you\\u2019re\\nfamiliar with SQL, it works in a very similar way. Using a special syntax, you describe\\nthe data you want in your component and then that data is given\\nto you.\"), mdx(\"p\", null, \"Gatsby uses GraphQL to enable \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/building-with-components/\"\n  }), \"page and StaticQuery\\ncomponents\"), \" to declare what data they and their\\nsub-components need. Then, Gatsby makes that data available in\\nthe browser when needed by your components.\"), mdx(\"h2\", {\n    \"id\": \"why-is-graphql-so-cool\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#why-is-graphql-so-cool\",\n    \"aria-label\": \"why is graphql so cool permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Why is GraphQL so cool?\"), mdx(\"p\", null, \"For a more in-depth look, read \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/why-gatsby-uses-graphql/\"\n  }), \"why Gatsby uses GraphQL\"), \".\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Eliminate frontend data boilerplate \\u2014\\xA0no need to worry about requesting & waiting for data. Just ask for the data you need with a GraphQL query and it\\u2019ll show up when you need it\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Push frontend complexity into queries \\u2014 many data transformations can be done at \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"build-time\"), \" within your GraphQL queries\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It\\u2019s the perfect data querying language for the often complex/nested data dependencies of modern applications\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Improve performance by removing data bloat \\u2014 GraphQL enables you to select only the data you need, not whatever an API returns\")), mdx(\"h2\", {\n    \"id\": \"what-does-a-graphql-query-look-like\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#what-does-a-graphql-query-look-like\",\n    \"aria-label\": \"what does a graphql query look like permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"What does a GraphQL query look like?\"), mdx(\"p\", null, \"GraphQL lets you ask for the exact data you need. Queries look like JSON:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"{\\n  site {\\n    siteMetadata {\\n      title\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Which returns this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"site\\\": {\\n    \\\"siteMetadata\\\": {\\n      \\\"title\\\": \\\"A Gatsby site!\\\"\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"A basic page component with a GraphQL query might look like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React from \\\"react\\\"\\nimport { graphql } from \\\"gatsby\\\"\\n\\nexport default ({ data }) => (\\n  <div>\\n    <h1>About {data.site.siteMetadata.title}</h1>\\n    <p>We're a very cool website you should return to often.</p>\\n  </div>\\n)\\n\\nexport const query = graphql`\\n  query {\\n    site {\\n      siteMetadata {\\n        title\\n      }\\n    }\\n  }\\n`\\n\")), mdx(\"p\", null, \"The result of the query is automatically inserted into your React component\\non the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data\"), \" prop. GraphQL and Gatsby let you ask for data and then\\nimmediately start using it.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" To run GraphQL queries in non-page components you\\u2019ll need to use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/static-query/\"\n  }), \"Gatsby\\u2019s Static Query feature\"), \".\"), mdx(\"h2\", {\n    \"id\": \"how-to-learn-graphql\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#how-to-learn-graphql\",\n    \"aria-label\": \"how to learn graphql permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"How to learn GraphQL\"), mdx(\"p\", null, \"Your experience developing with Gatsby might be the first time you\\u2019ve seen GraphQL! We hope you love it as much\\nas we do and find it useful for all your projects.\"), mdx(\"p\", null, \"When starting out with GraphQL, we recommend the following two tutorials:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.howtographql.com/\"\n  }), \"https://www.howtographql.com/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://graphql.org/learn/\"\n  }), \"http://graphql.org/learn/\"))), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/tutorial/part-four/\"\n  }), \"The official Gatsby tutorial\"), \" also includes an introduction to using GraphQL specifically with Gatsby.\"), mdx(\"h2\", {\n    \"id\": \"how-do-graphql-and-gatsby-work-together\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#how-do-graphql-and-gatsby-work-together\",\n    \"aria-label\": \"how do graphql and gatsby work together permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"How do GraphQL and Gatsby work together?\"), mdx(\"p\", null, \"One of the great things about GraphQL is how flexible it is. People use GraphQL\\nwith \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://graphql.org/code/\"\n  }), \"many different programming languages\"), \" and for web and native apps.\"), mdx(\"p\", null, \"Most people run GraphQL on a server to respond live to requests for\\ndata from clients. You define a schema (a schema is a formal way of describing\\nthe shape of your data) for your GraphQL server and then your GraphQL resolvers\\nretrieve data from databases and/or other APIs.\"), mdx(\"p\", null, \"Gatsby uses GraphQL at \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"build-time\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"not\"), \" for live\\nsites. This is unique, and it means you don\\u2019t need to run additional services (e.g. a database\\nand Node.js service) to use GraphQL for production websites.\"), mdx(\"p\", null, \"Gatsby is a great framework for building apps so it\\u2019s possible and encouraged\\nto pair Gatsby\\u2019s native build-time GraphQL with GraphQL queries running against\\na live GraphQL server from the browser.\"), mdx(\"h2\", {\n    \"id\": \"where-does-gatsbys-graphql-schema-come-from\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#where-does-gatsbys-graphql-schema-come-from\",\n    \"aria-label\": \"where does gatsbys graphql schema come from permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Where does Gatsby\\u2019s GraphQL schema come from?\"), mdx(\"p\", null, \"Most usages of GraphQL involve manually creating a GraphQL schema.\"), mdx(\"p\", null, \"With Gatsby, we use plugins which fetch data from different sources. We then use that data\\nto automatically \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"infer\"), \" a GraphQL schema.\"), mdx(\"p\", null, \"If you give Gatsby data that looks like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"title\\\": \\\"A long long time ago\\\"\\n}\\n\")), mdx(\"p\", null, \"Gatsby will create a schema that looks something like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"title: String\\n\")), mdx(\"p\", null, \"This makes it easy to pull data from anywhere and immediately start writing\\nGraphQL queries against your data.\"), mdx(\"p\", null, \"This \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"can\"), \" cause confusion as some data sources allow you to define\\na schema even when there\\u2019s not any data added for parts or all of the schema. If parts of the data haven\\u2019t been added, then those parts of the schema might not be recreated in Gatsby.\"), mdx(\"h2\", {\n    \"id\": \"powerful-data-transformations\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#powerful-data-transformations\",\n    \"aria-label\": \"powerful data transformations permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Powerful data transformations\"), mdx(\"p\", null, \"GraphQL enables another unique feature of Gatsby \\u2014 it lets you control data transformations with arguments to your queries. Some examples follow.\"), mdx(\"h3\", {\n    \"id\": \"formatting-dates\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#formatting-dates\",\n    \"aria-label\": \"formatting dates permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Formatting dates\"), mdx(\"p\", null, \"People often store dates like \\u201C2018-01-05\\u201D but want to display the date in some other form like \\u201CJanuary 5th, 2018\\u201D. One way of doing this is to load a date-formatting JavaScript library into the browser. Or, with Gatsby\\u2019s GraphQL layer, you can do the formatting at query-time like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"{\\n  date(formatString: \\\"MMMM Do, YYYY\\\")\\n}\\n\")), mdx(\"p\", null, \"See the full list of formatting options by viewing our \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/graphql-reference/#dates\"\n  }), \"GraphQL Reference page\"), \".\"), mdx(\"h3\", {\n    \"id\": \"markdown\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#markdown\",\n    \"aria-label\": \"markdown permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Markdown\"), mdx(\"p\", null, \"Gatsby has \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"transformer\"), \" plugins which can transform data from one form to another. A common example is markdown. If you install \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/packages/gatsby-transformer-remark/\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"gatsby-transformer-remark\")), \", then in your queries, you can specify you want the transformed HTML version instead of markdown:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"markdownRemark {\\n  html\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"images\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#images\",\n    \"aria-label\": \"images permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Images\"), mdx(\"p\", null, \"Gatsby has rich support for processing images. Responsive images are a big part of the modern web and typically involve creating 5+ sized thumbnails per photo. With Gatsby\\u2019s \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/packages/gatsby-transformer-sharp/\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"gatsby-transformer-sharp\")), \", you can \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"query\"), \" your images for responsive versions. The query automatically creates all the needed responsive thumbnails and returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"srcSet\"), \" fields to add to your image element.\"), mdx(\"p\", null, \"Combined with a special Gatsby image component, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/packages/gatsby-image/\"\n  }), \"gatsby-image\"), \", you have a very powerful set of primitives for building sites with images.\"), mdx(\"p\", null, \"This is what a component using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-image\"), \" looks like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React from \\\"react\\\"\\nimport Img from \\\"gatsby-image\\\"\\nimport { graphql } from \\\"gatsby\\\"\\n\\nexport default ({ data }) => (\\n  <div>\\n    <h1>Hello gatsby-image</h1>\\n    <Img fixed={data.file.childImageSharp.fixed} />\\n  </div>\\n)\\n\\nexport const query = graphql`\\n  query {\\n    file(relativePath: { eq: \\\"blog/avatars/kyle-mathews.jpeg\\\" }) {\\n      childImageSharp {\\n        # Specify the image processing specifications right in the query.\\n        # Makes it trivial to update as your page's design changes.\\n        fixed(width: 125, height: 125) {\\n          ...GatsbyImageSharpFixed\\n        }\\n      }\\n    }\\n  }\\n`\\n\")), mdx(\"p\", null, \"See also the following blog posts:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/blog/2017-10-16-making-website-building-fun/\"\n  }), \"Making Website Building Fun\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://medium.com/@kyle.robert.gill/ridiculously-easy-image-optimization-with-gatsby-js-59d48e15db6e\"\n  }), \"Image Optimization Made Easy with Gatsby.js\"))), mdx(\"h2\", {\n    \"id\": \"advanced\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#advanced\",\n    \"aria-label\": \"advanced permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Advanced\"), mdx(\"h3\", {\n    \"id\": \"fragments\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#fragments\",\n    \"aria-label\": \"fragments permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Fragments\"), mdx(\"p\", null, \"Notice that in the above example for \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#images\"\n  }), \"querying images\"), \", we used \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"...GatsbyImageSharpFixed\"), \", which is a GraphQL Fragment, a reusable set of fields for query composition. You can read more about them \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://graphql.org/learn/queries/#fragments\"\n  }), \"here\"), \".\"), mdx(\"p\", null, \"If you wish to define your own fragments for use in your application, you can use named exports to export them in any JavaScript file, and they will be automatically processed by Gatsby for use in your GraphQL queries.\"), mdx(\"p\", null, \"For example if I put a fragment in a helper component, I can use that fragment in any other query:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/components/PostItem.js\"\n  }), \"export const markdownFrontmatterFragment = graphql`\\n  fragment MarkdownFrontmatter on MarkdownRemark {\\n    frontmatter {\\n      path\\n      title\\n      date(formatString: \\\"MMMM DD, YYYY\\\")\\n    }\\n  }\\n`\\n\")), mdx(\"p\", null, \"They can then be used in any GraphQL query after that!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"query($path: String!) {\\n  markdownRemark(frontmatter: { path: { eq: $path } }) {\\n    ...MarkdownFrontmatter\\n  }\\n}\\n\")), mdx(\"p\", null, \"It\\u2019s good practice for your helper components to define and export a fragment for the data they need. For example, on your index page might map over all of your posts to show them in a list.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/pages/index.jsx\"\n  }), \"import React from \\\"react\\\"\\nimport { graphql } from \\\"gatsby\\\"\\n\\nexport default ({ data }) => {\\n  return (\\n    <div>\\n      <h1>Index page</h1>\\n      <h4>{data.allMarkdownRemark.totalCount} Posts</h4>\\n      {data.allMarkdownRemark.edges.map(({ node }) => (\\n        <div key={node.id}>\\n          <h3>\\n            {node.frontmatter.title} <span>\\u2014 {node.frontmatter.date}</span>\\n          </h3>\\n        </div>\\n      ))}\\n    </div>\\n  )\\n}\\n\\nexport const query = graphql`\\n  query {\\n    allMarkdownRemark {\\n      totalCount\\n      edges {\\n        node {\\n          id\\n          frontmatter {\\n            title\\n            date(formatString: \\\"DD MMMM, YYYY\\\")\\n          }\\n        }\\n      }\\n    }\\n  }\\n`\\n\")), mdx(\"p\", null, \"If the index component becomes too large, you might want to refactor it into smaller components.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/components/IndexPost.jsx\"\n  }), \"import React from \\\"react\\\"\\nimport { graphql } from \\\"gatsby\\\"\\n\\nexport default ({ frontmatter: { title, date } }) => (\\n  <div>\\n    <h3>\\n      {title} <span>\\u2014 {date}</span>\\n    </h3>\\n  </div>\\n)\\n\\nexport const query = graphql`\\n  fragment IndexPostFragment on MarkdownRemark {\\n    frontmatter {\\n      title\\n      date(formatString: \\\"MMMM DD, YYYY\\\")\\n    }\\n  }\\n`\\n\")), mdx(\"p\", null, \"Now, we can use the component together with the exported fragment in our index page.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/pages/index.jsx\"\n  }), \"import React from \\\"react\\\"\\nimport IndexPost from \\\"../components/IndexPost\\\"\\nimport { graphql } from \\\"gatsby\\\"\\n\\nexport default ({ data }) => {\\n  return (\\n    <div>\\n      <h1>Index page</h1>\\n      <h4>{data.allMarkdownRemark.totalCount} Posts</h4>\\n      {data.allMarkdownRemark.edges.map(({ node }) => (\\n        <div key={node.id}>\\n          <IndexPost frontmatter={node.frontmatter} />\\n        </div>\\n      ))}\\n    </div>\\n  )\\n}\\n\\nexport const query = graphql`\\n  query {\\n    allMarkdownRemark {\\n      totalCount\\n      edges {\\n        node {\\n          ...IndexPostFragment\\n        }\\n      }\\n    }\\n  }\\n`\\n\")), mdx(\"h2\", {\n    \"id\": \"further-reading\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#further-reading\",\n    \"aria-label\": \"further reading permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Further reading\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/docs/why-gatsby-uses-graphql/\"\n  }), \"Why Gatsby Uses GraphQL\"))), mdx(\"h3\", {\n    \"id\": \"getting-started-with-graphql\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#getting-started-with-graphql\",\n    \"aria-label\": \"getting started with graphql permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Getting started with GraphQL\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://graphql.org/learn/\"\n  }), \"http://graphql.org/learn/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.howtographql.com/\"\n  }), \"https://www.howtographql.com/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://reactjs.org/blog/2015/05/01/graphql-introduction.html\"\n  }), \"https://reactjs.org/blog/2015/05/01/graphql-introduction.html\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://services.github.com/on-demand/graphql/\"\n  }), \"https://services.github.com/on-demand/graphql/\"))), mdx(\"h3\", {\n    \"id\": \"advanced-readings-on-graphql\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#advanced-readings-on-graphql\",\n    \"aria-label\": \"advanced readings on graphql permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Advanced readings on GraphQL\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://facebook.github.io/graphql/October2016/\"\n  }), \"GraphQL specification\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://medium.com/the-graphqlhub/graphql-tour-interfaces-and-unions-7dd5be35de0d\"\n  }), \"Interfaces and Unions\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://facebook.github.io/relay/docs/en/compiler-architecture.html\"\n  }), \"Relay Compiler (which Gatsby uses to process queries)\"))));\n}\n;\nMDXContent.isMDXComponent = true;",
        "excerpt": "There are many options for loading data into React components. One of the most\npopular and powerful of these is a technology called\n GraphQL…",
        "timeToRead": 4,
        "tableOfContents": {
          "items": [
            {
              "url": "#why-is-graphql-so-cool",
              "title": "Why is GraphQL so cool?"
            },
            {
              "url": "#what-does-a-graphql-query-look-like",
              "title": "What does a GraphQL query look like?"
            },
            {
              "url": "#how-to-learn-graphql",
              "title": "How to learn GraphQL"
            },
            {
              "url": "#how-do-graphql-and-gatsby-work-together",
              "title": "How do GraphQL and Gatsby work together?"
            },
            {
              "url": "#where-does-gatsbys-graphql-schema-come-from",
              "title": "Where does Gatsby's GraphQL schema come from?"
            },
            {
              "url": "#powerful-data-transformations",
              "title": "Powerful data transformations",
              "items": [
                {
                  "url": "#formatting-dates",
                  "title": "Formatting dates"
                },
                {
                  "url": "#markdown",
                  "title": "Markdown"
                },
                {
                  "url": "#images",
                  "title": "Images"
                }
              ]
            },
            {
              "url": "#advanced",
              "title": "Advanced",
              "items": [
                {
                  "url": "#fragments",
                  "title": "Fragments"
                }
              ]
            },
            {
              "url": "#further-reading",
              "title": "Further reading",
              "items": [
                {
                  "url": "#getting-started-with-graphql",
                  "title": "Getting started with GraphQL"
                },
                {
                  "url": "#advanced-readings-on-graphql",
                  "title": "Advanced readings on GraphQL"
                }
              ]
            }
          ]
        },
        "fields": {
          "slug": "/docs/querying-with-graphql/",
          "anchor": "querying-with-graphql"
        },
        "frontmatter": {
          "title": "Querying Data with GraphQL",
          "overview": null,
          "issue": null,
          "disableTableOfContents": null,
          "tableOfContentsDepth": null
        },
        "parent": {
          "__typename": "File",
          "relativePath": "docs/querying-with-graphql.md"
        }
      }
    },
    "pageContext": {
      "isCreatedByStatefulCreatePages": false,
      "slug": "/docs/querying-with-graphql/",
      "prev": {
        "title": "PRPL Pattern",
        "link": "/docs/prpl-pattern/"
      },
      "next": {
        "title": "Security in Gatsby*",
        "link": "/docs/security-in-gatsby/"
      }
    }
  },
  "query": "query usersMisiekDevGatsbyWwwSrcTemplatesTemplateDocsMarkdownJs2546709735(\n  $path: String!\n) {\n  mdx(fields: {slug: {eq: $path}}) {\n    body\n    excerpt\n    timeToRead\n    tableOfContents\n    fields {\n      slug\n      anchor\n    }\n    frontmatter {\n      title\n      overview\n      issue\n      disableTableOfContents\n      tableOfContentsDepth\n    }\n    ...MarkdownPageFooterMdx\n  }\n}\n\nfragment MarkdownPageFooterMdx on Mdx {\n  parent {\n    __typename\n    ... on File {\n      relativePath\n    }\n  }\n}\n"
}