{
  "path": "/docs/node-creation/",
  "result": {
    "data": {
      "mdx": {
        "body": "function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Node Creation\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Nodes are created by calling the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/actions/#createNode\"\n  }), \"createNode\"), \" action. Nodes can be any object.\"), mdx(\"p\", null, \"A node is stored in redux under the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nodes\"), \" namespace, whose state is a map of the node ID to the actual node object.\"), mdx(\"h2\", {\n    \"id\": \"sourcing-nodes\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#sourcing-nodes\",\n    \"aria-label\": \"sourcing nodes permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Sourcing Nodes\"), mdx(\"p\", null, \"The creation of nodes occurs primarily in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/node-apis/#sourceNodes\"\n  }), \"sourceNodes\"), \" bootstrap phase. Nodes created during this phase are top level nodes. I.e, they have no parent. This is represented by source plugins setting the node\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"parent\"), \" field to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \". Nodes created via transform plugins (who implement \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/node-apis/#onCreateNode\"\n  }), \"onCreateNode\"), \") will have source nodes as their parents, or other transformed nodes. For a rough overview of what happens when source nodes run, see the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/how-plugins-apis-are-run/#using-traceid-to-await-downstream-api-calls\"\n  }), \"traceID illustration\"), \".\"), mdx(\"h2\", {\n    \"id\": \"parentchildrefs\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#parentchildrefs\",\n    \"aria-label\": \"parentchildrefs permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Parent/Child/Refs\"), mdx(\"p\", null, \"There are a few different scenarios for creating parent/child relationships.\"), mdx(\"h3\", {\n    \"id\": \"node-relationship-storage-model\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#node-relationship-storage-model\",\n    \"aria-label\": \"node relationship storage model permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Node relationship storage model\"), mdx(\"p\", null, \"All nodes in Gatsby are stored in a flat structure in the redux \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nodes\"), \" namespace. A node\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"children\"), \" field is an array of node IDS, whose nodes are also at the top level of the redux namespace. Here\\u2019s an example of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nodes\"), \" namespace.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"{\\n  `id1`: { type: `File`, children: [`id2`, `id3`], ...other_fields },\\n  `id2`: { type: `markdownRemark`, ...other_fields },\\n  `id3`: { type: `postsJson`, ...other_fields }\\n}\\n\")), mdx(\"p\", null, \"An important note here is that we do not store a distinct collection of each type of child. Rather we store a single collection that they\\u2019re all packed into. This has some implications on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/schema-gql-type/#child-fields-creation\"\n  }), \"child field inference\"), \" in the Schema Generation phase.\"), mdx(\"h3\", {\n    \"id\": \"explicitly-recording-a-parentchild-relationship\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#explicitly-recording-a-parentchild-relationship\",\n    \"aria-label\": \"explicitly recording a parentchild relationship permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Explicitly recording a parent/child relationship\"), mdx(\"p\", null, \"This occurs when a transformer plugin implements \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/node-apis/#onCreateNode\"\n  }), \"onCreateNode\"), \" in order to create some child of the originally created node. In this case, the transformer plugin will call \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/actions/#createParentChildLink\"\n  }), \"createParentChildLink\"), \", with the original node, and the newly created node. All this does is push the child\\u2019s node ID onto the parent\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"children\"), \" collection and resave the parent to redux.\"), mdx(\"p\", null, \"This does \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"not\"), \" automatically create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"parent\"), \" field on the child node. If a plugin author wishes to allow child nodes to navigate to their parents in GraphQL queries, they must explicitly set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"childNode.parent: 'parent.id'\"), \" when creating the child node.\"), mdx(\"h3\", {\n    \"id\": \"foreign-key-reference-___node\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#foreign-key-reference-___node\",\n    \"aria-label\": \"foreign key reference ___node permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Foreign Key reference (\", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"___NODE\"), \")\"), mdx(\"p\", null, \"We\\u2019ve established that child nodes are stored at the top level in redux, and are referenced via ids in their parent\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"children\"), \" collection. The same mechanism drives foreign key relationships. Foreign key fields have a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"___NODE\"), \" suffix on the field name. At query time, Gatsby will take the field\\u2019s value as an ID, and search redux for a matching node. This is explained in more detail in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/schema-gql-type#foreign-key-reference-___node\"\n  }), \"schema gqlTypes\"), \".\"), mdx(\"h3\", {\n    \"id\": \"plain-objects-at-creation-time\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#plain-objects-at-creation-time\",\n    \"aria-label\": \"plain objects at creation time permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Plain objects at creation time\"), mdx(\"p\", null, \"Let\\u2019s say you create the following node by passing it to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createNode\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"{\\n  foo: 'bar',\\n  baz: {\\n    car: 10\\n  }\\n}\\n\")), mdx(\"p\", null, \"The value for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"baz\"), \" is itself an object. That value\\u2019s parent is the top level object. In this case, Gatsby simply saves the top level node as is to redux. It doesn\\u2019t attempt to extract \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"baz\"), \" into its own node. It does however track the subobject\\u2019s root NodeID using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/node-tracking/\"\n  }), \"Node Tracking\")), mdx(\"p\", null, \"During schema compilation, Gatsby will infer the sub object\\u2019s type while \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/schema-gql-type#plain-object-or-value-field\"\n  }), \"creating the gqlType\"), \".\"), mdx(\"h2\", {\n    \"id\": \"freshstale-nodes\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#freshstale-nodes\",\n    \"aria-label\": \"freshstale nodes permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Fresh/stale nodes\"), mdx(\"p\", null, \"Every time a build is re-run, there is a chance that a node that exists in the redux store no longer exists in the original data source. E.g a file might be deleted from disk between runs. We need a way to indicate that fact to Gatsby.\"), mdx(\"p\", null, \"To track this, there is a redux \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nodesTouched\"), \" namespace that tracks whether a particular node ID has been touched. This occurs whenever a node is created (handled by \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/redux/reducers/nodes-touched.js\"\n  }), \"CREATE_NODE\"), \"), or an explicit call to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/actions/#touchNode\"\n  }), \"touchNode\"), \".\"), mdx(\"p\", null, \"When a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"source-nodes\"), \" plugin runs again, it generally recreates nodes (which automatically touches them too). But in some cases, such as \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/src/gatsby-node.js#L56\"\n  }), \"transformer-screenshot\"), \", a node might not change, but we still want to keep it around for the build. In these cases, we must explicitly call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"touchNode\"), \".\"), mdx(\"p\", null, \"Any nodes that aren\\u2019t touched by the end of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"source-nodes\"), \" phase, are deleted. This is performed via a diff between the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nodesTouched\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nodes\"), \" redux namespaces, in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/utils/source-nodes.js\"\n  }), \"source-nodes.js\")), mdx(\"h2\", {\n    \"id\": \"changing-a-nodes-fields\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#changing-a-nodes-fields\",\n    \"aria-label\": \"changing a nodes fields permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Changing a node\\u2019s fields\"), mdx(\"p\", null, \"From a site developer\\u2019s point of view, nodes are immutable. In the sense that if you simply change a node object, those changes will not be seen by other parts of Gatsby. To make a change to a node, it must be persisted to redux via an action.\"), mdx(\"p\", null, \"So, how do you add a field to an existing node? E.g perhaps in onCreateNode, you want to add a transformer specific field? You can call \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/actions/#createNodeField\"\n  }), \"createNodeField\"), \" and this will simply add your field to the node\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node.fields\"), \" object and then persists it to redux. This can then be referenced by other parts of your plugin at later stages of the build.\"), mdx(\"h2\", {\n    \"id\": \"node-tracking\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#node-tracking\",\n    \"aria-label\": \"node tracking permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Node Tracking\"), mdx(\"p\", null, \"When a node is created, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createNode\"), \" will track all its fields against its nodeId. See \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/node-tracking/\"\n  }), \"Node Tracking Docs\"), \" for more.\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "excerpt": "Nodes are created by calling the  createNode  action. Nodes can be any object. A node is stored in redux under the  nodes  namespace, whose…",
        "timeToRead": 3,
        "tableOfContents": {
          "items": [
            {
              "url": "#sourcing-nodes",
              "title": "Sourcing Nodes"
            },
            {
              "url": "#parentchildrefs",
              "title": "Parent/Child/Refs",
              "items": [
                {
                  "url": "#node-relationship-storage-model",
                  "title": "Node relationship storage model"
                },
                {
                  "url": "#explicitly-recording-a-parentchild-relationship",
                  "title": "Explicitly recording a parent/child relationship"
                },
                {
                  "url": "#foreign-key-reference-___node",
                  "title": "Foreign Key reference (___NODE)"
                },
                {
                  "url": "#plain-objects-at-creation-time",
                  "title": "Plain objects at creation time"
                }
              ]
            },
            {
              "url": "#freshstale-nodes",
              "title": "Fresh/stale nodes"
            },
            {
              "url": "#changing-a-nodes-fields",
              "title": "Changing a node's fields"
            },
            {
              "url": "#node-tracking",
              "title": "Node Tracking"
            }
          ]
        },
        "fields": {
          "slug": "/docs/node-creation/",
          "anchor": "node-creation"
        },
        "frontmatter": {
          "title": "Node Creation",
          "overview": null,
          "issue": null,
          "disableTableOfContents": null,
          "tableOfContentsDepth": null
        },
        "parent": {
          "__typename": "File",
          "relativePath": "docs/node-creation.md"
        }
      }
    },
    "pageContext": {
      "isCreatedByStatefulCreatePages": false,
      "slug": "/docs/node-creation/",
      "prev": {
        "title": "How APIs/Plugins Are Run",
        "link": "/docs/how-plugins-apis-are-run/"
      },
      "next": {
        "title": "Schema Generation",
        "link": "/docs/schema-generation/"
      }
    }
  },
  "query": "query usersMisiekDevGatsbyWwwSrcTemplatesTemplateDocsMarkdownJs2546709735(\n  $path: String!\n) {\n  mdx(fields: {slug: {eq: $path}}) {\n    body\n    excerpt\n    timeToRead\n    tableOfContents\n    fields {\n      slug\n      anchor\n    }\n    frontmatter {\n      title\n      overview\n      issue\n      disableTableOfContents\n      tableOfContentsDepth\n    }\n    ...MarkdownPageFooterMdx\n  }\n}\n\nfragment MarkdownPageFooterMdx on Mdx {\n  parent {\n    __typename\n    ... on File {\n      relativePath\n    }\n  }\n}\n"
}