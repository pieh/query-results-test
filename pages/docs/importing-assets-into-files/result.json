{
  "path": "/docs/importing-assets-into-files/",
  "result": {
    "data": {
      "mdx": {
        "body": "function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Importing Assets Directly Into Files\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"There are two major ways to import assets, such as images, fonts, and files, into a Gatsby site. The default path is to import the file directly into a Gatsby template, page, or component. The alternative path, which makes sense for some edge cases, is to use the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/static-folder\"\n  }), \"static folder\"), \".\"), mdx(\"h2\", {\n    \"id\": \"importing-assets-with-webpack\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#importing-assets-with-webpack\",\n    \"aria-label\": \"importing assets with webpack permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Importing assets with Webpack\"), mdx(\"p\", null, \"With Webpack you can \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"import\"), \" a file right in a JavaScript module\"), \". This tells Webpack to include that file in the bundle. Unlike CSS imports, importing a file gives you a string value. This imported file\\u2019s value is the final path you can reference in your code, e.g. as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src\"), \" attribute of an image or the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"href\"), \" of a link to a PDF.\"), mdx(\"p\", null, \"To reduce the number of requests to the server, importing images that are less than 10,000 bytes returns a\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\"\n  }), \"data URI\"), \" instead of a path. This applies to the following file extensions: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"svg\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jpg\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jpeg\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"png\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gif\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mp4\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"webm\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"wav\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mp3\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"m4a\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aac\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"oga\"), \".\"), mdx(\"p\", null, \"Here\\u2019s an example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from \\\"react\\\"\\nimport logo from \\\"./logo.png\\\" // Tell Webpack this JS file uses this image\\n\\nconsole.log(logo) // /logo.84287d09.png\\n\\nfunction Header() {\\n  // Import result is the URL of your image\\n  return <img src={logo} alt=\\\"Logo\\\" />\\n}\\n\\nexport default Header\\n\")), mdx(\"p\", null, \"This ensures that when the project is built, Webpack will correctly move the images into the public folder, and provide us with correct paths.\"), mdx(\"p\", null, \"You can reference files in CSS to import them, too:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \".Logo {\\n  background-image: url(./logo.png);\\n}\\n\")), mdx(\"p\", null, \"Webpack finds all relative module references in CSS (they start with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./\"), \") and replaces them with the final paths from the compiled bundle. If you make a typo or accidentally delete an important file, you will see a compilation error, just like when you import a non-existent JavaScript module. The final filenames in the compiled bundle are generated by Webpack from content hashes. If the file content changes in the future, Webpack will give it a different name in production so you don\\u2019t need to worry about long-term caching of assets.\"), mdx(\"p\", null, \"If you\\u2019re using SCSS the imports are relative to the entry SCSS file.\"), mdx(\"p\", null, \"Please be advised that this is also a custom feature of Webpack.\"), mdx(\"h2\", {\n    \"id\": \"querying-for-a-file-in-graphql-using-gatsby-source-filesystem\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#querying-for-a-file-in-graphql-using-gatsby-source-filesystem\",\n    \"aria-label\": \"querying for a file in graphql using gatsby source filesystem permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Querying for a \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"File\"), \" in GraphQL using gatsby-source-filesystem\"), mdx(\"p\", null, \"You can also import files using GraphQL by querying for them in your data layer, which will trigger copying of those files to the public directory. Querying for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"publicURL\"), \" field of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"File\"), \" nodes will provide URLs you can use in your JavaScript components, pages and templates.\"), mdx(\"h3\", {\n    \"id\": \"examples\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#examples\",\n    \"aria-label\": \"examples permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Examples:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Copy all \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".pdf\"), \" files you have in your data layer to your build directory and return URLs to them:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"{\\n  allFile(filter: { extension: { eq: \\\"pdf\\\" } }) {\\n    edges {\\n      node {\\n        publicURL\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Reference those PDF files in a page with useStaticQuery:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React from \\\"react\\\"\\nimport { useStaticQuery, graphql } from \\\"gatsby\\\"\\n\\nimport Layout from \\\"../components/layout\\\"\\n\\nconst DownloadsPage = () => {\\n  const data = useStaticQuery(graphql`\\n    {\\n      allFile(filter: { extension: { eq: \\\"pdf\\\" } }) {\\n        edges {\\n          node {\\n            publicURL\\n            name\\n          }\\n        }\\n      }\\n    }\\n  `)\\n  return (\\n    <Layout>\\n      <h1>All PDF Downloads</h1>\\n      <ul>\\n        {data.allFile.edges.map((file, index) => {\\n          return (\\n            <li key={`pdf-${index}`}>\\n              <a href={file.node.publicURL} download>\\n                {file.node.name}\\n              </a>\\n            </li>\\n          )\\n        })}\\n      </ul>\\n    </Layout>\\n  )\\n}\\nexport default DownloadsPage\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Link to attachments in the frontmatter of your Markdown files:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-markdown\"\n  }), \"---\\ntitle: \\\"Title of article\\\"\\nattachments:\\n  - \\\"./assets.zip\\\"\\n  - \\\"./presentation.pdf\\\"\\n---\\n\\nHi, this is a great article.\\n\")), mdx(\"p\", null, \"In an article template component file, you can then query for the attachments:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"query($slug: String!) {\\n  markdownRemark(fields: { slug: { eq: $slug } }) {\\n    html\\n    frontmatter {\\n      title\\n      attachments {\\n        publicURL\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Read more about querying for files in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/packages/gatsby-source-filesystem/\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"gatsby-source-filesystem\")), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "excerpt": "There are two major ways to import assets, such as images, fonts, and files, into a Gatsby site. The default path is to import the file…",
        "timeToRead": 2,
        "tableOfContents": {
          "items": [
            {
              "url": "#importing-assets-with-webpack",
              "title": "Importing assets with Webpack"
            },
            {
              "url": "#querying-for-a-file-in-graphql-using-gatsby-source-filesystem",
              "title": "Querying for a File in GraphQL using gatsby-source-filesystem",
              "items": [
                {
                  "url": "#examples",
                  "title": "Examples:"
                }
              ]
            }
          ]
        },
        "fields": {
          "slug": "/docs/importing-assets-into-files/",
          "anchor": "importing-assets-into-files"
        },
        "frontmatter": {
          "title": "Importing Assets Directly Into Files",
          "overview": null,
          "issue": null,
          "disableTableOfContents": null,
          "tableOfContentsDepth": null
        },
        "parent": {
          "__typename": "File",
          "relativePath": "docs/importing-assets-into-files.md"
        }
      }
    },
    "pageContext": {
      "isCreatedByStatefulCreatePages": false,
      "slug": "/docs/importing-assets-into-files/",
      "prev": {
        "title": "Images, Files, and Video",
        "link": "/docs/images-and-files/"
      },
      "next": {
        "title": "Using the Static Folder",
        "link": "/docs/static-folder/"
      }
    }
  },
  "query": "query usersMisiekDevGatsbyWwwSrcTemplatesTemplateDocsMarkdownJs2546709735(\n  $path: String!\n) {\n  mdx(fields: {slug: {eq: $path}}) {\n    body\n    excerpt\n    timeToRead\n    tableOfContents\n    fields {\n      slug\n      anchor\n    }\n    frontmatter {\n      title\n      overview\n      issue\n      disableTableOfContents\n      tableOfContentsDepth\n    }\n    ...MarkdownPageFooterMdx\n  }\n}\n\nfragment MarkdownPageFooterMdx on Mdx {\n  parent {\n    __typename\n    ... on File {\n      relativePath\n    }\n  }\n}\n"
}