{
  "path": "/blog/2019-08-27-roll-your-own-comment-system/",
  "result": {
    "data": {
      "mdx": {
        "body": "function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Roll Your Own Comment System\",\n  \"date\": \"2019-08-27T00:00:00.000Z\",\n  \"author\": \"Tania Rascia\",\n  \"excerpt\": \"I wanted a simple, custom, ad-free solution to comments on my Gatsby blog, so I designed my own. Here's how I did it!\",\n  \"tags\": [\"comments\", \"apis\"],\n  \"canonicalLink\": \"https://www.taniarascia.com/add-comments-to-static-site/\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A while ago, I \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/blog/2019-03-21-migrating-from-wordpress-to-gatsby/\"\n  }), \"migrated my site from WordPress to Gatsby\"), \", a static site generator that runs on JavaScript/React. Gatsby \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/adding-comments/\"\n  }), \"recommends Disqus\"), \" as a possible option for comments, and I briefly migrated all my comments over to it\\u2026until I looked at my site on a browser window without adblocker installed. I could see dozens of scripts injected into the site and even worse - truly egregious buzzfeed-esque ads embedded between all the comments. I decided it immediately had to go.\"), mdx(\"p\", null, \"I had no comments for a bit, but I felt like I had no idea what the reception of my articles was without having any place for people to leave comments. Occasionally people will leave useful critiques or tips on tutorials that can help future visitors as well, so I wanted to try adding something very simple back in.\"), mdx(\"p\", null, \"I looked at all the options, but I really didn\\u2019t want to invest in setting up some third party code that I couldn\\u2019t rely on, or something with ads. So I figured I\\u2019d set one up myself. I designed the simplest possible comment system in a day, which this blog now runs on.\"), mdx(\"p\", null, \"Here\\u2019s some pros and cons to rolling your own comment system:\"), mdx(\"h4\", {\n    \"id\": \"pros\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#pros\",\n    \"aria-label\": \"pros permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Pros\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Free\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"No ads\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"No third party scripts injected into your site\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Complete control over functionality and design\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Can be as simple or complicated as you want\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Little to no spam because spambots aren\\u2019t set up to spam your custom content\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Easy to migrate - it all exists in one Heroku + Postgres server\")), mdx(\"h4\", {\n    \"id\": \"cons\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#cons\",\n    \"aria-label\": \"cons permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Cons\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"More work to set up\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Less features\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Need to set up manual anti-spam measures and moderation\")), mdx(\"p\", null, \"If you\\u2019ve also struggled with this and wondered if there could be an easier way, or are just intrigued to see one person\\u2019s implementation, read on!\"), mdx(\"h2\", {\n    \"id\": \"introduction\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#introduction\",\n    \"aria-label\": \"introduction permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Introduction\"), mdx(\"p\", null, \"This guide will \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"not\"), \" be a full, guided walkthrough - however, all the steps to create this are documented from start to finish in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.taniarascia.com/node-express-postgresql-heroku/\"\n  }), \"Create and Deploy a Node.js, Express, & PostgreSQL REST API to Heroku\"), \". The comments API is a Node + Express server connected to a Postgres instance hosted for free on the hobby tier of Heroku (Hopefully I don\\u2019t go over the 10,000 row limit any time soon). A combination of that article and what I\\u2019ve documented here can get you all the way to having your own comment system.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note: Comments overall aren\\u2019t a big deal to me, so I don\\u2019t care if I\\u2019m just running some little hobby API I created, or if it goes down for any reason. I think it should be pretty solid, but obviously if your needs are more professional than mine, you should go ahead and buy Disqus or something.\")), mdx(\"p\", null, \"The comments API consists of three parts:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#database\"\n  }), \"Database\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#api\"\n  }), \"API Server\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#front-end\"\n  }), \"Front End\"))), mdx(\"p\", null, \"The front end is written for React, but if you know how to make a form and an API call, it can be easily adjusted to whatever static system you\\u2019re using.\"), mdx(\"h2\", {\n    \"id\": \"database\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#database\",\n    \"aria-label\": \"database permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Database\"), mdx(\"p\", null, \"The first step assumes we\\u2019ll be setting up a Postgres database called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"comments_api\"), \" with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"comments\"), \" table.\"), mdx(\"p\", null, \"In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"comments_api\"), \" database, I created a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"comments\"), \" table, with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ID\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"date\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"text\"), \". The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"slug\"), \" refers to the article URL - so for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"https://example.com/how-to-bake-a-cake\"), \", the slug would be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"how-to-bake-a-cake\"), \". Finally, I added \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"parent_comment_id\"), \" in case you want to have the ability to reply to comments.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sql\"\n  }), \"CREATE DATABASE comments_api;\\n\\n\\\\c comments;\\n\\nCREATE TABLE comments (\\n  ID SERIAL PRIMARY KEY,\\n  name VARCHAR(255) NOT NULL,\\n  date TIMESTAMPTZ DEFAULT Now(),\\n  slug VARCHAR(255) NOT NULL,\\n  parent_comment_id INTEGER,\\n  text VARCHAR(5000) NOT NULL\\n);\\n\\nINSERT INTO\\n  comments (name, text, slug, parent_comment_id)\\nVALUES\\n  ('Bogus', 'Testing the comments API', 'how-to-bake-a-cake', null);\\n\")), mdx(\"p\", null, \"You could probably get more fancy with it and add website, email, upvotes and other features, but I just wanted it to be simple. I\\u2019m not adding in any login or 0Auth/user authentication either, which makes it even more simple, but comes with the drawbacks of an anonymous online system.\"), mdx(\"h2\", {\n    \"id\": \"api\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#api\",\n    \"aria-label\": \"api permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"API\"), mdx(\"p\", null, \"In \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.taniarascia.com/node-express-postgresql-heroku/\"\n  }), \"Create and Deploy a Node.js, Express, & PostgreSQL REST API\"), \", I document how to set up an Express server and make a Postgres pool connection.\"), mdx(\"p\", null, \"The aforementioned article goes much deeper into production level concerns of a Node.js server, such as error handling, validation, and brute force rate limiting.\"), mdx(\"p\", null, \"In our simplified, development example setup, we\\u2019ll require \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"express\"), \", a Node.js server, plus \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bodyParser\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cors\"), \" to allow our app to parse and request the data, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pg\"), \" to create a Postgres pool connection.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"This article is using default values for the Postgres connection - \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user\"), \" as username, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"password\"), \" as password, etc.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const express = require(\\\"express\\\")\\nconst bodyParser = require(\\\"body-parser\\\")\\nconst cors = require(\\\"cors\\\")\\nconst { Pool } = require(\\\"pg\\\")\\nconst connectionString = `postgresql://user:password@localhost:5432/comments`\\n\\nconst pool = new Pool({ connectionString })\\n\\nconst app = express()\\n\\napp.use(bodyParser.json())\\napp.use(bodyParser.urlencoded({ extended: true }))\\napp.use(cors())\\n\\n// These are the functions we will be creating\\nconst getComments = () => {}\\nconst getCommentsBySlug = () => {}\\nconst createComment = () => {}\\nconst updateComment = () => {}\\nconst deleteComment = () => {}\\n\\napp.get(\\\"/comments\\\", getComments)\\napp.get(\\\"/comments/:slug\\\", getCommentsBySlug)\\napp.post(\\\"/comments\\\", createComment)\\napp.put(\\\"/comments/:id\\\", updateComment)\\napp.delete(\\\"/comments/:id\\\", deleteComment)\\n\\n// Start server\\napp.listen(3002, () => {\\n  console.log(`Server listening`)\\n})\\n\")), mdx(\"p\", null, \"Remember that this example is simply for demonstration purposes and development.\"), mdx(\"h3\", {\n    \"id\": \"get-all-comments\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#get-all-comments\",\n    \"aria-label\": \"get all comments permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Get all comments\"), mdx(\"p\", null, \"First, I want a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET\"), \" query that will just return everything to Node.js, ordered by date. This is just for me to have, so I can easily review all comments.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const getComments = (request, response) => {\\n  pool.query(\\\"SELECT * FROM comments ORDER BY date DESC\\\", (error, results) => {\\n    if (error) {\\n      throw error\\n    }\\n    response.status(200).json(results.rows)\\n  })\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"get-comments-by-page-slug\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#get-comments-by-page-slug\",\n    \"aria-label\": \"get comments by page slug permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Get comments by page slug\"), mdx(\"p\", null, \"More importantly, I want a query that will only return the comments that match the current page\\u2019s slug. This is the query I\\u2019ll use for each article.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const getCommentsBySlug = (request, response) => {\\n  const slug = request.params.slug\\n\\n  pool.query(\\n    \\\"SELECT * FROM comments WHERE slug = $1 ORDER BY date DESC\\\",\\n    [slug],\\n    (error, results) => {\\n      if (error) {\\n        throw error\\n      }\\n      response.status(200).json(results.rows)\\n    }\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"create-a-comment\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#create-a-comment\",\n    \"aria-label\": \"create a comment permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Create a comment\"), mdx(\"p\", null, \"Add the ability to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"POST\"), \" a new comment, which people will be able to do through the HTML form.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const createComment = (request, response) => {\\n  const { name, slug, text } = request.body\\n  const parentCommentId = parseInt(request.body.parentCommentId)\\n\\n  pool.query(\\n    \\\"INSERT INTO comments (name, slug, text, parent_comment_id) VALUES ($1, $2, $3, $4)\\\",\\n    [name, slug, text, parentCommentId],\\n    error => {\\n      if (error) {\\n        throw error\\n      }\\n      response\\n        .status(201)\\n        .json({ status: \\\"success\\\", message: \\\"New comment added.\\\" })\\n    }\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"update-an-existing-comment\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#update-an-existing-comment\",\n    \"aria-label\": \"update an existing comment permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Update an existing comment\"), mdx(\"p\", null, \"As moderator, I want the ability to update an existing comment. Commentors won\\u2019t be able to edit their comments, because they\\u2019re all anonymous. This will be a protected endpoint.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const updateComment = (request, response) => {\\n  const { name, slug, text } = request.body\\n  const id = parseInt(request.params.id)\\n  const parentCommentId = parseInt(request.body.parentCommentId)\\n\\n  pool.query(\\n    \\\"UPDATE comments SET name = $1, slug = $2, text = $3, parent_comment_id = $4 WHERE id = $5\\\",\\n    [name, slug, text, parentCommentId, id],\\n    error => {\\n      if (error) {\\n        throw error\\n      }\\n      response\\n        .status(200)\\n        .json({ status: \\\"success\\\", message: `Comment modified with ID: ${id}` })\\n    }\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"delete-a-comment\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#delete-a-comment\",\n    \"aria-label\": \"delete a comment permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Delete a comment\"), mdx(\"p\", null, \"Another protected endpoint, only I will have the ability to delete a comment.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const deleteComment = (request, response) => {\\n  const id = parseInt(request.params.id)\\n\\n  pool.query(\\\"DELETE FROM comments WHERE id = $1\\\", [id], error => {\\n    if (error) {\\n      throw error\\n    }\\n    response\\n      .status(200)\\n      .json({ status: \\\"success\\\", message: `Comment deleted with ID: ${id}` })\\n  })\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"putting-it-together\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#putting-it-together\",\n    \"aria-label\": \"putting it together permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Putting it together\"), mdx(\"p\", null, \"We have our two \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET\"), \"s, a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"POST\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PUT\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DELETE\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"app.get(\\\"/comments\\\", getComments)\\napp.get(\\\"/comments/:slug\\\", getCommentsBySlug)\\napp.post(\\\"/comments\\\", createComment)\\napp.put(\\\"/comments/:id\\\", updateComment)\\napp.delete(\\\"/comments/:id\\\", deleteComment)\\n\")), mdx(\"h2\", {\n    \"id\": \"front-end\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#front-end\",\n    \"aria-label\": \"front end permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Front End\"), mdx(\"p\", null, \"Again, for the front end I\\u2019m using React as an example, but the concept is the same for any template system. In whatever your post template file is, use JavaScript to make a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fetch\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"axios\"), \" call to your comment API, and save the data in state somewhere. Once I retrieve the JSON response from the API server, which will be an array of comment objects, I can pass it to wherever I\\u2019m displaying the comments.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Sorry, I\\u2019m not using hooks yet. It\\u2019s okay, deep breath. We\\u2019ll get through this.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=templates/post.js\"\n  }), \"class PostTemplate {\\n  ...\\n  async componentDidMount() {\\n    const { slug } = this.props.pageContext\\n\\n    try {\\n      const response = await fetch(`https://www.example.com/comments/${slug}`)\\n      const comments = await response.json()\\n\\n      this.setState({ comments })\\n    } catch (error) {\\n      this.setState({ error: true })\\n    }\\n  }\\n\")), mdx(\"p\", null, \"In this case, that will be a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Comments\"), \" component.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=templates/post.js\"\n  }), \"render() {\\n  return (\\n    <div>\\n      {!error && <Comments commentsList={comments} slug={slug} />}\\n    </div>\\n  )\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Comments\"), \" component will contain both the form to submit a comment, and the list of existing comments if there are any. So in state, I\\u2019ll save the comments list, and an object to store new comment state for the form.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=components/comments.js\"\n  }), \"import React, { Component } from \\\"react\\\"\\nimport moment from \\\"moment\\\"\\n\\nclass Comments extends Component {\\n  // You'll need a constructor() here if you're not using Babel transform-class-properties\\n  initialState = {\\n    comments: this.props.commentsList || [],\\n    newComment: {\\n      name: \\\"\\\",\\n      text: \\\"\\\",\\n      slug: this.props.slug,\\n      parentCommentId: null,\\n    },\\n    submitting: false,\\n    success: false,\\n    error: false,\\n  }\\n\\n  state = this.initialState\\n}\\n\")), mdx(\"p\", null, \"I\\u2019ll admit this code is not the most pristine I\\u2019ve ever seen, but as I mentioned, I wrote the thing in a day, so feel free to refactor and write however you want.\"), mdx(\"p\", null, \"When a comment is submitted, I\\u2019ll use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fetch\"), \" once again, this time with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"post\"), \" method. If everything went through correctly, append the new comment to the comments array, and reset the new comment.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=components/comments.js\"\n  }), \"onSubmitComment = async event => {\\n  event.preventDefault()\\n\\n  // Set this so the button can't be pressed repeatedly\\n  this.setState({ submitting: true })\\n\\n  const { newComment, comments } = this.state\\n  const { slug } = this.props\\n\\n  try {\\n    // POST to /comments\\n    const response = await fetch(\\\"https://www.example.com/comments\\\", {\\n      headers: {\\n        Accept: \\\"application/json\\\",\\n        \\\"Content-Type\\\": \\\"application/json\\\",\\n      },\\n      method: \\\"post\\\",\\n      body: JSON.stringify(newComment),\\n    })\\n\\n    // Append comment and reset newComment\\n    this.setState(prevState => ({\\n      ...prevState,\\n      comments: [newComment, ...comments],\\n      newComment: {\\n        name: \\\"\\\",\\n        text: \\\"\\\",\\n        slug,\\n        parentCommentId: null,\\n      },\\n      success: true,\\n      error: false,\\n    }))\\n  } catch (error) {\\n    this.setState({ ...this.initialState, error: true })\\n  }\\n}\\n\")), mdx(\"p\", null, \"I\\u2019ll also have an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" handler for the form.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=components/comments.js\"\n  }), \"handleChange = event => {\\n  const { newComment } = this.state\\n  const { name, value } = event.target\\n\\n  this.setState({\\n    newComment: { ...newComment, [name]: value },\\n  })\\n}\\n\")), mdx(\"p\", null, \"We can start the render lifecycle now.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=components/comments.js\"\n  }), \"render() {\\n  const { submitting, success, error, comments, newComment: { name, text } } = this.state\\n\")), mdx(\"p\", null, \"I made some simple error or success messages to show after submnitting the form.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=components/comments.js\"\n  }), \"const showError = () =>\\n  error && (\\n    <div className=\\\"error\\\">\\n      <p>Comment failed to submit.</p>\\n    </div>\\n  )\\n\\nconst showSuccess = () =>\\n  success && (\\n    <div className=\\\"success\\\">\\n      <p>Comment submitted!</p>\\n    </div>\\n  )\\n\")), mdx(\"p\", null, \"The comment form only consists of name and comment in my case, as I decided to go the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://sivers.org/\"\n  }), \"Sivers\"), \" route and only allow comment replies by yours truly on the site.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=components/comments.js\"\n  }), \"const commentForm = () => (\\n  <form id=\\\"new-comment\\\" onSubmit={this.onSubmitComment}>\\n      <label for=\\\"name\\\">\\n      Name:\\n    <input\\n      type=\\\"text\\\"\\n      name=\\\"name\\\"\\n      id=\\\"name\\\"\\n      value={name}\\n      onChange={this.handleChange}\\n      maxLength=\\\"255\\\"\\n      placeholder=\\\"Name\\\"\\n      required\\n    />\\n    </label>\\n    <label for=\\\"text\\\">\\n    Comment\\n    <textarea\\n      rows=\\\"2\\\"\\n      cols=\\\"5\\\"\\n      name=\\\"text\\\"\\n      id=\\\"text\\\"\\n      value={text}\\n      onChange={this.handleChange}\\n      placeholder=\\\"Comment\\\"\\n      required\\n    />\\n    </label>\\n    <button type=\\\"submit\\\" disabled={!name || !text || text.length < 20 || submitting}>\\n      Submit\\n    </button>\\n  </form>\\n}\\n\")), mdx(\"p\", null, \"Finally, we\\u2019ll display the form and the comments. I decided to either display the form or a success/error message. A visitor won\\u2019t be able to leave two comments in a row without reloading the page.\"), mdx(\"p\", null, \"After that, it\\u2019s just a matter of looping through the comments and displaying them. I\\u2019ve made comment replies incredibly simple - only one reply allowed per post, and no nesting.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=components/comments.js\"\n  }), \"return (\\n  <section id=\\\"comments\\\">\\n    {success || error ? showError() || showSuccess() : commentForm()}\\n    {comments.length > 0 &&\\n      comments\\n        .filter(comment => !comment.parent_comment_id)\\n        .map((comment, i) => {\\n          let child\\n          if (comment.id) {\\n            child = comments.find(c => comment.id == c.parent_comment_id)\\n          }\\n\\n          return (\\n            <div className=\\\"comment\\\" key={i}>\\n              <header>\\n                <h2>{comment.name}</h2>\\n                <div className=\\\"comment-date\\\">\\n                  {moment(comment.date).fromNow()}\\n                </div>\\n              </header>\\n              <p>{comment.text}</p>\\n              {child && (\\n                <div className=\\\"comment reply\\\">\\n                  <header>\\n                    <h3>{child.name}</h3>\\n                    <div className=\\\"comment-date\\\">\\n                      {moment(child.date).fromNow()}\\n                    </div>\\n                  </header>\\n                  <p>{child.text}</p>\\n                </div>\\n              )}\\n            </div>\\n          )\\n        })}\\n  </section>\\n)\\n\")), mdx(\"h2\", {\n    \"id\": \"conclusion\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#conclusion\",\n    \"aria-label\": \"conclusion permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Conclusion\"), mdx(\"p\", null, \"You\\u2019ll probably also want to add in some anti-spam moderation system, like adding a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"moderated\"), \" column to the comments, setting it to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" by default, and manually setting it to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" if you approve the comment.\"), mdx(\"p\", null, \"I hope this helps out someone who wants a simple, free system for their own personal site. I like reinventing the wheel and making things from scratch. It\\u2019s fun, and I learn a lot.\"), mdx(\"p\", null, \"For more information on building contact forms with Gatsby, check out the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/building-a-contact-form/\"\n  }), \"docs reference guides\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "excerpt": "I wanted a simple, custom, ad-free solution to comments on my Gatsby blog, so I designed my own. Here's how I did it!",
        "timeToRead": 5,
        "fields": {
          "slug": "/blog/2019-08-27-roll-your-own-comment-system/",
          "publishedAt": "www.taniarascia.com"
        },
        "frontmatter": {
          "title": "Roll Your Own Comment System",
          "excerpt": "I wanted a simple, custom, ad-free solution to comments on my Gatsby blog, so I designed my own. Here's how I did it!",
          "date": "August 27th 2019",
          "rawDate": "2019-08-27T00:00:00.000Z",
          "canonicalLink": "https://www.taniarascia.com/add-comments-to-static-site/",
          "tags": [
            "comments",
            "apis"
          ],
          "image": null,
          "imageAuthor": null,
          "imageAuthorLink": null,
          "imageTitle": null,
          "showImageInArticle": null,
          "author": {
            "id": "Tania Rascia",
            "bio": "Web developer and writer specializing in modern JavaScript.",
            "twitter": "@taniarascia",
            "avatar": {
              "childImageSharp": {
                "fixed": {
                  "tracedSVG": "data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='32'%20height='32'%3e%3crect%20width='100%25'%20height='100%25'%20fill='%23f6f2f8'/%3e%3cpath%20d='M12%204l-4%208-2%202v1c2%201%200%207-3%208-2%202-3%203-3%205v4h33v-4c0-4%200-4-1-1l-1%201c0-1-1-2-3-2-3-1-4-4-2-10%201-5-1-9-6-11s-6-2-8-1'%20fill='%23e0d6eb'%20fill-rule='evenodd'/%3e%3c/svg%3e",
                  "width": 64,
                  "height": 64,
                  "src": "/static/17626c3ff60a45d4967857a80e3930fe/88ae8/tania-rascia.jpg",
                  "srcSet": "/static/17626c3ff60a45d4967857a80e3930fe/88ae8/tania-rascia.jpg 1x,\n/static/17626c3ff60a45d4967857a80e3930fe/0740f/tania-rascia.jpg 1.5x,\n/static/17626c3ff60a45d4967857a80e3930fe/c9264/tania-rascia.jpg 2x"
                }
              }
            },
            "fields": {
              "slug": "/contributors/tania-rascia/"
            }
          }
        }
      }
    },
    "pageContext": {
      "isCreatedByStatefulCreatePages": false,
      "slug": "/blog/2019-08-27-roll-your-own-comment-system/",
      "prev": {
        "fields": {
          "slug": "/blog/2019-08-23-creating-a-purpose-driven-media-platform/",
          "package": null,
          "released": true
        },
        "frontmatter": {
          "title": "Creating a purpose-driven media platform",
          "draft": null,
          "canonicalLink": "https://clearleft.com/casestudies/change-incorporated",
          "publishedAt": null,
          "issue": null,
          "tags": [
            "case-studies",
            "agencies",
            "cms",
            "contentful",
            "headless-cms"
          ]
        }
      },
      "next": null
    }
  },
  "query": "query usersMisiekDevGatsbyWwwSrcTemplatesTemplateBlogPostJs2991924798(\n  $slug: String!\n) {\n  mdx(fields: {slug: {eq: $slug}}) {\n    body\n    excerpt\n    timeToRead\n    fields {\n      slug\n      publishedAt\n    }\n    frontmatter {\n      title\n      excerpt\n      date(formatString: \"MMMM Do YYYY\")\n      rawDate: date\n      canonicalLink\n      tags\n      image {\n        childImageSharp {\n          resize(width: 1500, height: 1500) {\n            src\n          }\n          fluid(maxWidth: 786) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      imageAuthor\n      imageAuthorLink\n      imageTitle\n      showImageInArticle\n      author {\n        id\n        bio\n        twitter\n        avatar {\n          childImageSharp {\n            fixed(width: 64, height: 64, quality: 75, traceSVG: {turdSize: 10, background: \"#f6f2f8\", color: \"#e0d6eb\"}) {\n              ...GatsbyImageSharpFixed_tracedSVG\n            }\n          }\n        }\n        fields {\n          slug\n        }\n      }\n    }\n  }\n}\n\nfragment GatsbyImageSharpFluid on ImageSharpFluid {\n  base64\n  aspectRatio\n  src\n  srcSet\n  sizes\n}\n\nfragment GatsbyImageSharpFixed_tracedSVG on ImageSharpFixed {\n  tracedSVG\n  width\n  height\n  src\n  srcSet\n}\n"
}