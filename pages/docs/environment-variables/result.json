{
  "path": "/docs/environment-variables/",
  "result": {
    "data": {
      "mdx": {
        "body": "function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Environment Variables\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"environments-and-environment-variables\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#environments-and-environment-variables\",\n    \"aria-label\": \"environments and environment variables permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Environments and Environment Variables\"), mdx(\"p\", null, \"You can provide environment variables to your site to customise its behavior in different environments.\"), mdx(\"p\", null, \"First we need to distinguish between different types of Env variables.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"There are env variables that are defined in special places intended to be used in different deployment environments. Let\\u2019s call these \\u201CProject Env Vars\\u201D.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"And there are true OS-level environment variables that might be used in command-line calls. Let\\u2019s call these \\u201COS Env Vars\\u201D.\"), mdx(\"p\", null, \"In both cases we want to be able to access the relevant value of these variables for the environment we\\u2019re in.\"), mdx(\"p\", null, \"By default gatsby supports only 2 environments:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If you run \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"gatsby develop\"), \", then you will be in the \\u2018development\\u2019 environment.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If you run \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"gatsby build\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"gatsby serve\"), \", then you will be in the \\u2018production\\u2019 environment.\")), mdx(\"p\", null, \"If you want to define other environments then you\\u2019ll need to do a little more work. See\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#additional-environments-staging-test-etc\"\n  }), \" \\u201CAdditional Environments\\u201D below\"), \". You can also have a look at our \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://codesandbox.io/s/6w9jjrnnjn\"\n  }), \"environment variables codesandbox\"), \" while reading the examples below.\"), mdx(\"h2\", {\n    \"id\": \"accessing-environment-variables-in-javascript\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#accessing-environment-variables-in-javascript\",\n    \"aria-label\": \"accessing environment variables in javascript permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Accessing Environment Variables in JavaScript\"), mdx(\"p\", null, \"All of the Project and OS Env Vars are only directly available at build time, or\\nwhen Node.Js is running. They aren\\u2019t immediately available at run time of the client code; they\\nneed to be actively captured and embedded into our client-side JavaScript.\\nThis is achieved during the build using Webpack\\u2019s \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://webpack.js.org/plugins/define-plugin/\"\n  }), \"DefinePlugin\"), \".\"), mdx(\"p\", null, \"Once the environment variables have been embedded into the client-side code, they are accessible from the\\nglobal variable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process.env\"), \".\\nOS Env Vars are accessible in Node.js from the same \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process.env\"), \" global variable.\"), mdx(\"p\", null, \"Note that since these variables are embedded at build time, you will need to restart your dev server\\nor rebuild your site after changing them.\"), mdx(\"h2\", {\n    \"id\": \"defining-environment-variables\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#defining-environment-variables\",\n    \"aria-label\": \"defining environment variables permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Defining Environment Variables\"), mdx(\"h3\", {\n    \"id\": \"client-side-javascript\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#client-side-javascript\",\n    \"aria-label\": \"client side javascript permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Client-side JavaScript\"), mdx(\"p\", null, \"For Project Env Vars that you want to access in client-side browser JavaScript, you can define\\nan environment config file, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".env.development\"), \" and/or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".env.production\"), \", in your root folder.\\nDepending on your active environment, the correct one will be found and its values embedded as environment variables in the\\nbrowser JavaScript.\"), mdx(\"p\", null, \"In addition to these Project Environment Variables defined in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".env.*\"), \" files, you could also define\\nOS Env Vars. OS Env Vars which are prefixed with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GATSBY_\"), \" will become available in\\nbrowser JavaScript.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text:title=.env.*\"\n  }), \"GATSBY_API_URL=https://dev.example.com/api\\n\")), mdx(\"h3\", {\n    \"id\": \"server-side-nodejs\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#server-side-nodejs\",\n    \"aria-label\": \"server side nodejs permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Server-side Node.js\"), mdx(\"p\", null, \"Gatsby runs several Node.js scripts at build time, notably \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-config.js\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-node.js\"), \".\\nOS Env Vars will already be available when Node is running, so you can add environment variables the\\nnormal ways e.g. by adding environment variables through your hosting/build tool, your OS, or when\\ncalling Gatsby on the command line.\"), mdx(\"p\", null, \"In Linux terminals this can be done with:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"MY_ENV_VAR=foo npm run develop\\n\")), mdx(\"p\", null, \"In Windows it\\u2019s a little more complex. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stackoverflow.com/questions/1420719/powershell-setting-an-environment-variable-for-a-single-command-only\"\n  }), \"Check out this Stack Overflow article for some options\")), mdx(\"p\", null, \"Project environment variables that you defined in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".env.*\"), \" files will \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"NOT\"), \" be immediately available\\nin your Node.js scripts. To use those variables, use NPM package \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/dotenv\"\n  }), \"dotenv\"), \" to\\nexamine the active \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".env.*\"), \" file and attached those values,\\nIt\\u2019s already a dependency of Gatsby, so you can require it in your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-config.js\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-node.js\"), \" like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript:title=gatsby-config.js\"\n  }), \"require(\\\"dotenv\\\").config({\\n  path: `.env.${process.env.NODE_ENV}`,\\n})\\n\")), mdx(\"p\", null, \"Now the variables are available on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process.env\"), \" as usual.\"), mdx(\"h2\", {\n    \"id\": \"example\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#example\",\n    \"aria-label\": \"example permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Example\"), mdx(\"p\", null, \"Please note that you shouldn\\u2019t commit \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".env.*\"), \" files to your source control and rather use options given by your CD provider (e.g. Netlify with its \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.netlify.com/docs/continuous-deployment/#build-environment-variables\"\n  }), \"build environment variables\"), \").\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text:title=.env.development\"\n  }), \"GATSBY_API_URL=https://dev.example.com/api\\nAPI_KEY=927349872349798\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text:title=.env.production\"\n  }), \"GATSBY_API_URL=https://example.com/api\\nAPI_KEY=927349872349798\\n\")), mdx(\"p\", null, \"Note: since Gatsby uses the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://webpack.js.org/plugins/define-plugin/\"\n  }), \"Webpack DefinePlugin\"), \" to make the environment variables available at runtime, they cannot be destructured from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process.env\"), \"; instead, they have to be fully referenced.\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GATSBY_API_URL\"), \" will be available to your site (Client-side and server-side) as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process.env.GATSBY_API_URL\"), \".:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// In any frontend code\\nrender() {\\n  return (\\n    <div>\\n      <img src={`${process.env.GATSBY_API_URL}/logo.png`} alt=\\\"Logo\\\" />\\n    </div>\\n  )\\n}\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"API_KEY\"), \" will be available to your site (Server-side) as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process.env.API_KEY\"), \". If you commit your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".env.*\"), \" file containing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"API_KEY\"), \" to source control it would also be available on the client-side. However we \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"strongly\"), \" advise against that! You should prefix your variable with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GATSBY_\"), \" (as shown above) instead and Gatsby automatically makes it available in the browser context.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// In any server-side code, e.g. gatsby-config.js\\nmodule.exports = {\\n  plugins: [\\n    {\\n      resolve: `gatsby-source-patronus`,\\n      options: {\\n        apiKey: process.env.API_KEY,\\n      },\\n    },\\n  ],\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"reserved-environment-variables\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#reserved-environment-variables\",\n    \"aria-label\": \"reserved environment variables permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Reserved Environment Variables:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"You can not override certain environment variables as some are used internally\\nfor optimizations during build\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"NODE_ENV\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PUBLIC_DIR\"))), mdx(\"p\", null, \"Gatsby also allows you to specify another environment variable when running the local development server (e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm run develop\"), \"):\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ENABLE_GATSBY_REFRESH_ENDPOINT\"))), mdx(\"p\", null, \"If set to true, this will expose a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/__refresh\"), \" webhook that is able to receive \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"POST\"), \" requests to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"refresh\"), \" the sourced content. This exposed webhook can be triggered whenever remote data changes, which means you can update your data without re-launching the development server.\"), mdx(\"p\", null, \"You can trigger this endpoint locally for example on Unix-based operating systems (like Ubuntu and MacOS) you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"curl -X POST http://localhost:8000/__refresh\"), \".\"), mdx(\"h2\", {\n    \"id\": \"additional-environments-staging-test-etc\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#additional-environments-staging-test-etc\",\n    \"aria-label\": \"additional environments staging test etc permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Additional Environments (Staging, Test, etc)\"), mdx(\"p\", null, \"As noted above \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NODE_ENV\"), \" is a reserved environment variable in Gatsby as it is needed by the build system to make key optimizations when compiling React and other modules. For this reason it is necessary to make use of a secondary environment variable for additional environment support, and manually make the environment variables available to the client-side code.\"), mdx(\"p\", null, \"You can define your own OS Env Var to track the active environment, and then to locate the relevant Project Env Vars to load. Gatsby itself will not do anything with that OS Env Var, but you can use it in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-config.js\"), \".\\nSpecifically, you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dotenv\"), \" and your individual OS Env Var to locate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".env.myCustomEnvironment\"), \" file, and then use module.exports to store those Project Env Vars somewhere that the client-side JavaScript can access the values (via GraphQL queries).\"), mdx(\"p\", null, \"For instance: if you would like to add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"staging\"), \" environment with a custom Google Analytics Tracking ID, and a dedicated \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"apiUrl\"), \". You can add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".env.staging\"), \" at the root of your project with the following modification to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-config.js\")), mdx(\"h3\", {\n    \"id\": \"example-1\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#example-1\",\n    \"aria-label\": \"example 1 permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text:title=.env.staging\"\n  }), \"GA_TRACKING_ID=\\\"UA-1234567890\\\"\\nAPI_URL=\\\"http://foo.bar\\\"\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript:title=gatsby-config.js\"\n  }), \"let activeEnv =\\n  process.env.GATSBY_ACTIVE_ENV || process.env.NODE_ENV || \\\"development\\\"\\n\\nconsole.log(`Using environment config: '${activeEnv}'`)\\n\\nrequire(\\\"dotenv\\\").config({\\n  path: `.env.${activeEnv}`,\\n})\\n\\nmodule.exports = {\\n  siteMetadata: {\\n    title: \\\"Gatsby Default Starter\\\",\\n    apiUrl: process.env.API_URL,\\n  },\\n  plugins: [\\n    {\\n      resolve: `gatsby-plugin-google-analytics`,\\n      options: {\\n        trackingId: process.env.GA_TRACKING_ID,\\n        // Puts tracking script in the head instead of the body\\n        head: false,\\n        // Setting this parameter is optional\\n        anonymize: true,\\n        // Setting this parameter is also optional\\n        respectDNT: true,\\n      },\\n    },\\n  ],\\n}\\n\")), mdx(\"p\", null, \"This will then load the values from the relevant environment\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".env.*\"), \" file and make them available via GraphQL queries and the analytics plugin respectively.\"), mdx(\"p\", null, \"Local testing of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"staging\"), \" environment can be done with:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"GATSBY_ACTIVE_ENV=staging npm run develop\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "excerpt": "Environments and Environment Variables You can provide environment variables to your site to customise its behavior in different…",
        "timeToRead": 3,
        "tableOfContents": {
          "items": [
            {
              "url": "#environments-and-environment-variables",
              "title": "Environments and Environment Variables"
            },
            {
              "url": "#accessing-environment-variables-in-javascript",
              "title": "Accessing Environment Variables in JavaScript"
            },
            {
              "url": "#defining-environment-variables",
              "title": "Defining Environment Variables",
              "items": [
                {
                  "url": "#client-side-javascript",
                  "title": "Client-side JavaScript"
                },
                {
                  "url": "#server-side-nodejs",
                  "title": "Server-side Node.js"
                }
              ]
            },
            {
              "url": "#example",
              "title": "Example"
            },
            {
              "url": "#reserved-environment-variables",
              "title": "Reserved Environment Variables:"
            },
            {
              "url": "#additional-environments-staging-test-etc",
              "title": "Additional Environments (Staging, Test, etc)",
              "items": [
                {
                  "url": "#example-1",
                  "title": "Example"
                }
              ]
            }
          ]
        },
        "fields": {
          "slug": "/docs/environment-variables/",
          "anchor": "environment-variables"
        },
        "frontmatter": {
          "title": "Environment Variables",
          "overview": null,
          "issue": null,
          "disableTableOfContents": null,
          "tableOfContentsDepth": null
        },
        "parent": {
          "__typename": "File",
          "relativePath": "docs/environment-variables.md"
        }
      }
    },
    "pageContext": {
      "isCreatedByStatefulCreatePages": false,
      "slug": "/docs/environment-variables/",
      "prev": {
        "title": "Customizing html.js",
        "link": "/docs/custom-html/",
        "breadcrumbTitle": "html.js"
      },
      "next": {
        "title": "Using ESLint",
        "link": "/docs/eslint/",
        "breadcrumbTitle": "ESLint"
      }
    }
  },
  "query": "query usersMisiekDevGatsbyWwwSrcTemplatesTemplateDocsMarkdownJs2546709735(\n  $path: String!\n) {\n  mdx(fields: {slug: {eq: $path}}) {\n    body\n    excerpt\n    timeToRead\n    tableOfContents\n    fields {\n      slug\n      anchor\n    }\n    frontmatter {\n      title\n      overview\n      issue\n      disableTableOfContents\n      tableOfContentsDepth\n    }\n    ...MarkdownPageFooterMdx\n  }\n}\n\nfragment MarkdownPageFooterMdx on Mdx {\n  parent {\n    __typename\n    ... on File {\n      relativePath\n    }\n  }\n}\n"
}