{
  "path": "/blog/2018-12-17-turning-the-static-dynamic/",
  "result": {
    "data": {
      "mdx": {
        "body": "function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Turning the Static Dynamic: Gatsby + Netlify Functions + Netlify Identity\",\n  \"date\": \"2018-12-26T00:00:00.000Z\",\n  \"author\": \"swyx\",\n  \"tags\": [\"gatsby-for-apps\"],\n  \"excerpt\": \"Gatsby is great for not only static sites but also traditional web applications. You can add authentication and serverless functionality and get up and running incredibly quickly with Netlify - here's how.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.reactiflux.com/transcripts/gatsby-team/\"\n  }), \"In a recent Reactiflux interview\"), \", the Gatsby team was asked this question:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Q: What is one thing that Gatsby is capable of doing that might surprise some people? \\u2014 ctlee\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"A: Gatsby can be used to build fully dynamic sites, which surprises some people because of it\\u2019s label as a \\u201Cstatic site generator\\u201D. It\\u2019s fully equipped to be a powerful alternative to create-react-app and other similar solutions with the addition of easy pre-rendering and perf baked in. \\u2014 biscarch\")), mdx(\"p\", null, \"Even though Dustin \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/blog/2018-11-07-gatsby-for-apps/\"\n  }), \"recently wrote about Gatsby for Apps\"), \" and open sourced his \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gatsby-mail.netlify.com/\"\n  }), \"Gatsby Mail\"), \" demo, I do still find people constantly having to explain that Gatsby is \\u201Cnot just for sites\\u201D.\"), mdx(\"p\", null, \"Today I\\u2019d like to show you how you can incrementally add functionality to a Gatsby static site with Netlify Functions, and then add authentication with Netlify Identity to begin a proper Gatsby app.\"), mdx(\"h2\", {\n    \"id\": \"static-dynamic-is-a-spectrum\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#static-dynamic-is-a-spectrum\",\n    \"aria-label\": \"static dynamic is a spectrum permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Static-Dynamic is a spectrum\"), mdx(\"p\", null, \"Why would you use something like Gatsby over Jekyll or Hugo or one of the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.staticgen.com/\"\n  }), \"hundreds of Static Site Generators\"), \" out there? \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/blog/2018-2-27-why-i-upgraded-my-website-to-gatsbyjs-from-jekyll/\"\n  }), \"There are many reasons\"), \", but one of the unique selling points is how Gatsby helps you build \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/progressive-web-app/#progressive-web-app\"\n  }), \"\\u201CStatic Progressive Web Apps\\u201D\"), \" with React.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/production-app/#dom-hydration\"\n  }), \"Gatsby\\u2019s ability to rehydrate\"), \" (what a delicious word!) the DOM means you can do incredibly dynamic things with JavaScript and React that would be much harder with legacy SSG\\u2019s.\"), mdx(\"p\", null, \"Let\\u2019s say you have a typical static Gatsby site, like \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/starters/gatsby-starter-default\"\n  }), \"gatsby-starter-default\"), \". You can \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm run build\"), \" it, and it spits out a bunch of HTML files. Great! I can host that for free!\"), mdx(\"p\", null, \"Now your client comes to you and asks you to add some custom logic that needs to be executed on the server:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Maybe you have third party API secrets you don\\u2019t want to expose to your user.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Maybe you need \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developer.yahoo.com/javascript/howto-proxy.html?guccounter=1\"\n  }), \"a serverside proxy to get around CORS issues\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Maybe you need to ping a database to check your inventory.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Oh no! Now you have to rewrite everything and move to a Digital Ocean droplet!\")), mdx(\"p\", null, \"I\\u2019m kidding. No, you don\\u2019t have to rewrite everything.\"), mdx(\"p\", null, \"The beauty of serverless functions is that it is incrementally adoptable - \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"your site grows with your needs\"), \" - and with Gatsby you can rerender entire sections of your site based on live API data. Of course, the more you do this, the more resource intensive (in terms of bandwidth and computation) it can be, so there is a performance tradeoff. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Your site should be as dynamic as you need it to be, but no more.\"), \" Gatsby is perfect for this.\"), mdx(\"h2\", {\n    \"id\": \"5-steps-to-add-netlify-functions-to-gatsby\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#5-steps-to-add-netlify-functions-to-gatsby\",\n    \"aria-label\": \"5 steps to add netlify functions to gatsby permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"5 Steps to add Netlify Functions to Gatsby\"), mdx(\"p\", null, \"Netlify Functions are a great low configuration solution for adding serverless functionality to your Gatsby site. You get 125,000 free calls a month - that\\u2019s a function call every 20 seconds every day of the week, month, and year - and you can emulate them in local development with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/netlify/netlify-lambda\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"netlify-lambda\")), \".\"), mdx(\"p\", null, \"Let\\u2019s walk through the steps:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Install dependencies\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"npm install -D http-proxy-middleware netlify-lambda npm-run-all\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Run function emulation alongside Gatsby\"), \": replace your \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"scripts\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"package.json\"), \":\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"  \\\"scripts\\\": {\\n    \\\"develop\\\": \\\"gatsby develop\\\",\\n    \\\"start\\\": \\\"run-p start:**\\\",\\n    \\\"start:app\\\": \\\"npm run develop\\\",\\n    \\\"start:lambda\\\": \\\"netlify-lambda serve src/lambda\\\",\\n    \\\"build\\\": \\\"run-p build:**\\\",\\n    \\\"build:app\\\": \\\"gatsby build\\\",\\n    \\\"build:lambda\\\": \\\"netlify-lambda build src/lambda\\\",\\n  },\\n\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Configure your Netlify build\"), \": When serving your site on Netlify, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"netlify-lambda\"), \" will now build each JavaScript/TypeScript file in your \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"src/lambda\"), \" folder as a standalone Netlify function (with a path corresponding to the filename). Make sure you have a Functions path in a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"netlify.toml\"), \" file at root of your repository:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-toml\"\n  }), \"[build]\\n  Command = \\\"npm run build\\\"\\n  Functions = \\\"lambda\\\"\\n  Publish = \\\"public\\\"\\n\")), mdx(\"p\", null, \"For more info or configuration options (e.g. in different branches and build environments), check \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.netlify.com/docs/netlify-toml-reference/\"\n  }), \"the Netlify.toml reference\"), \".\"), mdx(\"ol\", {\n    \"start\": 4\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Proxy the emulated functions for local development\"), \": Head to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"gatsby-config.js\"), \" and add this to your \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"module.exports\"), \":\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=gatsby-config.js\"\n  }), \"var proxy = require(\\\"http-proxy-middleware\\\")\\n\\nmodule.exports = {\\n  // for avoiding CORS while developing Netlify Functions locally\\n  // read more: https://www.gatsbyjs.org/docs/api-proxy/#advanced-proxying\\n  developMiddleware: app => {\\n    app.use(\\n      \\\"/.netlify/functions/\\\",\\n      proxy({\\n        target: \\\"http://localhost:9000\\\",\\n        pathRewrite: {\\n          \\\"/.netlify/functions/\\\": \\\"\\\",\\n        },\\n      })\\n    )\\n  },\\n  // ...\\n}\\n\")), mdx(\"ol\", {\n    \"start\": 5\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Write your functions\"), \": Make a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"src/lambda\"), \" folder and write as many functions as you need. The only requirement is that each function must export a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"handler\"), \", although \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"netlify-lambda\"), \" helps you use webpack to bundle modules or you can \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.netlify.com/blog/2018/09/14/forms-and-functions/#optional-zip-the-function-to-manage-dependencies\"\n  }), \"zip the functions yourself\"), \". For example you can write \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"src/lambda/hello.js\"), \":\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// For more info, check https://www.netlify.com/docs/functions/#javascript-lambda-functions\\nexport function handler(event, context, callback) {\\n  console.log(\\\"queryStringParameters\\\", event.queryStringParameters)\\n  callback(null, {\\n    // return null to show no errors\\n    statusCode: 200, // http status code\\n    body: JSON.stringify({\\n      msg: \\\"Hello, World! \\\" + Math.round(Math.random() * 10),\\n    }),\\n  })\\n}\\n\")), mdx(\"p\", null, \"Now you are ready to access this API from anywhere in your Gatsby app! For example, in any event handler or lifecycle method, insert:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"fetch(\\\"/.netlify/functions/hello\\\")\\n  .then(response => response.json())\\n  .then(console.log)\\n\")), mdx(\"p\", null, \"and watch \\u201CHello World!\\u201D pop up in your console. (I added a random number as well to show the endpoint is dynamic) If you are new to React, I highly recommend \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org/docs/handling-events.html\"\n  }), \"reading through the React docs\"), \" to understand where and how to insert event handlers so you can, for example, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org/docs/handling-events.html\"\n  }), \"respond to a button click\"), \".\"), mdx(\"p\", null, \"The local proxying we are doing is only for local emulation, eg it is actually running from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:9000/hello\"), \" despite you hitting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/.netlify/functions/hello\"), \" in your Gatsby app. When you deploy your site to Netlify (either by \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://app.netlify.com/\"\n  }), \"hooking your site up through Git through our Web UI\"), \", or our l33t new \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.netlify.com/docs/cli/\"\n  }), \"CLI\"), \"), that falls away, and your functions -are- hosted on the same URL and \\u201Cjust works\\u201D. Pretty neat!\"), mdx(\"h2\", {\n    \"id\": \"thats-cool-but-its-not-an-app\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#thats-cool-but-its-not-an-app\",\n    \"aria-label\": \"thats cool but its not an app permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"That\\u2019s cool, but its not an app\"), mdx(\"p\", null, \"So, yes, your site can now be more dynamic than any static site. It can hit any database or API. It runs rings around CORS (by the way, you can also use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.netlify.com/docs/redirects/\"\n  }), \"Netlify Redirects\"), \" for that). But its not an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"app\"), \" app. Yet!\"), mdx(\"p\", null, \"The key thing about web apps (and, let\\u2019s face it, the key thing users really pay for) is they all have some concept of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user\"), \", and that brings with it all manner of complication from security to state management to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.netlify.com/docs/visitor-access-control/#role-based-access-controls-with-jwt-tokens\"\n  }), \"role-based access control\"), \". Entire routes need to be guarded by authentication, and sensitive content shielded from Gatsby\\u2019s static generation. Sometimes there are things you -don\\u2019t- want Google\\u2019s spiders to see!\"), mdx(\"p\", null, \"It\\u2019s a different tier of concern, which makes it hard to write about in the same article as a typical Gatsby tutorial. But we\\u2019re here to make apps, so let\\u2019s bring it on!\"), mdx(\"h2\", {\n    \"id\": \"5-steps-to-add-netlify-identity-and-authenticated-pages-to-gatsby\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#5-steps-to-add-netlify-identity-and-authenticated-pages-to-gatsby\",\n    \"aria-label\": \"5 steps to add netlify identity and authenticated pages to gatsby permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"5 Steps to add Netlify Identity and Authenticated Pages to Gatsby\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Enable Netlify Identity\"), \": Netlify Identity doesn\\u2019t come enabled by default. You\\u2019ll have to head to your site admin (eg \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"https://app.netlify.com/sites/YOUR_AWESOME_SITE/identity\"), \") to turn it on. \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.netlify.com/docs/identity/\"\n  }), \"Read the docs\"), \" for further info on what you can do, for example add Facebook or Google social sign-on!\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Install dependencies\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"npm install netlify-identity-widget gatsby-plugin-create-client-paths\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Configure Gatsby\"), \": for dynamic-ness!\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=gatsby-config.js\"\n  }), \"module.exports = {\\n  plugins: [\\n    {\\n      resolve: `gatsby-plugin-create-client-paths`,\\n      options: { prefixes: [`/app/*`] },\\n    },\\n    // ...\\n  ],\\n  // ... (including what you also wrote earlier)\\n}\\n\")), mdx(\"ol\", {\n    \"start\": 4\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Write an authentication service\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"netlify-identity-widget\"), \" is a framework-agnostic overlay that ships with a nice signup/login UI. This gets you up and running the fastest, however if you need a smaller solution you may want to use the underlying \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/netlify/gotrue-js\"\n  }), \"gotrue-js\"), \", or \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/sw-yx/react-netlify-identity\"\n  }), \"react-netlify-identity\"), \" for a React Hooks solution.\")), mdx(\"p\", null, \"Here\\u2019s a usable example that stores your user in local storage:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=service/auth.js\"\n  }), \"import netlifyIdentity from \\\"netlify-identity-widget\\\"\\n\\nexport const isBrowser = () => typeof window !== \\\"undefined\\\"\\nexport const initAuth = () => {\\n  if (isBrowser()) {\\n    window.netlifyIdentity = netlifyIdentity\\n    // You must run this once before trying to interact with the widget\\n    netlifyIdentity.init()\\n  }\\n}\\nexport const getUser = () =>\\n  isBrowser() && window.localStorage.getItem(\\\"netlifyUser\\\")\\n    ? JSON.parse(window.localStorage.getItem(\\\"netlifyUser\\\"))\\n    : {}\\n\\nconst setUser = user =>\\n  window.localStorage.setItem(\\\"netlifyUser\\\", JSON.stringify(user))\\n\\nexport const handleLogin = callback => {\\n  if (isLoggedIn()) {\\n    callback(getUser())\\n  } else {\\n    netlifyIdentity.open()\\n    netlifyIdentity.on(\\\"login\\\", user => {\\n      setUser(user)\\n      callback(user)\\n    })\\n  }\\n}\\n\\nexport const isLoggedIn = () => {\\n  if (!isBrowser()) return false\\n  const user = netlifyIdentity.currentUser()\\n  return !!user\\n}\\n\\nexport const logout = callback => {\\n  netlifyIdentity.logout()\\n  netlifyIdentity.on(\\\"logout\\\", () => {\\n    setUser({})\\n    callback()\\n  })\\n}\\n\")), mdx(\"ol\", {\n    \"start\": 5\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Write your app\"), \": Now, any sub paths in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"src/pages/app\"), \" will be exempt from Gatsby static generation. To keep the dividing line between app and site crystal clear, I like to have all my dynamic Gatsby code in a dedicated \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"app\"), \" folder. This means you can use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@reach/router\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"netlify-identity-widget\"), \" to write a standard dynamic React app. Here\\u2019s some sample code to give you an idea of how to hook them up:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=app.js\"\n  }), \"import React from \\\"react\\\"\\nimport { Router } from \\\"@reach/router\\\" // comes with gatsby v2\\nimport Layout from \\\"../components/layout\\\"\\nimport NavBar from \\\"./components/NavBar\\\"\\nimport Profile from \\\"./profile\\\"\\nimport Main from \\\"./main\\\" // NOT SHOWN\\nimport PrivateRoute from \\\"./components/PrivateRoute\\\"\\nimport Login from \\\"./login\\\"\\n\\n// remember everything in /app/* is dynamic now!\\nconst App = () => {\\n  return (\\n    <Layout>\\n      <NavBar />\\n      <Router>\\n        <PrivateRoute path=\\\"/app/profile\\\" component={Profile} />\\n        <PublicRoute path=\\\"/app\\\">\\n          <PrivateRoute path=\\\"/\\\" component={Main} />\\n          <Login path=\\\"/login\\\" />\\n        </PublicRoute>\\n      </Router>\\n    </Layout>\\n  )\\n}\\nfunction PublicRoute(props) {\\n  return <div>{props.children}</div>\\n}\\n\\nexport default App\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=components/NavBar.js\"\n  }), \"import React from \\\"react\\\"\\nimport { Link, navigate } from \\\"gatsby\\\"\\nimport { getUser, isLoggedIn, logout } from \\\"../services/auth\\\"\\n\\nexport default () => {\\n  const content = { message: \\\"\\\", login: true }\\n  const user = getUser()\\n  if (isLoggedIn()) {\\n    content.message = `Hello, ${user.user_metadata &&\\n      user.user_metadata.full_name}`\\n  } else {\\n    content.message = \\\"You are not logged in\\\"\\n  }\\n  return (\\n    <div\\n      style={{\\n        display: \\\"flex\\\",\\n        flex: \\\"1\\\",\\n        justifyContent: \\\"space-between\\\",\\n        borderBottom: \\\"1px solid #d1c1e0\\\",\\n        backgroundColor: \\\"aliceblue\\\",\\n      }}\\n    >\\n      <span>{content.message}</span>\\n\\n      <nav>\\n        <span>Navigate the app: </span>\\n        <Link to=\\\"/app/\\\">Main</Link>\\n        {` `}\\n        <Link to=\\\"/app/profile\\\">Profile</Link>\\n        {` `}\\n        {isLoggedIn() ? (\\n          <a\\n            href=\\\"/\\\"\\n            onClick={event => {\\n              event.preventDefault()\\n              logout(() => navigate(`/app/login`))\\n            }}\\n          >\\n            Logout\\n          </a>\\n        ) : (\\n          <Link to=\\\"/app/login\\\">Login</Link>\\n        )}\\n      </nav>\\n    </div>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=components/PrivateRoute.js\"\n  }), \"import React from \\\"react\\\"\\nimport { isLoggedIn } from \\\"../services/auth\\\"\\nimport { navigate } from \\\"gatsby\\\"\\n\\nclass PrivateRoute extends React.Component {\\n  componentDidMount = () => {\\n    const { location } = this.props\\n    if (!isLoggedIn() && location.pathname !== `/app/login`) {\\n      // If the user is not logged in, redirect to the login page.\\n      navigate(`/app/login`)\\n      return null\\n    }\\n  }\\n\\n  render() {\\n    const { component: Component, location, ...rest } = this.props\\n    return isLoggedIn() ? <Component {...rest} /> : null\\n  }\\n}\\n\\nexport default PrivateRoute\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=login.js\"\n  }), \"import React from \\\"react\\\"\\nimport { navigate } from \\\"gatsby\\\"\\nimport { handleLogin, isLoggedIn } from \\\"./services/auth\\\"\\n\\nclass Login extends React.Component {\\n  handleSubmit = () => handleLogin(user => navigate(`/app/profile`))\\n  render() {\\n    return (\\n      <>\\n        <h1>Log in</h1>\\n        <button onClick={this.handleSubmit}>log in</button>\\n      </>\\n    )\\n  }\\n}\\n\\nexport default Login\\n\")), mdx(\"p\", null, \"Phew that was a lot! but you should have a solid starting point for your app :)\"), mdx(\"h2\", {\n    \"id\": \"bonus-points-authenticated-lambda-functions-for-your-gatsby-app\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#bonus-points-authenticated-lambda-functions-for-your-gatsby-app\",\n    \"aria-label\": \"bonus points authenticated lambda functions for your gatsby app permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Bonus points: Authenticated Lambda Functions for your Gatsby App\"), mdx(\"p\", null, \"Just like \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/The_Prestige_(film)\"\n  }), \"every magic act has a pledge, a turn, and a prestige\"), \", I have one last tidbit for you. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stackoverflow.com/questions/50277192/react-security-concerns-restricted-pages-in-app\"\n  }), \"Nothing on the client-side is safe\"), \", and although you can send along Netlify Identity user id\\u2019s to your Netlify Function endpoints for authenticated access from your Gatsby App (for example in the body of a POST request), you\\u2019ll never be truly sure if that flow is secure either from malicious users or snooping.\"), mdx(\"p\", null, \"The best way to do authenticated actions inside serverless functions is to do it from inside the context of the function itself. Fortunately, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.netlify.com/docs/functions/#identity-and-functions\"\n  }), \"Netlify Identity and Functions work seamlessly together\"), \". All you have to do is to send along the user\\u2019s \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://jwt.io/\"\n  }), \"JWT\"), \" when hitting your endpoint:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// in your gatsby app\\nconst user = getUser()\\nfetch(\\\"/.netlify/functions/auth-hello\\\", {\\n  headers: {\\n    Accept: \\\"application/json\\\",\\n    \\\"Content-Type\\\": \\\"application/json\\\",\\n    Authorization: \\\"Bearer \\\" + user.token.access_token, // like this\\n  },\\n}).then(/* etc */)\\n\")), mdx(\"p\", null, \"And then inside a Lambda function, you can now access the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user\"), \" object:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// more info: https://www.netlify.com/docs/functions/#identity-and-functions\\n\\n// Note that `netlify-lambda` only locally emulates Netlify Functions, while `netlify-identity-widget` interacts with a real Netlify Identity instance. This means that `netlify-lambda` doesn't support Netlify Functions + Netlify Identity integration.\\n\\nexport function handler(event, context, callback) {\\n  if (context.clientContext) {\\n    const {\\n      user, // actual user info you can use for your serverless functions\\n    } = context.clientContext\\n    callback(null, {\\n      statusCode: 200,\\n      body: JSON.stringify({\\n        msg: \\\"auth-hello: \\\" + Math.round(Math.random() * 10),\\n        user,\\n      }),\\n    })\\n  } else {\\n    console.log(`\\n    Note that netlify-lambda only locally emulates Netlify Functions, \\n    while netlify-identity-widget interacts with a real Netlify Identity instance. \\n    This means that netlify-lambda doesn't support Netlify Functions + Netlify Identity integration.\\n    `)\\n    callback(null, {\\n      statusCode: 200,\\n      body: JSON.stringify({\\n        msg:\\n          \\\"auth-hello - no authentication detected. Note that netlify-lambda doesn't locally emulate Netlify Identity.\\\",\\n      }),\\n    })\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"gatsby---perfect-for-your-next-hackathon\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#gatsby---perfect-for-your-next-hackathon\",\n    \"aria-label\": \"gatsby   perfect for your next hackathon permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Gatsby - Perfect for your next Hackathon\"), mdx(\"p\", null, \"It\\u2019s 5 steps each to turn your static Gatsby sites into dynamic, authenticated, fully serverless apps with Netlify\\u2019s free tools. This makes Gatsby a perfect tool for your next app. If you\\u2019re at a hackathon, short on time, or just like to see a full working demo, check any of the following links.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Code:\"), \" \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/sw-yx/jamstack-hackathon-starter\"\n  }), \"https://github.com/sw-yx/jamstack-hackathon-starter\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Starter:\"), \" \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.org/starters/jamstack-hackathon-starter\"\n  }), \"https://www.gatsbyjs.org/starters/jamstack-hackathon-starter\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Live Demo:\"), \" \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://jamstack-hackathon-starter.netlify.com/\"\n  }), \"https://jamstack-hackathon-starter.netlify.com/\"))));\n}\n;\nMDXContent.isMDXComponent = true;",
        "excerpt": "Gatsby is great for not only static sites but also traditional web applications. You can add authentication and serverless functionality and get up and running incredibly quickly with Netlify - here's how.",
        "timeToRead": 5,
        "fields": {
          "slug": "/blog/2018-12-17-turning-the-static-dynamic/",
          "publishedAt": null
        },
        "frontmatter": {
          "title": "Turning the Static Dynamic: Gatsby + Netlify Functions + Netlify Identity",
          "excerpt": "Gatsby is great for not only static sites but also traditional web applications. You can add authentication and serverless functionality and get up and running incredibly quickly with Netlify - here's how.",
          "date": "December 26th 2018",
          "rawDate": "2018-12-26T00:00:00.000Z",
          "canonicalLink": null,
          "tags": [
            "gatsby-for-apps"
          ],
          "image": null,
          "imageAuthor": null,
          "imageAuthorLink": null,
          "imageTitle": null,
          "showImageInArticle": null,
          "author": {
            "id": "swyx",
            "bio": "Infinite Builder working on DX @ Netlify. Helping people Learn In Public at /r/reactjs",
            "twitter": "@swyx",
            "avatar": {
              "childImageSharp": {
                "fixed": {
                  "tracedSVG": "data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='32'%20height='32'%3e%3crect%20width='100%25'%20height='100%25'%20fill='%23f6f2f8'/%3e%3cpath%20d='M16%202c-2%202-3%209-1%209l1-1%201-2%201%202c-1%201%200%202%201%202l2%201-1%201-1%202c0%202%200%202-1%201-3-2-9%201-8%203l-2%205c-4%206-3%207%205%207%207%200%208%200%208-2h1c0%202%201%202%204%202s3%200%202-3l-2-5-1-3-1-2-1%202-1%201v-4c1-5%201-8-2-10l-1-1%202-1c-1-2%204-2%206-1h1c0-4-9-6-12-3'%20fill='%23e0d6eb'%20fill-rule='evenodd'/%3e%3c/svg%3e",
                  "width": 64,
                  "height": 64,
                  "src": "/static/c35b3879ffe503a5cd49b25e27a1288c/88ae8/swyx.jpg",
                  "srcSet": "/static/c35b3879ffe503a5cd49b25e27a1288c/88ae8/swyx.jpg 1x"
                }
              }
            },
            "fields": {
              "slug": "/contributors/swyx/"
            }
          }
        }
      }
    },
    "pageContext": {
      "isCreatedByStatefulCreatePages": false,
      "slug": "/blog/2018-12-17-turning-the-static-dynamic/",
      "prev": {
        "fields": {
          "slug": "/blog/2018-11-03-building-an-accessible-lightbox/",
          "package": null,
          "released": true
        },
        "frontmatter": {
          "title": "Building a custom, accessible image lightbox",
          "draft": null,
          "canonicalLink": "https://416serg.me/building-a-custom-accessible-image-lightbox-in-gatsbyjs",
          "publishedAt": null,
          "issue": null,
          "tags": [
            "cutting-edge-experiences",
            "gatsby-image",
            "accessibility"
          ]
        }
      },
      "next": {
        "fields": {
          "slug": "/blog/2018-12-04-per-link-gatsby-page-transitions-with-transitionlink/",
          "package": null,
          "released": true
        },
        "frontmatter": {
          "title": "Per-Link Gatsby page transitions with TransitionLink",
          "draft": null,
          "canonicalLink": null,
          "publishedAt": null,
          "issue": null,
          "tags": [
            "plugins",
            "cutting-edge-experiences"
          ]
        }
      }
    }
  },
  "query": "query usersMisiekDevGatsbyWwwSrcTemplatesTemplateBlogPostJs2991924798(\n  $slug: String!\n) {\n  mdx(fields: {slug: {eq: $slug}}) {\n    body\n    excerpt\n    timeToRead\n    fields {\n      slug\n      publishedAt\n    }\n    frontmatter {\n      title\n      excerpt\n      date(formatString: \"MMMM Do YYYY\")\n      rawDate: date\n      canonicalLink\n      tags\n      image {\n        childImageSharp {\n          resize(width: 1500, height: 1500) {\n            src\n          }\n          fluid(maxWidth: 786) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      imageAuthor\n      imageAuthorLink\n      imageTitle\n      showImageInArticle\n      author {\n        id\n        bio\n        twitter\n        avatar {\n          childImageSharp {\n            fixed(width: 64, height: 64, quality: 75, traceSVG: {turdSize: 10, background: \"#f6f2f8\", color: \"#e0d6eb\"}) {\n              ...GatsbyImageSharpFixed_tracedSVG\n            }\n          }\n        }\n        fields {\n          slug\n        }\n      }\n    }\n  }\n}\n\nfragment GatsbyImageSharpFluid on ImageSharpFluid {\n  base64\n  aspectRatio\n  src\n  srcSet\n  sizes\n}\n\nfragment GatsbyImageSharpFixed_tracedSVG on ImageSharpFixed {\n  tracedSVG\n  width\n  height\n  src\n  srcSet\n}\n"
}