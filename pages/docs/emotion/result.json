{
  "path": "/docs/emotion/",
  "result": {
    "data": {
      "mdx": {
        "body": "function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Emotion\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In this guide, you will learn how to set up a site with the CSS-in-JS library \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://emotion.sh\"\n  }), \"Emotion\"), \".\"), mdx(\"p\", null, \"Emotion is a performant and flexible CSS-in-JS library. Building on many other CSS-in-JS libraries, it allows you to style apps quickly with string or object styles. It has predictable composition to avoid specificity issues with CSS. With source maps and labels, Emotion has a great developer experience and great performance with heavy caching in production.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://emotion.sh/docs/ssr\"\n  }), \"Server side rendering\"), \" works out of the box in Emotion. You can use React\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"renderToString\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"renderToNodeStream\"), \" methods directly without any extra configuration. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"extractCritical\"), \" feature removes unused rules that were created with emotion and helps loading pages faster.\"), mdx(\"p\", null, \"First, open a new terminal window and run the following to create a new site:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"gatsby new emotion-tutorial https://github.com/gatsbyjs/gatsby-starter-hello-world\\n\")), mdx(\"p\", null, \"Second, install the necessary dependencies for Emotion and Gatsby.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"npm install --save gatsby-plugin-emotion @emotion/core @emotion/styled\\n\")), mdx(\"p\", null, \"And then add the plugin to your site\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-config.js\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript:title=gatsby-config.js\"\n  }), \"module.exports = {\\n  plugins: [`gatsby-plugin-emotion`],\\n}\\n\")), mdx(\"p\", null, \"Then in your terminal run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm start\"), \" to start the Gatsby development server.\"), mdx(\"p\", null, \"Now let\\u2019s create a sample Emotion page at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/pages/index.js\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/pages/index.js\"\n  }), \"import React from \\\"react\\\"\\nimport styled from \\\"@emotion/styled\\\"\\nimport { css } from \\\"@emotion/core\\\"\\n\\nconst Container = styled.div`\\n  margin: 3rem auto;\\n  max-width: 600px;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  justify-content: center;\\n`\\n\\nconst UserWrapper = styled.div`\\n  display: flex;\\n  align-items: center;\\n  margin-top: 0;\\n  margin-right: auto;\\n  margin-bottom: 12px;\\n  margin-left: auto;\\n  &:last-child {\\n    margin-bottom: 0;\\n  }\\n`\\n\\nconst Avatar = styled.img`\\n  flex-grow: 0;\\n  flex-shrink: 0;\\n  flex-basis: 96px;\\n  width: 96px;\\n  height: 96px;\\n  margin: 0;\\n`\\n\\nconst Description = styled.div`\\n  flex: 1;\\n  margin-left: 18px;\\n  padding: 12px;\\n`\\n\\nconst Username = styled.h2`\\n  margin: 0 0 12px 0;\\n  padding: 0;\\n`\\n\\nconst Excerpt = styled.p`\\n  margin: 0;\\n`\\n// Using css prop provides a concise and flexible API to style the components. //\\nconst underline = css`\\n  text-decoration: underline;\\n`\\n\\nconst User = props => (\\n  <UserWrapper>\\n    <Avatar src={props.avatar} alt=\\\"\\\" />\\n    <Description>\\n      <Username>{props.username}</Username>\\n      <Excerpt>{props.excerpt}</Excerpt>\\n    </Description>\\n  </UserWrapper>\\n)\\n\\nexport default () => (\\n  <Container>\\n    <h1 css={underline}>About Emotion</h1>\\n    <p>Emotion is uber cool</p>\\n    <User\\n      username=\\\"Jane Doe\\\"\\n      avatar=\\\"https://s3.amazonaws.com/uifaces/faces/twitter/adellecharles/128.jpg\\\"\\n      excerpt=\\\"I'm Jane Doe. Lorem ipsum dolor sit amet, consectetur adipisicing elit.\\\"\\n    />\\n    <User\\n      username=\\\"Bob Smith\\\"\\n      avatar=\\\"https://s3.amazonaws.com/uifaces/faces/twitter/vladarbatov/128.jpg\\\"\\n      excerpt=\\\"I'm Bob smith, a vertically aligned type of guy. Lorem ipsum dolor sit amet, consectetur adipisicing elit.\\\"\\n    />\\n  </Container>\\n)\\n\")), mdx(\"h2\", {\n    \"id\": \"adding-global-styles-in-gatsby-with-emotion\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#adding-global-styles-in-gatsby-with-emotion\",\n    \"aria-label\": \"adding global styles in gatsby with emotion permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Adding global styles in Gatsby with Emotion\"), mdx(\"p\", null, \"To start, create a new Gatsby site with the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/gatsbyjs/gatsby-starter-hello-world\"\n  }), \"hello world starter\"), \" and install \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/packages/gatsby-plugin-emotion/\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"gatsby-plugin-emotion\")), \" and its dependencies:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"gatsby new global-styles https://github.com/gatsbyjs/gatsby-starter-hello-world\\ncd global-styles\\nnpm install --save gatsby-plugin-emotion @emotion/core @emotion/styled\\n\")), mdx(\"p\", null, \"Create \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-config.js\"), \" and add the Emotion plugin:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js:title=gatsby-config.js\"\n  }), \"module.exports = {\\n  plugins: [`gatsby-plugin-emotion`],\\n}\\n\")), mdx(\"p\", null, \"Next, add a layout component at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/components/layout.js\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/components/layout.js\"\n  }), \"import React from \\\"react\\\"\\nimport { Global, css } from \\\"@emotion/core\\\"\\nimport styled from \\\"@emotion/styled\\\"\\n\\nconst Wrapper = styled(\\\"div\\\")`\\n  border: 2px solid green;\\n  padding: 10px;\\n`\\n\\nexport default ({ children }) => (\\n  <Wrapper>\\n    <Global\\n      styles={css`\\n        div {\\n          background: red;\\n          color: white;\\n        }\\n      `}\\n    />\\n    {children}\\n  </Wrapper>\\n)\\n\")), mdx(\"p\", null, \"Then, update \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/pages/index.js\"), \" to use the layout:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/pages/index.js\"\n  }), \"import React from \\\"react\\\"\\nimport Layout from \\\"../components/layout\\\"\\n\\nexport default () => <Layout>Hello world!</Layout>\\n\")), mdx(\"p\", null, \"Run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm run build\"), \", and you can see in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public/index.html\"), \" that the styles have been inlined globally.\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "excerpt": "In this guide, you will learn how to set up a site with the CSS-in-JS library  Emotion . Emotion is a performant and flexible CSS-in-JS…",
        "timeToRead": 1,
        "tableOfContents": {
          "items": [
            {
              "url": "#adding-global-styles-in-gatsby-with-emotion",
              "title": "Adding global styles in Gatsby with Emotion"
            }
          ]
        },
        "fields": {
          "slug": "/docs/emotion/",
          "anchor": "emotion"
        },
        "frontmatter": {
          "title": "Emotion",
          "overview": null,
          "issue": null,
          "disableTableOfContents": null,
          "tableOfContentsDepth": null
        },
        "parent": {
          "__typename": "File",
          "relativePath": "docs/emotion.md"
        }
      }
    },
    "pageContext": {
      "isCreatedByStatefulCreatePages": false,
      "slug": "/docs/emotion/",
      "prev": {
        "title": "Enhancing with CSS-in-JS",
        "link": "/docs/css-in-js/"
      },
      "next": {
        "title": "Styled-Components",
        "link": "/docs/styled-components/"
      }
    }
  },
  "query": "query usersMisiekDevGatsbyWwwSrcTemplatesTemplateDocsMarkdownJs2546709735(\n  $path: String!\n) {\n  mdx(fields: {slug: {eq: $path}}) {\n    body\n    excerpt\n    timeToRead\n    tableOfContents\n    fields {\n      slug\n      anchor\n    }\n    frontmatter {\n      title\n      overview\n      issue\n      disableTableOfContents\n      tableOfContentsDepth\n    }\n    ...MarkdownPageFooterMdx\n  }\n}\n\nfragment MarkdownPageFooterMdx on Mdx {\n  parent {\n    __typename\n    ... on File {\n      relativePath\n    }\n  }\n}\n"
}