{
  "path": "/docs/adding-forms/",
  "result": {
    "data": {
      "mdx": {
        "body": "function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Adding forms\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Gatsby is built on top of React. So anything that is possible with a React form is possible in Gatsby. Additional details about how to create React forms can be found in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org/docs/forms.html\"\n  }), \"React forms documentation\"), \" (which happens to be built with Gatsby!)\"), mdx(\"p\", null, \"Let\\u2019s start with the following page.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/pages/index.js\"\n  }), \"import React from \\\"react\\\"\\n\\nexport default () => <div>Hello world!</div>\\n\")), mdx(\"p\", null, \"This Gatsby page is a React component. When you want to create a form, you need to store the state of the form - what the user has entered. Convert your function (stateless) component to a class (stateful) component.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/pages/index.js\"\n  }), \"import React from \\\"react\\\"\\n\\nexport default class IndexPage extends React.Component {\\n  render() {\\n    return <div>Hello world!</div>\\n  }\\n}\\n\")), mdx(\"p\", null, \"Now that you have created a class component, you can add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"state\"), \" to the component.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/pages/index.js\"\n  }), \"import React from \\\"react\\\"\\n\\nexport default class IndexPage extends React.Component {\\n  state = {\\n    firstName: \\\"\\\",\\n    lastName: \\\"\\\",\\n  }\\n\\n  render() {\\n    return <div>Hello world!</div>\\n  }\\n}\\n\")), mdx(\"p\", null, \"And now you can add a few input fields:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/pages/index.js\"\n  }), \"import React from \\\"react\\\"\\n\\nexport default class IndexPage extends React.Component {\\n  state = {\\n    firstName: \\\"\\\",\\n    lastName: \\\"\\\",\\n  }\\n\\n  render() {\\n    return (\\n      <form>\\n        <label>\\n          First name\\n          <input type=\\\"text\\\" name=\\\"firstName\\\" />\\n        </label>\\n        <label>\\n          Last name\\n          <input type=\\\"text\\\" name=\\\"lastName\\\" />\\n        </label>\\n        <button type=\\\"submit\\\">Submit</button>\\n      </form>\\n    )\\n  }\\n}\\n\")), mdx(\"p\", null, \"When a user types into an input box, the state should update. Add an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" prop to update state and add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" prop to keep the input up to date with the new state:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/pages/index.js\"\n  }), \"import React from \\\"react\\\"\\n\\nexport default class IndexPage extends React.Component {\\n  state = {\\n    firstName: \\\"\\\",\\n    lastName: \\\"\\\",\\n  }\\n\\n  handleInputChange = event => {\\n    const target = event.target\\n    const value = target.value\\n    const name = target.name\\n\\n    this.setState({\\n      [name]: value,\\n    })\\n  }\\n\\n  render() {\\n    return (\\n      <form>\\n        <label>\\n          First name\\n          <input\\n            type=\\\"text\\\"\\n            name=\\\"firstName\\\"\\n            value={this.state.firstName}\\n            onChange={this.handleInputChange}\\n          />\\n        </label>\\n        <label>\\n          Last name\\n          <input\\n            type=\\\"text\\\"\\n            name=\\\"lastName\\\"\\n            value={this.state.lastName}\\n            onChange={this.handleInputChange}\\n          />\\n        </label>\\n        <button type=\\\"submit\\\">Submit</button>\\n      </form>\\n    )\\n  }\\n}\\n\")), mdx(\"p\", null, \"Now that your inputs are working, you want something to happen when you submit the form. Add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onSubmit\"), \" props to the form element and add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"handleSubmit\"), \" to show an alert when the user submits the form:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx:title=src/pages/index.js\"\n  }), \"import React from \\\"react\\\"\\n\\nexport default class IndexPage extends React.Component {\\n  state = {\\n    firstName: \\\"\\\",\\n    lastName: \\\"\\\",\\n  }\\n\\n  handleInputChange = event => {\\n    const target = event.target\\n    const value = target.value\\n    const name = target.name\\n\\n    this.setState({\\n      [name]: value,\\n    })\\n  }\\n\\n  handleSubmit = event => {\\n    event.preventDefault()\\n    alert(`Welcome ${this.state.firstName} ${this.state.lastName}!`)\\n  }\\n\\n  render() {\\n    return (\\n      <form onSubmit={this.handleSubmit}>\\n        <label>\\n          First name\\n          <input\\n            type=\\\"text\\\"\\n            name=\\\"firstName\\\"\\n            value={this.state.firstName}\\n            onChange={this.handleInputChange}\\n          />\\n        </label>\\n        <label>\\n          Last name\\n          <input\\n            type=\\\"text\\\"\\n            name=\\\"lastName\\\"\\n            value={this.state.lastName}\\n            onChange={this.handleInputChange}\\n          />\\n        </label>\\n        <button type=\\\"submit\\\">Submit</button>\\n      </form>\\n    )\\n  }\\n}\\n\")), mdx(\"p\", null, \"This form isn\\u2019t doing anything besides showing the user information that they just entered. At this point, you may want to move this form to a component, send the form state to a backend server, or add robust validation. You can also use fantastic React form libraries like \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/jaredpalmer/formik\"\n  }), \"Formik\"), \" or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/final-form/react-final-form\"\n  }), \"Final Form\"), \" to speed up your development process.\"), mdx(\"p\", null, \"All of this is possible and more by leveraging the power of Gatsby and the React ecosystem!\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "excerpt": "Gatsby is built on top of React. So anything that is possible with a React form is possible in Gatsby. Additional details about how toâ€¦",
        "timeToRead": 1,
        "tableOfContents": {},
        "fields": {
          "slug": "/docs/adding-forms/",
          "anchor": "adding-forms"
        },
        "frontmatter": {
          "title": "Adding forms",
          "overview": null,
          "issue": null,
          "disableTableOfContents": null,
          "tableOfContentsDepth": null
        },
        "parent": {
          "__typename": "File",
          "relativePath": "docs/adding-forms.md"
        }
      }
    },
    "pageContext": {
      "isCreatedByStatefulCreatePages": false,
      "slug": "/docs/adding-forms/",
      "prev": {
        "title": "Adding Authentication",
        "link": "/docs/building-a-site-with-authentication/",
        "breadcrumbTitle": "Authentication"
      },
      "next": {
        "title": "Building a Contact Form",
        "link": "/docs/building-a-contact-form/"
      }
    }
  },
  "query": "query usersMisiekDevGatsbyWwwSrcTemplatesTemplateDocsMarkdownJs2546709735(\n  $path: String!\n) {\n  mdx(fields: {slug: {eq: $path}}) {\n    body\n    excerpt\n    timeToRead\n    tableOfContents\n    fields {\n      slug\n      anchor\n    }\n    frontmatter {\n      title\n      overview\n      issue\n      disableTableOfContents\n      tableOfContentsDepth\n    }\n    ...MarkdownPageFooterMdx\n  }\n}\n\nfragment MarkdownPageFooterMdx on Mdx {\n  parent {\n    __typename\n    ... on File {\n      relativePath\n    }\n  }\n}\n"
}